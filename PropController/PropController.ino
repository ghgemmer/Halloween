/*
 Author: Greg Gemmer, ghgemmer@gmail.com
 Copyright (c) 2021 Greg Gemmer.
 MIT license
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


printSdCardInfo() - attribution
created  28 Mar 2011
by Limor Fried
modified 24 July 2020
by Tom Igoe

 */

 

// Prop Controller
#include <stdio.h> 
#include <string.h> 
#include "Arduino.h"
#include <PWMServoNew.h>
#include <inttypes.h>
#include <EEPROM.h>
#include "base_device.h"
#include "servo_device.h"
#include "servo_filter.h"
#include "imu_filter.h"
#include "relay_device.h"
#include "mp3_device.h"
#include "LED_device.h"
#include "devices_player.h"
#include "mp3_Player.h"
#include "indexed_values_reader.h"
#include "NormalArray_values_reader.h"
#include "ProgMemArray_values_reader.h"
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <i2cSwitch.h>
#include <Adafruit_Sensor.h>
//#include <Adafruit_BNO055.h>
#include "Adafruit_BNO055_HalloweenProp.h"
#include <utility/imumaths.h>
#include <utility/quaternion.h>

#include "program_memory_misc.h"
#include "MemoryFree.h"

const int  Per_Sensor_Cal_Data_Size_Eeprom = NUM_BNO055_OFFSET_REGISTERS;  // in bytes per sensor
const int  Num_Eeprom_Cal_Sensors = 4;
const int  Sensors_Cal_Data_Eeprom_adrs = 0x2ff;  // max is 0x3ff
const int  Mouth_Max_Position = 110; // corresponds to mouth closed
const int  Mouth_Min_Position = 80;  // corresponds to mouth fully open
const int  Mouth_Rest_Position = 110; // corresponds to mouth normal rest position of closed
const int  Head_Vertical_Max_Position = 140; // corresponds to head tilted forward.   Approx 90 degrees is not tilt.
const int  Head_Vertical_Min_Position = 45;  // corresponds to head tilted back
const int  Head_Vertical_Default_Position = 79;  // corresponds to head normal rest position of level which generally causes very little servo noise.
const int  Head_Horizontal_Max_Position = 120;  // Corresponds to head turned to right some (view from prop). 90 degrees is head looking straight forward.
const int  Head_Horizontal_Min_Position = 45;
const int  Head_Horizontal_Default_Position = 90; // corresponds to head normal rest position of looking straight forward
const int  Arm_Yaw_Min_Position = 45;  // 90 degrees is arm pointed straight out front.  45 is arm at 45 degree angle from chest (view from prop)
const int  Arm_Yaw_Max_Position = 150; // Arm 60 degrees clockwise from straight out (as viewed from prop). 
                                       // Currently limited by the back lower corner of the Roll servo motor when arm is 
                                       // swung to the right and down, so as to not hit the back of the shoulder plate.  
                                       // Possibly cutting the back end of the shoulder plate enough could remedy this put it would be close to the screws holding that plate to the shoulder blade.
const int  Arm_Yaw_Default_Position = 90; // corresponds to arm normal rest position of straight out
const int  Arm_Roll_Min_Position = 120;  // corresponds to level no roll
const int  Arm_Roll_Max_Position = 240;  // corresopnds to 120 degree roll toward chest
const int  Arm_Roll_Default_Position = 120;  // corresopnds to normal rest position of no roll (i.e. no tilt)
const int  Arm_Pitch_Min_Position = 0;  // arm straight up
const int  Arm_Pitch_Max_Position = 200;  // 179 is arm straigh down.  200 is arm 21 degrees toward the back from straight down.
const int  Arm_Pitch_Default_Position = 175;  // corresopnds to normal rest position of arm hanging straight down
const int  Elbow_Pitch_Min_Position = 70; // forearm 10 degrees up from bend at 90 degree angle
const int  Elbow_Pitch_Max_Position = 190; // foreamr at 175 is straightened elbow.  190 is 15 bent backwards (not a possible human move)
const int  Elbow_Pitch_Default_Position = 175; // corresopnds to normal rest position of elbow straightened

const int  Imu_Arm_Yaw_Min_Position = 0;
const int  Imu_Arm_Yaw_Max_Position = 359;
const int  Imu_Arm_Yaw_Default_Position = 180;  // straight forward
const int  Imu_Arm_Roll_Min_Position = -85;
const int  Imu_Arm_Roll_Max_Position = 85;
const int  Imu_Arm_Roll_Default_Position = 0; // level
const int  Imu_Arm_Pitch_Min_Position = -110;
const int  Imu_Arm_Pitch_Max_Position = 60;
const int  Imu_Arm_Pitch_Default_Position = -90;  // straight down
const int  Imu_Elbow_Pitch_Min_Position = Imu_Arm_Pitch_Min_Position;
const int  Imu_Elbow_Pitch_Max_Position = Imu_Arm_Pitch_Max_Position + 90; // Max arm pitch + bend 90 degrees up
                                            // The above can have some issues as indicated below but when don't use this the
                                            // movement of the arm seems to be more jerky
                                            // Probably need to detetermine if 120 is really the max
                                            // as well as why the motion seems to be jerky
                                            // Need to check the difference calculation of vectors to see how much time
                                            // Those 4 differences for the elbow are taking.
                                            // Also need to determine why sometimes we get a weird movement where the arm
                                            // seems to jump to a weird position or through some weird transition.
                          
//const int  Imu_Elbow_Pitch_Max_Position = 120; // Moving IMU any more than this causes IMU yaw/heading to drop to 0 (basically reverses yaw direction)
const int  Imu_Elbow_Pitch_Default_Position = Imu_Arm_Pitch_Min_Position;


const int  Servo_Min_Update_Period = 10; 

enum e_pneumatic_back_position_def {
    PNEUMATIC_BACK_UPRIGHT  = HIGH,
    PNEUMATIC_BACK_BENTOVER = LOW
};

enum e_eye_LEDs_def {
    EYE_LEDS_OFF    = 0,
    EYE_LEDS_ON     = 255
};

enum e_voice_files {
    CHEWING_AT_HEAD_FILE            = 5,
    BLOOD_CURDLING_SCREAM_FILE      = 4,
    HISSING_FILE                    = 3,
    MORE_OFTEN_CHEWING_AT_HEAD_FILE = 6,
    DAYO_FILE                       = 7, 
    WEREWOLVES_OF_LONDON_FILE       = 8,
    SHAKE_SHAKE_SENORA_FILE         = 9
    
};

#define NUM_ARRAY_ENTRIES(a)  (sizeof(a)/sizeof(a[0]))
#define MKVoiceEntry(cmd, param) ((mp3_device::cmd << 8) | (param & 0x00ff))

// imported from excel spreadsheet
#if 0
const unsigned long device_play_interval = 500; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] PROGMEMSECTION2 = {	90	,100	,90	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,110	,110	,110	,110	,110	,110																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Head_Vertical_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,90	,90	,95	,90	,85	,90	,90	,90	,120	,120	,120	,120	,120	,120	,120	,100	,100	,100	,100	,100	,100																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Eyes_LEDs_values[] PROGMEMSECTION2 = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Pneumatic_Back_values[] PROGMEMSECTION2 = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Voice_Player_values[] PROGMEMSECTION2 = {	MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)																																																																																															
};

#elif 0

// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.
const unsigned long device_play_interval = 100; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Head_Vertical_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Eyes_LEDs_values[] PROGMEMSECTION2 = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Pneumatic_Back_values[] PROGMEMSECTION2 = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Voice_Player_values[] PROGMEMSECTION2 = {	MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)
};	

#elif 0
// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.

const unsigned long device_play_interval = 100; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Head_Vertical_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Eyes_LEDs_values[] PROGMEMSECTION2 = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Pneumatic_Back_values[] PROGMEMSECTION2 = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Voice_Player_values[] PROGMEMSECTION2 = {	MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)
};																																																																																																																																																																														
																																																																																																																																																																																			
																																																																																																																				
#elif 0
// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.

const unsigned long device_play_interval = 100; // milliseconds

const uint16_t Head_Horizontal_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Head_Vertical_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Eyes_LEDs_values[] PROGMEMSECTION2 = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Pneumatic_Back_values[] PROGMEMSECTION2 = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Voice_Player_values[] PROGMEMSECTION2 = {	MKVoiceEntry(START,  MORE_OFTEN_CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)
};	

#else
// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.
																																																																																																																																																																													
const unsigned long device_play_interval = 100; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Head_Vertical_Rotation_values[] PROGMEMSECTION2 = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Eyes_LEDs_values[] PROGMEMSECTION2 = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Pneumatic_Back_values[] PROGMEMSECTION2 = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Voice_Player_values[] PROGMEMSECTION2 = {  MKVoiceEntry(START,  MORE_OFTEN_CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)																																																																					
};																																																																																																																																																																																																																																																															

#endif	

ProgMemArray_values_reader Head_Horizontal_Rotation_Reader;
ProgMemArray_values_reader Head_Vertical_Rotation_Reader;
ProgMemArray_values_reader Eyes_LEDs_Reader;
ProgMemArray_values_reader Pneumatic_Back_Reader;
ProgMemArray_values_reader Voice_Player_Reader;


#define DAYO_MOVEMENTS
#ifdef DAYO_MOVEMENTS
// Harry Belefonte DayO movements  // takes up about 32,000 bytes of program memory
const unsigned long DayO_play_interval = 50; // milliseconds
const uint16_t DayO_HeadVertRotation[] PROGMEMSECTION2 = {	80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,83	,84	,84	,84	,83	,83	,83	,82	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,83	,84	,85	,86	,86	,86	,86	,86	,86	,85	,84	,84	,84	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,85	,86	,87	,87	,87	,86	,86	,86	,85	,85	,84	,83	,82	,82	,82	,82	,82	,82	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,82	,82	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,80	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,84	,84	,84	,83	,83	,83	,82	,82	,82	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,86	,85	,85	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,84	,84	,84	,84	,84	,84	,85	,86	,86	,86	,85	,84	,84	,84	,83	,83	,83	,84	,85	,85	,84	,84	,84	,84	,84	,84	,85	,85	,85	,84	,84	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,83	,84	,85	,85	,85	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,83	,83	,83	,84	,85	,85	,85	,84	,84	,83	,83	,83	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,86	,85	,85	,85	,84	,84	,84	,84	,85	,85	,85	,84	,84	,84	,83	,83	,84	,84	,85	,86	,85	,85	,84	,84	,84	,84	,84	,84	,85	,84	,83	,82	,81	,80	,80	,80	,80	,80	,80	,80	,81	,81	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,81	,81	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,81	,81	,82	,82	,81	,82	,82	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,82	,82	,83	,83	,84	,84	,84	,83	,83	,84	,84	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,85	,84	,84	,83	,83	,82	,82	,83	,84	,85	,85	,85	,84	,84	,83	,83	,84	,85	,85	,86	,85	,84	,83	,82	,81	,81	,82	,83	,84	,85	,86	,85	,84	,84	,83	,84	,84	,85	,86	,86	,86	,84	,83	,82	,81	,81	,81	,81	,82	,83	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,82	,83	,83	,83	,83	,82	,82	,83	,83	,84	,84	,83	,82	,83	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,85	,84	,84	,83	,83	,83	,84	,84	,85	,85	,85	,85	,85	,84	,84	,84	,85	,85	,86	,86	,86	,86	,85	,84	,83	,83	,83	,84	,85	,85	,85	,84	,84	,83	,83	,84	,85	,85	,84	,83	,81	,80	,79	,78	,79	,79	,80	,81	,80	,79	,78	,78	,79	,79	,79	,79	,78	,78	,78	,78	,79	,79	,79	,79	,78	,78	,77	,77	,76	,76	,76	,75	,75	,74	,74	,72	,72	,72	,71	,71	,71	,71	,71	,70	,69	,67	,66	,66	,66	,66	,66	,66	,66	,65	,64	,64	,63	,63	,63	,63	,62	,61	,60	,59	,57	,56	,55	,55	,56	,56	,57	,58	,60	,64	,69	,75	,78	,82	,84	,83	,82	,82	,82	,82	,82	,83	,83	,82	,82	,82	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,81	,82	,82	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,84	,85	,86	,86	,86	,85	,85	,84	,84	,84	,84	,84	,84	,83	,83	,83	,82	,82	,81	,81	,80	,80	,78	,77	,73	,71	,71	,71	,71	,71	,72	,72	,72	,71	,71	,71	,71	,71	,71	,71	,70	,68	,67	,66	,65	,65	,65	,65	,66	,66	,65	,64	,64	,64	,64	,63	,63	,63	,62	,61	,60	,59	,59	,59	,59	,59	,59	,59	,58	,57	,56	,56	,56	,56	,56	,56	,57	,57	,57	,56	,55	,55	,54	,55	,55	,55	,55	,58	,62	,67	,72	,76	,79	,81	,81	,80	,80	,79	,79	,80	,81	,81	,81	,81	,81	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,79	,79	,78	,78	,78	,78	,79	,81	,82	,83	,82	,82	,82	,82	,82	,83	,84	,85	,86	,87	,87	,86	,86	,85	,85	,84	,84	,85	,85	,85	,85	,84	,84	,84	,84	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,84	,85	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,86	,85	,84	,83	,83	,83	,83	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,82	,82	,82	,82	,83	,84	,85	,86	,86	,86	,85	,85	,84	,84	,84	,85	,85	,85	,85	,84	,84	,85	,85	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,87	,87	,88	,88	,87	,87	,86	,85	,85	,85	,85	,86	,86	,86	,85	,85	,85	,85	,86	,87	,88	,88	,88	,87	,86	,85	,85	,84	,84	,84	,85	,85	,86	,86	,86	,86	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,85	,85	,86	,86	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,86	,86	,85	,85	,85	,85	,86	,86	,87	,87	,87	,87	,87	,86	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,87	,88	,87	,86	,86	,86	,87	,88	,88	,89	,89	,88	,88	,87	,87	,86	,87	,87	,88	,88	,89	,89	,88	,88	,87	,87	,87	,88	,88	,89	,89	,88	,88	,87	,87	,86	,86	,87	,88	,89	,89	,89	,88	,87	,86	,86	,86	,87	,87	,88	,87	,87	,86	,86	,85	,85	,86	,87	,88	,89	,89	,88	,87	,87	,86	,86	,87	,87	,88	,88	,87	,86	,85	,84	,84	,85	,85	,86	,88	,88	,87	,86	,86	,85	,86	,86	,86	,86	,85	,83	,80	,78	,77	,77	,77	,77	,77	,76	,75	,73	,72	,72	,72	,72	,73	,73	,73	,74	,74	,74	,75	,75	,75	,75	,75	,75	,75	,73	,71	,70	,70	,70	,70	,71	,71	,70	,69	,68	,66	,65	,64	,63	,62	,61	,60	,59	,58	,57	,57	,57	,58	,60	,64	,69	,74	,79	,85	,88	,89	,89	,88	,87	,86	,86	,86	,86	,86	,86	,87	,87	,88	,87	,86	,86	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,88	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,89	,88	,88	,88	,88	,88	,88	,89	,90	,90	,90	,90	,89	,88	,87	,87	,87	,86	,86	,86	,87	,88	,87	,85	,83	,82	,82	,82	,82	,82	,81	,80	,78	,78	,78	,78	,78	,77	,75	,72	,70	,68	,67	,67	,67	,67	,67	,67	,67	,67	,66	,66	,66	,66	,65	,65	,65	,66	,66	,65	,65	,64	,64	,64	,64	,64	,64	,63	,61	,59	,57	,56	,55	,55	,55	,55	,54	,53	,52	,51	,51	,51	,52	,53	,55	,60	,66	,74	,80	,84	,87	,88	,88	,87	,86	,86	,86	,87	,86	,85	,84	,83	,84	,85	,86	,85	,84	,83	,83	,83	,84	,84	,85	,86	,87	,89	,90	,90	,90	,89	,89	,88	,88	,88	,88	,88	,87	,86	,86	,86	,86	,86	,87	,87	,88	,89	,90	,89	,89	,88	,88	,88	,88	,87	,87	,88	,87	,87	,86	,85	,85	,84	,85	,85	,85	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,85	,84	,84	,84	,85	,85	,85	,86	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,84	,84	,83	,83	,83	,83	,84	,84	,84	,84	,84	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,87	,88	,89	,89	,89	,89	,88	,87	,87	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,86	,87	,87	,88	,88	,87	,87	,86	,86	,85	,85	,85	,85	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,85	,85	,84	,84	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,85	,85	,84	,84	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,84	,85	,85	,85	,84	,84	,84	,85	,85	,86	,87	,88	,89	,89	,88	,88	,88	,88	,88	,88	,88	,87	,87	,85	,83	,82	,82	,82	,82	,83	,85	,87	,88	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,86	,85	,86	,86	,86	,86	,86	,86	,85	,86	,86	,86	,86	,86	,85	,84	,83	,82	,82	,82	,82	,83	,83	,84	,84	,83	,83	,83	,83	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,83	,84	,83	,83	,84	,83	,83	,83	,82	,82	,82	,83	,85	,85	,84	,83	,82	,82	,83	,83	,83	,83	,83	,83	,83	,85	,86	,86	,86	,86	,86	,85	,85	,85	,84	,84	,84	,85	,85	,86	,85	,85	,85	,85	,85	,85	,86	,87	,88	,88	,88	,87	,86	,86	,86	,85	,86	,86	,86	,87	,86	,86	,86	,86	,86	,87	,87	,88	,89	,88	,87	,87	,86	,85	,85	,85	,86	,86	,86	,85	,84	,84	,84	,84	,85	,86	,86	,87	,88	,88	,87	,87	,87	,87	,86	,86	,86	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,84	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,82	,83	,84	,85	,85	,85	,85	,84	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,86	,87	,87	,87	,86	,86	,85	,84	,84	,84	,84	,85	,87	,88	,89	,88	,88	,87	,87	,87	,87	,88	,89	,89	,90	,89	,88	,88	,87	,87	,87	,87	,87	,88	,89	,90	,90	,89	,88	,88	,87	,87	,88	,89	,89	,89	,88	,87	,87	,86	,86	,86	,86	,86	,87	,87	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,83	,82	,81	,81	,80	,80	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,80	,80	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,79	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,80	,80	,79	,79	,79	,79	,79	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,79	,79	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,82	,84	,85	,87	,89	,91	,94	,96	,98	,99	,101	,103	,106	,107	,109	,110	,110	,110	,110	,110	,110	,109	,109	,109	,108	,108	,108	,108	,108	,108	,107	,107	,107	,107	,107	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,106	,105	,105	,105	,105	,106	,106	,106	,106	,105	,105	,105	,105	,105	,105	,105	,105	,105	,104	,105	,105	,105	,105	,105	,105	,105	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,103	,103	,103	,103	,104	,104	,103	,103	,103	,103	,103	,103	,103	,103	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
const uint16_t DayO_HeadHoriRotation[] PROGMEMSECTION2 = {	91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,95	,97	,98	,98	,98	,98	,97	,97	,97	,97	,97	,97	,96	,96	,96	,95	,95	,95	,95	,94	,94	,94	,94	,94	,93	,88	,81	,75	,72	,70	,70	,70	,71	,71	,72	,74	,81	,90	,100	,107	,109	,108	,107	,106	,105	,101	,94	,89	,86	,84	,84	,86	,86	,87	,87	,87	,88	,88	,88	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,92	,92	,92	,92	,92	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,93	,92	,93	,93	,92	,92	,92	,93	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,93	,92	,92	,92	,92	,92	,92	,92	,93	,92	,92	,92	,92	,92	,92	,92	,93	,93	,92	,93	,93	,92	,92	,93	,93	,93	,92	,93	,93	,93	,93	,93	,93	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,93	,94	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,90	,90	,89	,90	,90	,90	,91	,92	,93	,93	,93	,94	,94	,93	,93	,92	,92	,91	,90	,89	,89	,89	,89	,90	,90	,91	,92	,93	,94	,95	,95	,95	,95	,95	,94	,94	,93	,92	,91	,91	,90	,90	,90	,90	,91	,92	,92	,93	,94	,95	,95	,96	,96	,95	,95	,94	,93	,92	,92	,91	,90	,89	,89	,90	,90	,91	,92	,93	,94	,95	,95	,95	,95	,95	,94	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,92	,92	,93	,92	,93	,93	,92	,93	,93	,93	,93	,92	,92	,92	,92	,92	,93	,92	,92	,92	,92	,92	,92	,93	,92	,92	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,94	,95	,95	,96	,96	,97	,97	,96	,96	,95	,94	,93	,92	,91	,91	,90	,90	,90	,91	,91	,92	,93	,94	,95	,95	,95	,95	,94	,93	,92	,91	,90	,89	,88	,88	,88	,89	,89	,90	,91	,92	,93	,94	,94	,94	,94	,94	,94	,93	,92	,91	,90	,89	,88	,88	,88	,89	,90	,91	,92	,93	,95	,96	,97	,96	,96	,95	,95	,94	,92	,92	,91	,90	,89	,89	,90	,91	,92	,92	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,94	,94	,93	,94	,94	,93	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,93	,93	,93	,93	,92	,92	,91	,89	,87	,86	,86	,87	,88	,89	,90	,91	,92	,93	,94	,93	,93	,92	,91	,90	,89	,89	,89	,89	,90	,91	,91	,92	,93	,93	,93	,93	,92	,92	,91	,90	,90	,89	,88	,87	,86	,86	,86	,87	,88	,88	,89	,90	,91	,92	,91	,91	,91	,91	,90	,89	,88	,87	,86	,86	,85	,85	,86	,87	,88	,89	,89	,90	,91	,91	,91	,92	,91	,90	,90	,89	,88	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,88	,89	,89	,88	,88	,89	,89	,88	,89	,89	,89	,88	,88	,89	,89	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,86	,83	,82	,81	,81	,82	,83	,84	,85	,86	,87	,88	,88	,87	,87	,86	,85	,83	,83	,83	,83	,83	,84	,85	,86	,87	,88	,88	,88	,88	,87	,86	,85	,84	,83	,82	,81	,80	,79	,80	,80	,81	,82	,83	,84	,86	,87	,88	,88	,88	,88	,87	,86	,85	,84	,83	,82	,81	,81	,80	,81	,82	,83	,84	,85	,86	,86	,87	,87	,86	,85	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,87	,86	,86	,86	,87	,87	,87	,87	,88	,89	,89	,89	,89	,89	,89	,89	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,92	,93	,93	,93	,93	,93	,93	,94	,95	,96	,96	,96	,96	,96	,95	,95	,95	,94	,93	,91	,90	,88	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,90	,91	,91	,91	,92	,93	,95	,96	,97	,97	,96	,96	,95	,93	,92	,90	,89	,88	,87	,87	,88	,88	,89	,90	,90	,91	,91	,91	,91	,92	,92	,93	,93	,93	,93	,93	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,94	,94	,94	,95	,95	,96	,96	,96	,96	,97	,97	,98	,98	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,98	,98	,98	,97	,97	,97	,97	,97	,97	,97	,97	,97	,96	,95	,94	,92	,91	,90	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,86	,84	,83	,83	,82	,81	,80	,79	,78	,78	,78	,78	,78	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,82	,82	,83	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,85	,85	,85	,85	,85	,84	,83	,83	,83	,84	,84	,85	,86	,87	,88	,89	,90	,90	,90	,89	,88	,87	,84	,83	,81	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,82	,83	,84	,85	,86	,88	,89	,90	,91	,91	,91	,91	,90	,90	,89	,88	,88	,87	,86	,86	,85	,85	,85	,84	,83	,82	,82	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,83	,84	,85	,86	,86	,87	,87	,88	,90	,92	,92	,92	,92	,92	,91	,90	,89	,87	,86	,85	,85	,85	,86	,87	,89	,90	,91	,91	,91	,90	,90	,89	,89	,88	,87	,86	,85	,85	,85	,85	,85	,86	,87	,88	,89	,89	,91	,92	,93	,93	,93	,92	,92	,92	,91	,90	,90	,89	,89	,88	,88	,89	,90	,92	,93	,94	,96	,97	,98	,98	,97	,96	,94	,92	,89	,87	,85	,83	,81	,80	,80	,80	,81	,82	,84	,85	,86	,87	,88	,87	,87	,88	,88	,87	,87	,86	,86	,87	,87	,89	,90	,93	,96	,99	,102	,105	,107	,109	,109	,109	,109	,109	,109	,109	,107	,106	,104	,101	,98	,94	,91	,89	,87	,86	,85	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,80	,80	,78	,77	,76	,75	,74	,74	,75	,76	,77	,79	,80	,82	,83	,85	,85	,85	,85	,84	,83	,82	,81	,80	,78	,78	,77	,77	,77	,77	,78	,79	,80	,81	,83	,84	,85	,85	,84	,83	,82	,81	,79	,78	,77	,75	,74	,74	,75	,76	,77	,78	,80	,81	,82	,83	,84	,84	,83	,82	,81	,80	,78	,76	,75	,74	,74	,74	,75	,76	,77	,79	,80	,81	,82	,83	,84	,84	,83	,82	,81	,80	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,81	,81	,83	,83	,84	,84	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,85	,83	,80	,78	,76	,76	,76	,76	,75	,76	,76	,77	,78	,79	,79	,79	,79	,79	,79	,79	,80	,81	,81	,82	,82	,83	,83	,83	,84	,84	,85	,85	,85	,85	,84	,84	,83	,82	,82	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,80	,80	,80	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,80	,81	,82	,83	,84	,85	,85	,84	,83	,82	,80	,79	,78	,77	,77	,77	,78	,79	,80	,81	,82	,84	,85	,86	,86	,85	,85	,84	,83	,82	,81	,81	,81	,80	,80	,80	,80	,81	,81	,82	,82	,82	,82	,82	,83	,83	,84	,84	,85	,85	,85	,85	,86	,87	,87	,88	,88	,89	,88	,89	,89	,89	,89	,89	,90	,89	,90	,90	,90	,90	,91	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,91	,91	,90	,90	,90	,90	,89	,90	,90	,90	,90	,90	,90	,90	,90	,89	,88	,87	,86	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,84	,84	,83	,83	,83	,83	,84	,85	,88	,90	,91	,92	,91	,91	,90	,89	,87	,85	,84	,82	,81	,80	,79	,77	,76	,74	,72	,71	,69	,68	,68	,68	,69	,70	,70	,71	,72	,72	,73	,73	,74	,76	,77	,79	,81	,83	,85	,86	,88	,88	,89	,89	,89	,89	,88	,88	,87	,87	,86	,86	,84	,83	,81	,80	,79	,78	,77	,77	,76	,76	,76	,76	,76	,76	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,79	,80	,80	,81	,81	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,80	,78	,77	,76	,77	,78	,79	,81	,83	,86	,88	,90	,90	,90	,90	,88	,87	,86	,85	,84	,82	,81	,80	,79	,78	,78	,79	,80	,82	,83	,85	,88	,89	,90	,90	,89	,88	,87	,86	,84	,83	,81	,80	,79	,78	,78	,78	,79	,79	,80	,80	,81	,82	,82	,82	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,81	,81	,82	,82	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,80	,79	,79	,79	,80	,82	,83	,85	,86	,87	,89	,90	,91	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,90	,87	,85	,82	,80	,79	,78	,78	,77	,77	,77	,77	,78	,77	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,78	,78	,78	,78	,78	,78	,78	,78	,79	,78	,78	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,80	,81	,83	,84	,84	,84	,83	,82	,81	,80	,79	,80	,80	,81	,82	,83	,85	,87	,88	,88	,88	,87	,87	,86	,85	,83	,82	,81	,80	,80	,80	,80	,81	,82	,83	,84	,86	,87	,89	,90	,90	,90	,90	,89	,88	,87	,85	,84	,82	,81	,81	,81	,82	,83	,85	,86	,88	,89	,91	,91	,91	,90	,90	,88	,86	,85	,83	,82	,82	,82	,82	,84	,85	,86	,86	,86	,86	,85	,84	,83	,83	,84	,84	,84	,85	,85	,85	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,84	,82	,79	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,84	,86	,88	,89	,90	,91	,90	,90	,89	,88	,87	,86	,85	,84	,84	,84	,85	,86	,87	,88	,90	,92	,93	,94	,94	,94	,93	,92	,90	,88	,87	,84	,82	,81	,80	,79	,79	,79	,81	,82	,83	,85	,87	,89	,90	,92	,92	,90	,89	,88	,87	,85	,83	,82	,80	,79	,79	,79	,79	,80	,82	,83	,84	,86	,87	,88	,88	,88	,86	,85	,83	,82	,82	,81	,81	,81	,81	,80	,80	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,83	,82	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,81	,81	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,82	,81	,81	,80	,80	,79	,79	,79	,79	,79	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,78	,78	,78	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,83	,83	,84	,84	,84	,85	,85	,86	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,94	,94	,94
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
const uint16_t DayO_MouthRotation[] PROGMEMSECTION2 = {	110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,110	,109	,109	,109	,109	,109	,110	,109	,109	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,92	,88	,87	,90	,90	,90	,95	,105	,110	,110	,110	,110	,110	,104	,94	,88	,85	,87	,92	,97	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,98	,92	,99	,106	,102	,93	,96	,103	,109	,102	,95	,98	,109	,110	,110	,110	,102	,96	,93	,91	,93	,94	,95	,99	,104	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,106	,95	,91	,97	,101	,104	,101	,100	,102	,105	,106	,108	,108	,107	,104	,96	,94	,96	,99	,104	,105	,106	,106	,107	,109	,109	,109	,106	,100	,95	,96	,99	,103	,105	,106	,107	,107	,107	,105	,99	,96	,99	,104	,104	,97	,95	,97	,100	,104	,108	,110	,108	,105	,100	,95	,97	,99	,101	,102	,104	,106	,108	,110	,110	,109	,101	,96	,92	,93	,95	,96	,96	,96	,96	,96	,97	,97	,100	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,110	,110	,110	,110	,109	,109	,109	,109	,109	,109	,108	,108	,108	,101	,93	,95	,96	,98	,98	,101	,105	,109	,109	,109	,109	,110	,110	,109	,110	,110	,109	,110	,110	,110	,110	,110	,109	,109	,109	,109	,108	,99	,95	,99	,103	,106	,104	,101	,103	,104	,103	,97	,98	,100	,97	,96	,98	,99	,104	,107	,106	,104	,104	,102	,101	,105	,110	,105	,102	,97	,92	,96	,101	,100	,97	,94	,94	,98	,95	,90	,90	,95	,103	,102	,94	,93	,94	,97	,105	,104	,95	,93	,94	,98	,92	,90	,94	,98	,103	,110	,110	,110	,110	,110	,110	,110	,104	,100	,95	,96	,100	,104	,106	,98	,92	,90	,92	,94	,100	,99	,93	,92	,92	,93	,93	,92	,94	,97	,99	,99	,91	,92	,93	,91	,90	,91	,92	,93	,94	,95	,97	,99	,99	,99	,100	,100	,101	,101	,102	,102	,103	,102	,102	,102	,102	,102	,102	,98	,85	,81	,83	,89	,92	,85	,82	,85	,94	,103	,104	,96	,87	,82	,84	,89	,93	,94	,95	,96	,97	,96	,94	,87	,81	,80	,82	,86	,90	,93	,95	,96	,97	,96	,94	,90	,87	,81	,80	,80	,80	,82	,86	,91	,95	,97	,99	,101	,102	,102	,102	,98	,93	,86	,81	,82	,85	,88	,89	,91	,93	,95	,96	,97	,98	,98	,99	,101	,102	,104	,104	,104	,105	,105	,102	,101	,100	,96	,93	,90	,87	,83	,80	,80	,80	,80	,80	,80	,82	,85	,87	,89	,91	,92	,94	,95	,96	,97	,98	,99	,100	,102	,102	,103	,104	,105	,106	,107	,108	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,93	,92	,102	,102	,94	,92	,95	,98	,103	,102	,95	,87	,87	,92	,95	,99	,103	,107	,109	,105	,98	,93	,93	,100	,106	,109	,110	,109	,109	,109	,106	,97	,93	,98	,104	,103	,94	,93	,97	,101	,102	,92	,91	,94	,95	,90	,90	,99	,110	,110	,110	,110	,110	,110	,98	,91	,89	,89	,89	,89	,90	,92	,96	,104	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,87	,81	,88	,93	,100	,104	,103	,92	,86	,92	,100	,104	,104	,90	,86	,94	,86	,84	,89	,91	,97	,106	,108	,103	,91	,88	,93	,93	,86	,86	,88	,96	,102	,104	,104	,104	,101	,87	,81	,82	,88	,98	,103	,99	,88	,84	,84	,95	,104	,104	,104	,104	,104	,99	,83	,80	,80	,80	,86	,94	,103	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,94	,97	,101	,103	,106	,109	,110	,104	,96	,101	,106	,110	,110	,108	,100	,102	,105	,101	,98	,101	,104	,99	,94	,101	,104	,98	,103	,104	,98	,92	,91	,97	,106	,110	,110	,110	,110	,110	,101	,94	,98	,100	,97	,89	,95	,100	,97	,92	,88	,90	,88	,86	,95	,96	,92	,89	,91	,95	,89	,80	,81	,90	,95	,99	,103	,101	,89	,85	,88	,94	,99	,104	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,90	,86	,89	,94	,98	,101	,104	,106	,100	,91	,91	,99	,105	,101	,93	,93	,101	,103	,94	,91	,98	,103	,94	,90	,97	,102	,110	,108	,95	,91	,88	,88	,98	,103	,109	,110	,110	,110	,104	,95	,97	,103	,102	,89	,93	,102	,101	,92	,93	,99	,94	,88	,96	,97	,91	,91	,91	,93	,92	,80	,83	,94	,104	,110	,110	,110	,108	,92	,80	,84	,99	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,98	,99	,103	,104	,107	,110	,110	,107	,96	,90	,92	,95	,98	,98	,99	,100	,103	,101	,87	,82	,85	,88	,88	,88	,89	,92	,94	,86	,80	,82	,84	,85	,85	,83	,83	,83	,81	,80	,80	,80	,80	,80	,80	,84	,85	,80	,80	,80	,80	,80	,80	,80	,81	,82	,82	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,97	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,90	,93	,99	,100	,96	,92	,94	,99	,99	,99	,99	,100	,102	,97	,90	,91	,97	,101	,104	,105	,105	,104	,99	,91	,94	,99	,100	,102	,104	,104	,106	,106	,105	,99	,96	,101	,103	,100	,93	,93	,99	,104	,107	,109	,107	,95	,92	,96	,101	,104	,106	,106	,108	,108	,104	,103	,104	,104	,106	,108	,108	,109	,110	,110	,107	,98	,88	,90	,96	,102	,104	,107	,110	,110	,110	,110	,107	,104	,95	,87	,88	,92	,99	,104	,104	,98	,87	,89	,100	,108	,110	,110	,110	,109	,105	,90	,82	,84	,88	,89	,91	,93	,94	,87	,80	,80	,89	,94	,99	,105	,108	,105	,93	,80	,80	,80	,80	,82	,88	,92	,96	,87	,80	,80	,80	,80	,80	,80	,80	,80	,93	,100	,95	,80	,80	,80	,80	,80	,80	,80	,80	,97	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,110	,110	,110	,104	,104	,104	,102	,103	,102	,104	,106	,109	,101	,93	,95	,100	,107	,110	,110	,110	,110	,101	,95	,100	,104	,110	,110	,110	,110	,110	,110	,104	,96	,104	,107	,106	,97	,95	,98	,100	,103	,103	,102	,102	,97	,93	,97	,100	,102	,104	,107	,109	,107	,100	,95	,96	,100	,106	,108	,109	,110	,110	,108	,100	,93	,96	,106	,110	,110	,110	,110	,110	,110	,110	,110	,102	,90	,95	,98	,100	,98	,98	,99	,99	,99	,99	,99	,99	,99	,100	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,97	,102	,107	,110	,101	,95	,102	,107	,100	,95	,102	,105	,97	,94	,99	,107	,110	,106	,100	,96	,104	,109	,101	,98	,104	,102	,94	,96	,103	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,90	,95	,104	,104	,99	,99	,101	,103	,104	,106	,107	,105	,98	,98	,102	,105	,107	,107	,107	,108	,108	,105	,101	,104	,106	,108	,108	,108	,109	,110	,110	,110	,104	,96	,93	,96	,102	,105	,107	,108	,109	,110	,108	,102	,97	,100	,106	,110	,110	,110	,110	,110	,110	,109	,101	,99	,102	,105	,108	,110	,110	,110	,110	,110	,104	,98	,102	,105	,110	,110	,110	,110	,110	,110	,110	,108	,95	,92	,95	,97	,99	,101	,103	,104	,104	,103	,103	,103	,103	,103	,103	,103	,104	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,104	,107	,107	,110	,110	,110	,110	,110	,103	,103	,105	,104	,104	,105	,109	,106	,102	,105	,109	,110	,109	,100	,99	,103	,104	,104	,101	,101	,100	,95	,95	,96	,98	,100	,100	,101	,103	,106	,101	,95	,98	,101	,102	,103	,95	,96	,102	,98	,92	,90	,91	,94	,94	,94	,94	,95	,100	,107	,110	,110	,110	,108	,109	,110	,109	,109	,104	,92	,98	,104	,104	,104	,104	,104	,104	,101	,95	,100	,104	,104	,105	,105	,103	,102	,96	,92	,99	,104	,105	,107	,107	,107	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,103	,103	,105	,110	,110	,110	,98	,91	,95	,101	,107	,110	,110	,110	,110	,110	,106	,95	,96	,103	,110	,110	,110	,110	,110	,110	,104	,105	,110	,110	,110	,110	,110	,110	,97	,89	,95	,93	,91	,98	,102	,107	,110	,110	,102	,91	,92	,101	,109	,110	,110	,97	,90	,96	,104	,108	,110	,110	,108	,93	,83	,81	,86	,98	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,92	,93	,101	,107	,110	,110	,110	,110	,104	,91	,90	,98	,104	,107	,107	,92	,83	,89	,95	,99	,103	,104	,104	,98	,85	,85	,92	,91	,96	,104	,109	,110	,110	,110	,110	,106	,92	,89	,97	,107	,110	,110	,109	,109	,106	,94	,91	,101	,104	,103	,96	,87	,88	,95	,99	,89	,87	,91	,94	,100	,104	,101	,86	,82	,88	,95	,88	,80	,80	,80	,83	,94	,100	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,92	,81	,87	,95	,97	,97	,99	,101	,103	,97	,89	,91	,93	,96	,99	,100	,104	,105	,108	,106	,92	,83	,84	,90	,94	,96	,96	,99	,103	,93	,82	,82	,83	,85	,89	,91	,93	,89	,80	,80	,80	,80	,83	,87	,90	,90	,89	,80	,80	,80	,80	,88	,97	,99	,100	,101	,100	,89	,80	,80	,80	,80	,80	,82	,91	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,108	,104	,98	,98	,98	,98	,90	,86	,94	,96	,101	,104	,104	,102	,93	,91	,96	,98	,102	,105	,106	,105	,99	,92	,94	,98	,102	,104	,104	,105	,107	,108	,105	,100	,91	,84	,92	,94	,88	,86	,86	,87	,94	,95	,95	,96	,94	,88	,88	,90	,91	,91	,91	,96	,102	,101	,93	,81	,80	,83	,87	,93	,96	,99	,104	,105	,102	,100	,97	,96	,99	,101	,102	,104	,104	,103	,101	,98	,87	,83	,88	,90	,94	,96	,97	,97	,96	,89	,82	,88	,94	,100	,104	,106	,106	,97	,82	,80	,80	,80	,85	,84	,84	,86	,87	,85	,81	,81	,98	,107	,109	,110	,110	,110	,110	,98	,80	,80	,87	,90	,95	,98	,97	,94	,80	,80	,80	,89	,102	,110	,110	,110	,110	,110	,98	,80	,80	,80	,80	,84	,90	,97	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,97	,100	,100	,98	,90	,88	,92	,87	,86	,88	,86	,91	,94	,94	,94	,87	,84	,86	,87	,88	,90	,92	,93	,95	,93	,81	,80	,80	,89	,97	,102	,108	,110	,110	,110	,109	,103	,98	,98	,100	,100	,102	,104	,104	,105	,106	,104	,98	,95	,98	,100	,104	,107	,109	,110	,110	,103	,93	,91	,93	,94	,98	,100	,101	,104	,104	,102	,98	,97	,104	,110	,110	,110	,110	,110	,110	,110	,108	,95	,91	,96	,99	,99	,97	,97	,98	,100	,104	,108	,100	,90	,94	,99	,102	,104	,106	,110	,110	,109	,104	,108	,110	,110	,110	,110	,110	,110	,108	,96	,92	,99	,101	,99	,96	,95	,99	,99	,97	,98	,99	,94	,92	,95	,101	,105	,98	,98	,102	,101	,96	,90	,95	,100	,93	,86	,87	,93	,97	,95	,95	,98	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,99	,98	,104	,104	,98	,100	,105	,104	,102	,105	,106	,107	,109	,110	,104	,96	,94	,99	,104	,105	,107	,107	,105	,100	,95	,97	,99	,102	,104	,104	,105	,107	,106	,103	,97	,96	,99	,104	,108	,110	,110	,110	,110	,110	,102	,93	,93	,95	,98	,101	,103	,104	,105	,107	,107	,105	,104	,105	,106	,106	,109	,110	,109	,108	,108	,103	,96	,90	,89	,96	,100	,104	,109	,109	,110	,109	,105	,100	,94	,92	,95	,97	,98	,100	,100	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,101	,105	,110	,110	,110	,110	,110	,110	,102	,96	,99	,101	,98	,88	,94	,100	,98	,93	,93	,97	,97	,92	,90	,96	,102	,106	,107	,99	,98	,102	,104	,108	,102	,93	,96	,102	,99	,93	,98	,100	,97	,91	,91	,97	,101	,106	,110	,110	,110	,107	,98	,96	,101	,102	,95	,95	,102	,103	,102	,91	,86	,93	,99	,101	,101	,104	,107	,110	,110	,110	,110	,110	,108	,110	,110	,110	,110	,110	,107	,104	,105	,106	,104	,100	,101	,104	,104	,104	,104	,101	,101	,104	,106	,110	,110	,105	,103	,103	,99	,96	,97	,98	,98	,98	,98	,98	,98	,98	,98	,99	,99	,99	,99	,99	,100	,101	,104	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,92	,94	,101	,105	,110	,110	,110	,99	,99	,108	,109	,105	,102	,92	,93	,101	,101	,91	,87	,94	,100	,104	,105	,96	,92	,97	,92	,92	,104	,110	,110	,110	,110	,110	,110	,110	,99	,96	,105	,106	,97	,98	,102	,101	,97	,95	,102	,104	,98	,94	,100	,106	,107	,97	,96	,102	,106	,97	,91	,95	,102	,110	,110	,110	,102	,84	,88	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,94	,96	,101	,104	,104	,107	,109	,110	,109	,98	,89	,95	,103	,104	,93	,88	,94	,100	,100	,89	,81	,86	,96	,102	,99	,89	,87	,89	,89	,89	,88	,90	,90	,86	,88	,95	,98	,88	,80	,80	,88	,93	,86	,80	,86	,92	,88	,86	,87	,85	,85	,84	,84	,103	,110	,107	,98	,98	,110	,108	,102	,99	,99	,108	,110	,110	,110	,110	,95	,102	,110	,110	,96	,80	,83	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,95	,82	,87	,90	,90	,90	,91	,92	,92	,91	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,102	,107	,104	,100	,103	,101	,96	,88	,87	,91	,91	,86	,88	,88	,81	,80	,80	,88	,96	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,100	,100	,103	,105	,109	,110	,110	,110	,104	,96	,91	,93	,98	,101	,103	,104	,106	,108	,104	,100	,93	,90	,93	,96	,100	,102	,104	,107	,106	,100	,94	,95	,100	,103	,100	,91	,88	,90	,91	,94	,97	,101	,104	,105	,108	,109	,108	,104	,95	,89	,91	,93	,96	,99	,101	,104	,106	,108	,110	,110	,110	,110	,110	,109	,104	,93	,88	,86	,84	,85	,86	,88	,90	,93	,96	,99	,101	,103	,104	,104	,105	,106	,108	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,95	,92	,96	,99	,103	,104	,104	,105	,105	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,85	,85	,94	,101	,96	,89	,99	,103	,95	,94	,102	,101	,96	,99	,100	,96	,93	,95	,99	,95	,88	,91	,97	,100	,98	,95	,93	,94	,95	,93	,94	,93	,88	,94	,98	,97	,102	,110	,110	,110	,103	,104	,110	,110	,110	,110	,106	,110	,110	,110	,110	,105	,101	,108	,110	,105	,102	,105	,106	,104	,101	,102	,106	,108	,102	,97	,99	,104	,104	,98	,94	,92	,93	,95	,95	,96	,99	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,104	,104	,106	,109	,109	,104	,103	,105	,106	,109	,110	,110	,110	,110	,106	,100	,96	,97	,98	,99	,99	,99	,99	,99	,101	,103	,104	,104	,99	,93	,91	,92	,95	,97	,99	,101	,102	,104	,105	,106	,106	,107	,104	,97	,92	,88	,87	,88	,89	,90	,94	,98	,102	,104	,106	,108	,108	,109	,109	,109	,109	,108	,105	,104	,104	,101	,98	,95	,92	,89	,85	,85	,88	,90	,92	,95	,97	,100	,103	,105	,106	,107	,108	,109	,109	,107	,104	,101	,97	,94	,91	,89	,87	,86	,86	,86	,86	,87	,90	,92	,94	,96	,98	,100	,101	,102	,103	,103	,104	,104	,105	,105	,106	,107	,108	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,109	,108	,108	,108	,107	,106	,107	,106	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,108	,107	,107	,108	,108	,108	,108	,108	,108	,108	,108	,108	,108	,108	,107	,106	,105	,105	,105	,105	,106	,106	,106	,105	,104	,104	,104	,104	,104	,104	,103	,104	,104	,104	,104	,104	,104	,104	,104	,103	,103	,103	,103	,103	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,101	,101	,101	,101	,101	,101	,101	,100	,100	,100	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,102	,101	,101	,101	,101	,101	,101	,102	,102	,102	,101	,102	,101	,101	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
const uint16_t DayO_Voice_Player[] PROGMEMSECTION2 = {	MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(START, DAYO_FILE)	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 
};
// NO EyeLEDs or Back used in this. Those are done manually at the start.
ProgMemArray_values_reader DayO_HeadVertRotation_Reader;
ProgMemArray_values_reader DayO_HeadHoriRotation_Reader;
ProgMemArray_values_reader DayO_MouthRotation_Reader;
ProgMemArray_values_reader DayO_Voice_Player_Reader;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												
#endif

#define WEREWOLVESLONDON_MOVEMENTS
#ifdef WEREWOLVESLONDON_MOVEMENTS
																																																																																																																																																																																																																																																															
// Werewolves of London Movements // takes up about 33,000 bytes of program memory
const unsigned long WerewolvesLondon_play_interval = 50; // milliseconds
const uint16_t WerewolvesLondon_HeadHoriRotation[] PROGMEMSECTION2 = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,90	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,89	,90	,92	,93	,95	,97	,98	,98	,98	,97	,95	,94	,92	,90	,88	,86	,85	,84	,85	,86	,87	,88	,89	,91	,92	,95	,97	,99	,99	,99	,98	,97	,95	,93	,91	,89	,87	,85	,84	,82	,81	,82	,83	,84	,85	,86	,87	,88	,88	,89	,89	,89	,89	,89	,90	,90	,89	,89	,89	,89	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,88	,86	,84	,82	,80	,77	,75	,74	,73	,74	,75	,76	,77	,79	,80	,82	,84	,86	,88	,90	,91	,92	,92	,91	,90	,89	,87	,85	,84	,82	,80	,78	,77	,77	,78	,79	,80	,81	,83	,84	,85	,87	,89	,91	,92	,92	,92	,91	,91	,90	,88	,87	,86	,84	,83	,81	,80	,79	,80	,81	,82	,83	,84	,85	,87	,88	,90	,91	,91	,91	,90	,89	,88	,87	,86	,84	,83	,81	,80	,80	,81	,82	,83	,84	,85	,87	,89	,91	,92	,94	,94	,93	,93	,91	,90	,88	,87	,86	,84	,83	,81	,80	,79	,79	,81	,83	,85	,87	,88	,89	,90	,91	,92	,93	,93	,92	,91	,89	,88	,86	,85	,83	,81	,79	,77	,77	,79	,80	,81	,82	,84	,85	,87	,88	,91	,94	,95	,95	,95	,94	,92	,91	,88	,86	,85	,83	,81	,81	,81	,83	,85	,87	,89	,91	,94	,96	,101	,105	,109	,111	,111	,111	,110	,110	,110	,109	,109	,109	,110	,109	,109	,109	,108	,108	,107	,107	,107	,107	,108	,108	,108	,108	,108	,107	,105	,102	,97	,93	,88	,83	,79	,76	,74	,72	,72	,73	,73	,74	,74	,74	,74	,73	,73	,73	,73	,73	,73	,74	,74	,74	,74	,74	,73	,73	,73	,73	,74	,74	,75	,76	,79	,82	,86	,89	,92	,95	,97	,98	,98	,97	,96	,96	,94	,92	,90	,88	,86	,85	,83	,83	,84	,86	,87	,89	,91	,94	,97	,99	,102	,104	,104	,104	,103	,100	,97	,94	,91	,89	,86	,84	,81	,79	,78	,79	,81	,83	,85	,87	,89	,91	,93	,95	,95	,95	,94	,92	,91	,89	,87	,85	,83	,81	,79	,78	,77	,79	,81	,83	,85	,87	,89	,91	,92	,92	,91	,91	,91	,90	,89	,89	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,91	,93	,94	,93	,92	,91	,90	,87	,84	,81	,80	,79	,80	,81	,81	,82	,82	,83	,84	,84	,85	,85	,84	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,85	,85	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,87	,88	,90	,92	,95	,98	,100	,100	,100	,99	,97	,95	,92	,90	,87	,85	,82	,80	,79	,79	,80	,83	,85	,86	,88	,91	,93	,95	,96	,96	,96	,94	,92	,89	,87	,85	,83	,82	,81	,81	,82	,82	,82	,82	,83	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,87	,89	,92	,95	,98	,100	,103	,106	,107	,106	,105	,104	,101	,98	,96	,93	,90	,87	,85	,83	,80	,79	,79	,81	,84	,86	,88	,91	,93	,94	,96	,96	,95	,94	,93	,92	,91	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,92	,93	,95	,96	,99	,101	,104	,106	,106	,105	,104	,102	,99	,97	,94	,91	,88	,85	,82	,79	,78	,78	,80	,82	,84	,85	,87	,88	,89	,90	,90	,89	,88	,87	,86	,86	,85	,85	,84	,84	,84	,84	,83	,82	,82	,81	,80	,80	,80	,80	,80	,81	,81	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,85	,85	,87	,89	,91	,93	,96	,98	,100	,101	,101	,100	,98	,96	,94	,91	,89	,86	,85	,83	,81	,79	,79	,81	,83	,84	,85	,85	,85	,85	,84	,84	,84	,83	,83	,81	,80	,80	,81	,82	,82	,83	,84	,84	,85	,85	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,87	,87	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,89	,90	,90	,90	,90	,90	,90	,90	,90	,88	,86	,84	,82	,81	,80	,81	,82	,83	,84	,84	,84	,84	,84	,85	,85	,85	,84	,84	,83	,83	,83	,83	,83	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,89	,91	,92	,93	,93	,93	,92	,90	,88	,85	,82	,80	,79	,80	,82	,84	,86	,88	,89	,91	,91	,91	,90	,88	,86	,84	,83	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,87	,87	,88	,88	,88	,88	,88	,87	,87	,86	,86	,85	,86	,88	,91	,93	,95	,96	,95	,93	,92	,91	,89	,86	,84	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,88	,90	,92	,93	,94	,94	,94	,93	,92	,91	,90	,89	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,91	,91	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,90	,89	,87	,86	,85	,85	,85	,86	,87	,89	,91	,93	,95	,97	,98	,99	,98	,97	,96	,95	,93	,92	,90	,89	,88	,87	,86	,85	,85	,87	,88	,90	,91	,92	,94	,95	,96	,97	,98	,97	,96	,95	,93	,92	,91	,89	,88	,87	,87	,87	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,88	,88	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,90	,91	,92	,94	,97	,100	,101	,102	,102	,101	,100	,98	,96	,93	,90	,88	,85	,83	,81	,79	,79	,81	,83	,85	,88	,90	,92	,94	,96	,97	,97	,95	,94	,92	,91	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,91	,92	,93	,95	,96	,96	,95	,94	,91	,88	,85	,82	,80	,79	,78	,78	,78	,78	,80	,82	,85	,87	,89	,90	,92	,93	,95	,97	,99	,100	,101	,99	,97	,95	,92	,90	,87	,85	,83	,81	,79	,77	,77	,78	,81	,83	,85	,87	,89	,90	,92	,92	,92	,92	,91	,89	,88	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,86	,86	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,89	,90	,93	,95	,96	,97	,98	,98	,98	,96	,95	,93	,91	,89	,87	,84	,82	,81	,82	,83	,84	,85	,87	,89	,89	,89	,89	,89	,88	,88	,87	,86	,85	,85	,84	,84	,83	,83	,83	,83	,83	,84	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,87	,87	,86	,86	,86	,86	,86	,87	,87	,86	,86	,86	,87	,87	,86	,86	,86	,86	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,89	,90	,92	,94	,96	,97	,97	,96	,95	,93	,91	,89	,86	,83	,80	,79	,80	,81	,82	,84	,86	,89	,90	,91	,90	,90	,89	,88	,87	,87	,86	,85	,84	,83	,83	,82	,82	,82	,82	,82	,82	,83	,83	,83	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,87	,89	,91	,93	,94	,96	,98	,100	,101	,101	,100	,98	,96	,94	,92	,90	,88	,86	,84	,82	,80	,80	,81	,83	,84	,85	,86	,86	,86	,86	,86	,85	,84	,84	,84	,84	,85	,84	,84	,83	,84	,84	,84	,85	,85	,86	,87	,87	,87	,87	,88	,89	,92	,94	,97	,100	,102	,103	,104	,103	,103	,102	,102	,101	,101	,101	,100	,101	,101	,102	,103	,103	,103	,104	,104	,104	,104	,102	,100	,97	,95	,93	,91	,89	,88	,88	,87	,87	,86	,86	,85	,85	,84	,84	,83	,83	,83	,83	,84	,85	,87	,90	,91	,93	,95	,96	,95	,95	,93	,91	,90	,88	,86	,84	,82	,81	,80	,80	,82	,83	,84	,85	,86	,88	,89	,90	,93	,95	,95	,95	,94	,93	,93	,93	,93	,93	,93	,93	,92	,92	,93	,93	,93	,93	,92	,92	,92	,91	,92	,93	,94	,94	,94	,94	,93	,92	,91	,88	,86	,83	,81	,78	,75	,73	,71	,71	,71	,72	,74	,76	,78	,80	,83	,85	,87	,89	,91	,91	,91	,90	,88	,87	,85	,83	,81	,79	,78	,79	,82	,85	,89	,92	,95	,98	,102	,105	,108	,110	,111	,110	,109	,109	,109	,109	,109	,109	,110	,110	,110	,109	,108	,108	,108	,108	,108	,108	,109	,109	,110	,109	,107	,104	,100	,96	,91	,86	,81	,76	,72	,68	,65	,63	,62	,62	,63	,64	,64	,65	,65	,66	,66	,66	,66	,66	,67	,68	,68	,69	,69	,69	,69	,69	,69	,70	,71	,72	,72	,73	,74	,75	,76	,77	,78	,79	,80	,80	,79	,79	,78	,77	,76	,75	,74	,73	,73	,72	,72	,72	,73	,74	,75	,76	,77	,79	,81	,83	,85	,87	,87	,87	,87	,86	,85	,83	,81	,79	,77	,75	,74	,74	,75	,76	,77	,79	,81	,82	,83	,83	,83	,83	,85	,86	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,88	,89	,92	,95	,97	,100	,103	,104	,105	,105	,105	,105	,105	,105	,105	,104	,104	,104	,104	,104	,105	,104	,104	,104	,104	,103	,103	,102	,102	,103	,104	,104	,103	,103	,102	,100	,99	,98	,96	,95	,94	,93	,91	,89	,88	,87	,88	,88	,89	,90	,91	,92	,95	,97	,98	,98	,98	,97	,97	,95	,94	,91	,89	,86	,84	,82	,80	,79	,79	,80	,81	,83	,84	,86	,87	,90	,91	,92	,92	,92	,91	,90	,89	,87	,85	,83	,82	,80	,79	,78	,77	,78	,79	,79	,79	,78	,78	,78	,77	,76	,76	,77	,78	,78	,78	,79	,79	,79	,78	,77	,76	,74	,74	,74	,75	,78	,81	,84	,86	,88	,91	,94	,96	,97	,97	,96	,95	,95	,94	,94	,93	,92	,91	,90	,89	,88	,86	,86	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,87	,88	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,92	,92	,91	,91	,90	,88	,86	,84	,82	,81	,80	,80	,79	,80	,80	,81	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,86	,87	,89	,92	,95	,97	,97	,96	,96	,94	,93	,91	,88	,85	,84	,83	,84	,85	,87	,89	,91	,92	,93	,94	,94	,93	,92	,90	,89	,88	,86	,84	,83	,82	,83	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,90	,91	,92	,92	,91	,90	,88	,86	,83	,82	,82	,83	,84	,86	,88	,90	,91	,90	,90	,90	,90	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,87	,85	,83	,80	,78	,78	,79	,81	,84	,87	,90	,92	,95	,99	,101	,101	,101	,100	,99	,98	,98	,98	,99	,99	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,101	,101	,100	,100	,100	,100	,100	,100	,100	,100	,99	,99	,99	,98	,98	,98	,98	,97	,97	,97	,96	,96	,95	,94	,93	,92	,91	,90	,89	,89	,89	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,90	,91	,93	,95	,97	,100	,101	,102	,101	,100	,99	,97	,94	,91	,87	,85	,84	,85	,87	,89	,91	,92	,93	,94	,93	,93	,92	,92	,91	,90	,89	,88	,88	,87	,87	,86	,86	,86	,87	,87	,87	,88	,88	,88	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,90	,90	,91	,92	,93	,93	,92	,91	,90	,87	,84	,81	,79	,80	,81	,82	,83	,83	,83	,83	,83	,82	,82	,83	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,87	,88	,88	,89	,90	,91	,93	,96	,98	,100	,101	,101	,99	,98	,96	,93	,91	,88	,85	,82	,81	,81	,83	,85	,87	,89	,91	,92	,93	,92	,90	,89	,88	,87	,86	,86	,85	,85	,84	,84	,83	,83	,83	,83	,83	,84	,84	,84	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,88	,89	,91	,92	,93	,93	,92	,91	,89	,86	,83	,81	,80	,80	,82	,84	,85	,87	,88	,88	,88	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,88	,89	,91	,95	,97	,98	,98	,98	,96	,95	,93	,91	,88	,86	,84	,83	,84	,85	,86	,87	,88	,89	,91	,92	,93	,94	,93	,92	,91	,89	,88	,87	,86	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,88	,89	,92	,95	,98	,101	,103	,105	,105	,104	,102	,99	,96	,93	,89	,86	,83	,80	,78	,79	,80	,81	,84	,85	,88	,91	,94	,97	,99	,99	,98	,97	,96	,95	,95	,95	,95	,95	,94	,94	,94	,94	,94	,94	,94	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,91	,90	,90	,90	,90	,91	,91	,90	,91	,91	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,92	,93	,92	,92	,90	,88	,86	,85	,84	,83	,84	,85	,87	,89	,91	,93	,94	,94	,94	,92	,91	,90	,89	,87	,86	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,86	,87	,88	,88	,87	,85	,83	,81	,81	,81	,83	,85	,88	,92	,95	,98	,99	,100	,100	,99	,97	,95	,94	,91	,88	,86	,83	,81	,79	,80	,82	,84	,86	,88	,90	,92	,95	,97	,98	,98	,97	,94	,92	,90	,88	,87	,85	,83	,82	,83	,83	,84	,84	,84	,84	,84	,84	,85	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,88	,89	,89	,90	,90	,89	,89	,87	,85	,83	,83	,84	,85	,87	,90	,93	,96	,98	,100	,100	,100	,100	,99	,97	,94	,92	,91	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,93	,93	,93	,92	,93	,93	,92	,93	,93	,92	,93	,93	,93	,93	,94	,94	,93	,91	,89	,86	,84	,84	,83	,84	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,89	,89	,90	,90	,91	,92	,92	,93	,92	,91	,90	,89	,88	,87	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,90	,90	,90	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,86	,86	,86	,87	,86	,87	,87	,87	,87	,87	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,87	,85	,84	,82	,80	,79	,79	,80	,82	,84	,86	,89	,92	,95	,96	,96	,96	,95	,95	,95	,96	,96	,96	,96	,96	,96	,97	,97	,97	,96	,96	,96	,96	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,98	,97	,97	,96	,96	,95	,94	,94	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,95	,95	,95	,95	,95	,96	,95	,96	,95	,95	,95	,95	,95	,95	,95	,95	,95	,94	,94	,94	,94	,94	,94	,94	,94	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,90	,90	,90	,91	,91	,91	,92	,92	,92	,93	,93	,94	,94	,94	,94	,94	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
const uint16_t WerewolvesLondon_MouthRotation[] PROGMEMSECTION2 = {	110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,95	,92	,100	,105	,106	,108	,97	,92	,97	,102	,103	,99	,86	,91	,95	,95	,88	,89	,91	,94	,97	,86	,85	,85	,88	,81	,80	,91	,90	,87	,80	,90	,92	,80	,80	,80	,83	,86	,87	,88	,80	,80	,93	,96	,106	,94	,84	,85	,99	,98	,98	,94	,94	,104	,96	,103	,104	,104	,110	,110	,108	,99	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,99	,102	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,103	,107	,110	,110	,110	,97	,96	,110	,109	,101	,91	,87	,96	,104	,107	,103	,93	,96	,102	,110	,110	,106	,93	,87	,94	,107	,90	,85	,86	,95	,108	,102	,90	,81	,90	,100	,108	,109	,91	,92	,102	,93	,90	,94	,80	,85	,95	,103	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,103	,94	,103	,110	,108	,102	,85	,101	,110	,103	,94	,90	,106	,107	,101	,96	,87	,96	,100	,100	,104	,85	,93	,96	,95	,104	,95	,85	,82	,95	,105	,105	,104	,88	,80	,85	,102	,105	,99	,91	,80	,89	,100	,108	,110	,110	,110	,110	,110	,95	,80	,80	,89	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,95	,110	,110	,106	,110	,102	,102	,110	,104	,101	,95	,105	,110	,102	,99	,99	,110	,110	,101	,89	,94	,106	,110	,108	,94	,90	,105	,109	,110	,100	,86	,86	,96	,110	,110	,110	,93	,86	,92	,104	,110	,110	,110	,110	,110	,110	,110	,88	,88	,80	,86	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,94	,106	,110	,110	,110	,110	,96	,90	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,86	,100	,110	,110	,110	,94	,87	,88	,90	,87	,80	,80	,80	,86	,88	,80	,80	,80	,91	,102	,97	,83	,80	,86	,83	,80	,92	,80	,82	,85	,80	,80	,87	,90	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,88	,80	,94	,104	,110	,110	,94	,86	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,84	,80	,83	,83	,82	,86	,87	,91	,93	,93	,97	,96	,98	,98	,99	,102	,102	,105	,107	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,92	,86	,99	,110	,107	,103	,81	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,90	,102	,110	,110	,110	,105	,96	,94	,100	,95	,89	,96	,92	,101	,97	,91	,104	,106	,103	,95	,80	,82	,92	,94	,86	,84	,94	,99	,95	,93	,80	,90	,86	,80	,95	,99	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,94	,80	,87	,96	,96	,104	,88	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,86	,86	,92	,94	,94	,101	,98	,101	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,107	,103	,97	,88	,81	,97	,103	,103	,94	,91	,103	,95	,96	,93	,81	,93	,94	,90	,100	,93	,89	,81	,80	,97	,100	,92	,82	,81	,99	,97	,90	,85	,87	,99	,90	,80	,80	,80	,88	,94	,105	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,84	,84	,103	,97	,88	,94	,103	,103	,94	,96	,99	,105	,107	,99	,89	,83	,99	,96	,91	,99	,94	,105	,103	,83	,80	,82	,89	,99	,102	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,80	,87	,103	,97	,91	,94	,96	,102	,85	,90	,97	,100	,94	,87	,95	,101	,101	,88	,80	,88	,101	,94	,89	,81	,86	,101	,101	,106	,92	,80	,80	,86	,94	,97	,94	,81	,80	,82	,91	,98	,99	,103	,105	,108	,109	,99	,80	,80	,80	,80	,88	,98	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,86	,98	,108	,105	,104	,88	,98	,105	,98	,93	,80	,90	,100	,98	,104	,94	,83	,87	,93	,110	,110	,110	,110	,110	,110	,110	,99	,82	,80	,88	,91	,85	,94	,98	,103	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,93	,87	,105	,110	,110	,110	,95	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,92	,105	,110	,110	,110	,109	,95	,104	,102	,100	,104	,90	,95	,103	,99	,102	,92	,85	,83	,94	,98	,84	,88	,87	,80	,89	,80	,89	,105	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,90	,89	,90	,107	,110	,110	,110	,94	,91	,85	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,84	,81	,81	,83	,82	,91	,92	,94	,103	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,94	,93	,102	,110	,110	,110	,110	,102	,94	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,101	,110	,110	,110	,110	,110	,91	,97	,95	,99	,96	,90	,94	,94	,90	,85	,90	,95	,101	,103	,95	,86	,94	,95	,80	,87	,93	,90	,85	,80	,80	,80	,80	,90	,93	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,95	,110	,110	,110	,110	,91	,85	,83	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,89	,98	,106	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,101	,110	,100	,92	,99	,100	,104	,89	,89	,105	,110	,110	,94	,98	,109	,103	,105	,104	,100	,93	,85	,80	,80	,80	,88	,99	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,88	,96	,104	,104	,101	,91	,106	,104	,100	,107	,97	,96	,100	,99	,98	,88	,97	,103	,96	,102	,98	,96	,93	,80	,81	,81	,98	,102	,91	,84	,80	,92	,94	,98	,103	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,94	,90	,110	,108	,102	,105	,95	,100	,105	,109	,110	,105	,96	,94	,101	,108	,102	,107	,100	,90	,99	,102	,107	,105	,90	,90	,94	,103	,109	,99	,85	,82	,94	,106	,93	,80	,81	,88	,104	,105	,101	,83	,80	,80	,80	,86	,96	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,109	,110	,110	,110	,95	,95	,106	,95	,97	,97	,99	,110	,95	,94	,99	,93	,90	,80	,80	,85	,97	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,90	,88	,105	,100	,93	,99	,95	,99	,87	,87	,97	,86	,94	,94	,80	,80	,83	,104	,104	,110	,110	,110	,110	,110	,110	,110	,100	,80	,80	,80	,82	,83	,89	,102	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,95	,97	,109	,103	,110	,107	,104	,108	,106	,110	,110	,110	,110	,94	,99	,107	,93	,98	,94	,92	,105	,104	,101	,91	,87	,103	,93	,83	,89	,81	,94	,94	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,109	,110	,110	,110	,110	,110	,110	,110	,110	,108	,82	,82	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,84	,102	,104	,109	,110	,110	,110	,94	,92	,83	,81	,85	,80	,89	,88	,85	,89	,80	,88	,101	,95	,94	,85	,89	,91	,80	,92	,89	,80	,88	,81	,93	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,90	,80	,80	,104	,104	,109	,110	,87	,87	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,83	,85	,82	,85	,84	,87	,91	,93	,98	,100	,103	,104	,105	,106	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,96	,96	,110	,110	,110	,110	,100	,94	,91	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,96	,110	,110	,110	,110	,110	,110	,97	,101	,103	,99	,103	,97	,88	,97	,103	,99	,88	,90	,95	,105	,110	,105	,89	,92	,102	,96	,84	,92	,95	,92	,81	,80	,89	,102	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,94	,94	,102	,110	,110	,110	,110	,97	,91	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,83	,84	,89	,89	,94	,95	,94	,98	,96	,97	,100	,100	,106	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,105	,110	,110	,104	,106	,106	,103	,104	,107	,107	,97	,100	,108	,102	,103	,107	,93	,94	,99	,100	,101	,91	,90	,101	,97	,94	,96	,96	,96	,89	,94	,101	,95	,96	,92	,92	,95	,81	,90	,96	,94	,105	,92	,80	,80	,81	,96	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,94	,91	,104	,98	,92	,91	,95	,106	,97	,91	,94	,101	,109	,108	,103	,83	,84	,93	,96	,102	,105	,107	,110	,108	,109	,102	,84	,80	,87	,94	,83	,86	,97	,86	,80	,80	,82	,101	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,88	,88	,95	,98	,85	,92	,95	,96	,100	,89	,92	,102	,103	,104	,91	,91	,102	,98	,94	,92	,90	,103	,95	,91	,94	,93	,90	,80	,83	,91	,88	,86	,84	,98	,109	,110	,107	,96	,105	,95	,98	,95	,87	,96	,93	,87	,94	,94	,99	,94	,80	,80	,80	,80	,81	,91	,94	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,91	,103	,105	,105	,101	,103	,110	,105	,109	,109	,96	,100	,100	,101	,110	,107	,110	,110	,110	,110	,110	,97	,82	,87	,96	,99	,91	,92	,101	,101	,87	,80	,82	,87	,99	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,98	,92	,90	,104	,110	,110	,110	,107	,94	,98	,103	,107	,100	,90	,95	,99	,105	,108	,108	,109	,110	,97	,90	,93	,96	,98	,92	,97	,102	,91	,97	,99	,95	,94	,84	,94	,101	,94	,86	,82	,89	,103	,101	,97	,83	,80	,88	,85	,80	,80	,85	,100	,107	,103	,89	,80	,80	,80	,92	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,92	,94	,106	,107	,94	,95	,95	,105	,106	,94	,94	,93	,100	,108	,110	,110	,110	,110	,110	,108	,98	,90	,90	,98	,88	,88	,88	,88	,90	,80	,86	,94	,100	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,94	,100	,110	,103	,92	,85	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,83	,81	,83	,87	,86	,92	,94	,97	,102	,101	,105	,106	,107	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,81	,82	,89	,95	,102	,101	,105	,103	,103	,98	,87	,88	,93	,100	,88	,88	,92	,93	,92	,81	,90	,96	,91	,91	,84	,87	,86	,80	,82	,80	,82	,101	,101	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,107	,109	,110	,110	,110	,101	,93	,96	,99	,94	,92	,97	,102	,101	,95	,96	,98	,110	,110	,110	,110	,110	,110	,98	,84	,87	,97	,94	,90	,85	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,86	,87	,90	,91	,93	,94	,94	,96	,97	,98	,102	,105	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,94	,91	,94	,98	,103	,106	,107	,103	,104	,104	,94	,91	,94	,100	,104	,101	,103	,94	,89	,94	,99	,95	,90	,90	,96	,101	,97	,95	,94	,96	,90	,86	,94	,101	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
const uint16_t WerewolvesLondon_Voice_Player[] PROGMEMSECTION2 = {	MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(START, WEREWOLVES_OF_LONDON_FILE)	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
const uint16_t WerewolvesLondon_HeadVertRotation[] PROGMEMSECTION2 = {	80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,80	,82	,83	,83	,83	,82	,81	,80	,80	,79	,80	,81	,81	,82	,81	,80	,79	,79	,79	,78	,79	,79	,80	,81	,81	,81	,80	,79	,78	,77	,77	,77	,77	,77	,77	,78	,78	,78	,77	,76	,76	,76	,76	,77	,77	,78	,80	,81	,82	,81	,79	,78	,77	,77	,77	,78	,79	,80	,81	,80	,79	,78	,77	,77	,77	,77	,79	,81	,82	,81	,80	,79	,78	,77	,77	,76	,76	,76	,76	,77	,78	,78	,78	,77	,76	,75	,75	,74	,74	,74	,74	,74	,76	,77	,78	,77	,77	,76	,75	,74	,74	,74	,74	,76	,77	,78	,78	,77	,76	,75	,74	,74	,74	,74	,73	,74	,74	,75	,75	,75	,74	,74	,74	,73	,72	,72	,72	,73	,74	,74	,74	,74	,73	,72	,72	,72	,72	,72	,73	,74	,74	,74	,74	,73	,72	,72	,71	,71	,71	,71	,72	,73	,74	,73	,73	,72	,72	,72	,73	,73	,74	,75	,75	,76	,75	,75	,74	,74	,73	,73	,72	,72	,73	,74	,74	,75	,75	,74	,75	,78	,80	,83	,84	,85	,85	,85	,85	,84	,82	,80	,78	,76	,75	,75	,76	,77	,78	,79	,78	,77	,76	,76	,76	,75	,75	,76	,77	,77	,78	,79	,78	,78	,77	,76	,75	,75	,75	,75	,76	,77	,77	,76	,75	,74	,74	,74	,74	,75	,76	,77	,79	,81	,83	,83	,83	,81	,80	,80	,79	,79	,79	,81	,82	,83	,81	,80	,78	,77	,77	,77	,78	,80	,82	,83	,83	,81	,79	,78	,77	,76	,76	,76	,76	,77	,78	,80	,81	,81	,80	,79	,77	,77	,77	,77	,78	,79	,81	,82	,82	,80	,79	,78	,78	,78	,78	,79	,81	,81	,80	,78	,76	,76	,75	,75	,75	,75	,75	,76	,77	,79	,80	,81	,80	,79	,78	,77	,76	,76	,76	,77	,77	,78	,78	,77	,76	,76	,76	,76	,76	,76	,77	,78	,80	,80	,80	,78	,77	,75	,74	,74	,73	,73	,73	,74	,74	,73	,72	,70	,69	,69	,69	,70	,71	,73	,74	,74	,74	,73	,72	,72	,71	,71	,71	,72	,73	,74	,74	,74	,74	,73	,71	,71	,70	,71	,71	,72	,72	,72	,71	,70	,70	,69	,69	,69	,69	,69	,69	,68	,68	,68	,68	,68	,68	,68	,68	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,70	,70	,70	,70	,70	,70	,70	,70	,70	,71	,71	,70	,70	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,72	,72	,72	,72	,72	,72	,72	,73	,74	,74	,74	,75	,75	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,76	,75	,75	,75	,75	,76	,78	,79	,79	,78	,77	,77	,77	,78	,79	,79	,78	,77	,76	,76	,76	,76	,76	,76	,75	,75	,75	,76	,76	,76	,75	,75	,76	,76	,76	,76	,75	,75	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,76	,76	,76	,76	,76	,75	,76	,76	,76	,76	,75	,75	,75	,76	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,76	,77	,79	,81	,82	,82	,81	,80	,79	,79	,79	,80	,81	,83	,84	,84	,83	,81	,80	,80	,79	,79	,80	,81	,81	,81	,81	,80	,79	,78	,78	,78	,79	,80	,80	,78	,77	,77	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,75	,75	,76	,76	,75	,75	,75	,75	,76	,76	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,76	,75	,75	,75	,75	,75	,74	,75	,75	,75	,76	,78	,80	,83	,85	,86	,85	,84	,82	,80	,78	,77	,76	,76	,76	,77	,79	,80	,80	,78	,77	,76	,76	,76	,77	,78	,80	,79	,78	,77	,76	,75	,75	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,78	,80	,82	,82	,81	,80	,79	,78	,78	,79	,80	,82	,84	,86	,87	,86	,85	,83	,82	,82	,82	,83	,85	,86	,85	,83	,80	,78	,76	,75	,74	,75	,74	,74	,74	,73	,71	,67	,63	,59	,56	,53	,50	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,50	,55	,60	,64	,68	,70	,70	,70	,69	,69	,68	,68	,68	,69	,69	,68	,68	,68	,68	,68	,68	,68	,68	,68	,69	,68	,68	,68	,68	,68	,68	,68	,68	,68	,68	,69	,69	,69	,70	,71	,73	,74	,76	,79	,81	,83	,82	,81	,79	,78	,77	,76	,76	,76	,77	,78	,79	,79	,77	,76	,74	,74	,74	,73	,72	,70	,68	,67	,66	,65	,63	,61	,58	,55	,52	,50	,47	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,48	,50	,51	,52	,54	,56	,57	,58	,60	,62	,63	,64	,66	,68	,69	,70	,72	,73	,74	,74	,76	,77	,78	,80	,81	,83	,84	,85	,86	,88	,90	,92	,94	,95	,95	,93	,92	,90	,89	,88	,88	,88	,89	,90	,89	,87	,85	,83	,81	,80	,79	,77	,76	,75	,74	,74	,71	,67	,63	,59	,56	,53	,51	,49	,48	,46	,46	,45	,45	,45	,45	,45	,46	,49	,52	,57	,62	,65	,68	,70	,70	,69	,68	,67	,67	,67	,67	,67	,67	,67	,68	,68	,67	,68	,68	,67	,67	,67	,68	,68	,68	,67	,67	,68	,68	,67	,67	,67	,68	,68	,67	,68	,68	,68	,69	,71	,72	,74	,76	,77	,78	,79	,79	,79	,80	,82	,84	,85	,85	,84	,83	,83	,83	,84	,86	,87	,87	,86	,84	,83	,82	,80	,77	,74	,72	,69	,66	,64	,62	,59	,56	,53	,50	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,48	,50	,53	,56	,60	,62	,65	,68	,71	,73	,74	,76	,78	,78	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,81	,82	,83	,83	,82	,82	,81	,80	,79	,79	,79	,80	,79	,77	,76	,76	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,79	,80	,82	,83	,84	,83	,83	,82	,81	,80	,80	,81	,82	,84	,85	,85	,84	,82	,81	,80	,79	,79	,80	,82	,83	,83	,82	,80	,79	,78	,78	,78	,80	,80	,79	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,76	,76	,76	,76	,76	,76	,76	,77	,78	,79	,79	,79	,78	,78	,78	,77	,77	,78	,79	,80	,81	,81	,80	,79	,78	,77	,77	,76	,76	,76	,76	,77	,78	,78	,77	,77	,76	,75	,75	,75	,75	,76	,77	,78	,78	,77	,76	,75	,75	,75	,75	,75	,76	,76	,75	,74	,74	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,74	,73	,73	,74	,74	,74	,73	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,76	,78	,81	,83	,84	,83	,82	,80	,79	,78	,78	,78	,78	,79	,80	,81	,81	,80	,79	,78	,77	,77	,77	,78	,79	,81	,81	,80	,78	,76	,74	,74	,74	,73	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,77	,77	,78	,79	,79	,79	,79	,78	,77	,77	,76	,77	,78	,79	,79	,79	,79	,78	,77	,77	,77	,78	,79	,81	,82	,82	,81	,79	,78	,77	,76	,75	,75	,75	,76	,77	,78	,77	,76	,75	,74	,74	,74	,74	,74	,75	,76	,76	,74	,73	,71	,70	,69	,68	,68	,66	,65	,65	,63	,62	,60	,57	,55	,52	,49	,47	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,48	,53	,58	,63	,67	,69	,69	,68	,68	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,68	,69	,72	,74	,76	,78	,80	,82	,82	,81	,80	,79	,78	,78	,78	,79	,80	,80	,79	,78	,77	,77	,77	,78	,79	,78	,76	,74	,73	,71	,69	,67	,66	,65	,63	,61	,59	,56	,54	,51	,49	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,47	,47	,48	,49	,51	,52	,53	,54	,56	,57	,59	,60	,62	,64	,67	,69	,71	,73	,74	,75	,76	,78	,80	,82	,84	,87	,90	,91	,92	,91	,90	,89	,88	,87	,86	,86	,85	,85	,85	,84	,83	,82	,82	,82	,82	,83	,82	,80	,78	,76	,74	,73	,70	,68	,66	,65	,63	,61	,59	,56	,53	,51	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,48	,52	,55	,57	,58	,59	,59	,59	,59	,59	,59	,59	,58	,58	,59	,59	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,59	,59	,59	,59	,59	,59	,60	,61	,63	,66	,70	,74	,77	,81	,84	,87	,88	,87	,85	,84	,82	,81	,80	,80	,80	,81	,82	,83	,83	,81	,79	,77	,75	,74	,74	,73	,71	,70	,69	,68	,67	,65	,64	,62	,59	,57	,55	,53	,51	,50	,48	,46	,45	,45	,45	,45	,45	,45	,45	,46	,46	,47	,47	,47	,48	,47	,47	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,46	,46	,46	,47	,48	,49	,51	,54	,58	,62	,66	,69	,72	,74	,75	,76	,76	,77	,78	,79	,80	,81	,83	,85	,86	,85	,84	,83	,81	,81	,80	,80	,81	,81	,81	,79	,77	,75	,74	,74	,74	,75	,76	,77	,80	,82	,83	,82	,81	,80	,79	,78	,78	,78	,78	,79	,80	,80	,79	,78	,77	,77	,77	,76	,76	,76	,77	,79	,80	,81	,80	,79	,78	,77	,76	,76	,75	,74	,74	,74	,75	,75	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,73	,73	,72	,72	,72	,73	,74	,75	,75	,74	,74	,74	,74	,75	,75	,76	,78	,80	,83	,85	,87	,87	,86	,85	,83	,82	,81	,82	,83	,85	,87	,86	,85	,83	,82	,81	,81	,82	,84	,85	,86	,85	,83	,81	,79	,78	,77	,77	,76	,77	,77	,79	,80	,82	,82	,81	,79	,78	,77	,77	,77	,78	,79	,80	,80	,78	,77	,77	,77	,77	,77	,77	,77	,77	,76	,74	,74	,74	,74	,74	,74	,74	,75	,75	,76	,78	,78	,78	,78	,78	,79	,81	,84	,86	,88	,89	,91	,92	,92	,91	,91	,90	,90	,89	,90	,90	,90	,91	,91	,91	,89	,88	,87	,86	,86	,87	,88	,89	,89	,89	,89	,88	,87	,86	,85	,85	,85	,85	,87	,88	,88	,89	,89	,87	,86	,86	,85	,85	,86	,87	,88	,88	,87	,86	,85	,83	,81	,79	,78	,77	,77	,78	,80	,82	,83	,83	,82	,82	,81	,81	,81	,81	,82	,82	,82	,81	,80	,78	,75	,74	,72	,73	,73	,74	,74	,74	,71	,68	,64	,61	,58	,56	,54	,52	,52	,52	,53	,54	,54	,53	,52	,52	,51	,51	,52	,53	,55	,57	,59	,60	,59	,59	,58	,57	,57	,57	,58	,59	,61	,63	,64	,64	,64	,64	,63	,63	,63	,64	,65	,67	,68	,69	,69	,69	,69	,70	,71	,72	,74	,75	,77	,79	,82	,83	,84	,83	,83	,83	,82	,80	,79	,77	,76	,75	,76	,76	,76	,76	,76	,75	,75	,74	,73	,72	,72	,73	,74	,76	,77	,77	,77	,76	,76	,76	,76	,77	,78	,79	,80	,79	,78	,77	,76	,74	,73	,72	,70	,70	,71	,73	,75	,74	,74	,72	,71	,70	,69	,70	,71	,72	,71	,71	,71	,71	,71	,71	,70	,70	,70	,71	,71	,70	,70	,71	,71	,71	,71	,71	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,73	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,76	,78	,79	,79	,78	,77	,76	,76	,76	,76	,78	,81	,83	,83	,81	,79	,78	,77	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,76	,76	,76	,75	,75	,76	,76	,76	,76	,75	,75	,75	,75	,75	,75	,75	,75	,76	,76	,75	,75	,75	,75	,76	,75	,75	,75	,75	,75	,75	,76	,78	,80	,81	,81	,81	,81	,80	,79	,79	,79	,80	,81	,81	,80	,79	,78	,78	,78	,80	,81	,81	,80	,78	,77	,76	,75	,74	,75	,76	,77	,77	,77	,76	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,75	,76	,77	,79	,80	,81	,81	,80	,79	,79	,79	,79	,81	,81	,80	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,76	,76	,78	,79	,81	,83	,84	,84	,82	,81	,81	,80	,81	,82	,83	,84	,85	,84	,83	,82	,80	,80	,79	,80	,81	,83	,83	,82	,81	,81	,80	,79	,79	,79	,79	,80	,81	,81	,80	,79	,78	,78	,77	,77	,78	,80	,80	,78	,77	,76	,75	,74	,74	,74	,74	,74	,74	,73	,73	,72	,72	,70	,68	,64	,61	,58	,56	,54	,52	,50	,49	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,50	,56	,63	,69	,73	,74	,74	,74	,73	,73	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,71	,71	,71	,71	,72	,72	,73	,73	,74	,75	,77	,79	,81	,82	,82	,81	,80	,78	,77	,77	,77	,78	,77	,77	,76	,76	,76	,77	,78	,78	,76	,74	,73	,71	,69	,67	,64	,61	,59	,57	,55	,52	,50	,47	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,47	,48	,49	,50	,51	,52	,53	,55	,57	,58	,60	,62	,64	,65	,67	,68	,69	,70	,71	,72	,74	,74	,75	,77	,79	,81	,84	,87	,89	,91	,92	,93	,94	,92	,90	,89	,88	,88	,88	,90	,91	,91	,89	,87	,85	,85	,85	,86	,88	,89	,88	,86	,84	,81	,79	,78	,76	,75	,74	,74	,74	,74	,73	,72	,69	,66	,62	,59	,55	,52	,49	,46	,45	,45	,45	,45	,45	,45	,45	,45	,46	,50	,55	,60	,66	,70	,72	,74	,74	,73	,73	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,71	,71	,72	,71	,71	,71	,71	,72	,72	,73	,74	,76	,79	,82	,84	,84	,84	,83	,82	,81	,81	,81	,81	,82	,83	,82	,81	,80	,80	,80	,81	,82	,83	,82	,79	,77	,75	,74	,72	,69	,66	,64	,61	,59	,57	,55	,53	,51	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,47	,48	,49	,51	,53	,54	,55	,57	,59	,60	,62	,63	,65	,66	,68	,70	,72	,74	,75	,76	,77	,79	,81	,82	,83	,84	,86	,88	,89	,90	,90	,89	,88	,87	,86	,86	,86	,86	,85	,84	,83	,83	,84	,84	,83	,82	,81	,80	,80	,79	,79	,79	,79	,79	,78	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,78	,80	,81	,83	,84	,84	,83	,82	,81	,80	,80	,80	,80	,80	,80	,78	,77	,76	,75	,74	,74	,75	,76	,77	,78	,78	,77	,77	,76	,76	,77	,78	,78	,77	,76	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,75	,77	,79	,81	,83	,84	,83	,82	,80	,79	,78	,79	,79	,81	,82	,83	,82	,81	,80	,79	,79	,79	,80	,81	,82	,84	,84	,83	,82	,80	,79	,78	,77	,78	,79	,80	,80	,80	,79	,78	,78	,78	,78	,77	,78	,79	,78	,77	,76	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,77	,78	,79	,81	,81	,82	,82	,82	,82	,83	,84	,85	,87	,88	,88	,87	,86	,85	,84	,83	,84	,84	,85	,85	,84	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,84	,85	,86	,86	,85	,85	,84	,84	,84	,85	,86	,87	,87	,87	,86	,85	,84	,83	,82	,82	,82	,82	,83	,83	,83	,81	,80	,80	,79	,79	,80	,81	,82	,83	,82	,82	,81	,80	,80	,79	,80	,80	,81	,81	,79	,77	,75	,74	,74	,73	,72	,71	,71	,70	,70	,70	,70	,71	,71	,71	,71	,72	,71	,71	,71	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,73	,73	,73	,74	,74	,74	,74	,75	,76	,77	,79	,81	,84	,86	,86	,85	,85	,85	,86	,87	,88	,89	,89	,89	,88	,88	,88	,88	,89	,90	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,84	,84	,85	,85	,85	,85	,85	,85	,85	,84	,83	,82	,81	,81	,82	,83	,85	,86	,85	,83	,82	,81	,80	,79	,79	,78	,78	,79	,80	,81	,82	,81	,81	,80	,79	,78	,79	,79	,80	,81	,80	,79	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,76	,75	,74	,70	,67	,63	,60	,57	,54	,52	,49	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,47	,49	,50	,52	,53	,54	,55	,55	,56	,56	,58	,59	,60	,61	,63	,65	,66	,67	,69	,70	,71	,73	,74	,75	,77	,78	,80	,81	,82	,83	,84	,85	,88	,90	,92	,93	,93	,93	,92	,91	,91	,90	,90	,89	,89	,89	,88	,87	,87	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,85	,86	,86	,86	,85	,84	,84	,84	,84	,85	,86	,86	,85	,85	,84	,83	,82	,82	,82	,84	,85	,86	,85	,84	,83	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,80	,80	,80	,79	,78	,77	,76	,75	,74	,73	,70	,67	,65	,62	,60	,57	,55	,53	,51	,50	,48	,47	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,46	,46	,47	,47	,47	,48	,48	,49	,50	,50	,51	,52	,53	,54	,55	,56	,58	,60	,61	,63	,64	,66	,69	,70	,72	,74	,75	,76	,78	,80	,81	,82	,83	,85	,86	,88	,89	,89	,90	,90	,91	,92	,94	,95	,95	,94	,94	,94	,94	,93	,93	,93	,93	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,93	,93	,94	,95	,95	,96	,97	,98	,99	,101	,103	,106	,108	,111	,113	,116	,118	,120	,122	,124	,125	,125	,125	,125	,125	,125	,125	,125	,125	,124	,124	,124	,124	,124	,124	,124	,124	,124	,124	,123	,123	,123	,123	,123	,123	,123	,123	,123	,122	,122	,122	,122	,122	,122	,122
};

ProgMemArray_values_reader WerewolvesLondon_HeadVert_Reader;
ProgMemArray_values_reader WerewolvesLondon_HeadHori_Reader;
ProgMemArray_values_reader WerewolvesLondon_Mouth_Reader;
ProgMemArray_values_reader WerewolvesLondon_Voice_Reader;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
#endif

#define VAMPIREARMGRASPAT_MOVEMENTS
#ifdef VAMPIREARMGRASPAT_MOVEMENTS
																																																																																																																																																																																																																																																															
const unsigned long VampireArmGraspAt_play_interval = 50; // milliseconds

const uint16_t VampireGraspAtHeadVert[] PROGMEMSECTION2 = {	79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79
};																																																																																																																																																																								
const uint16_t VampireGraspAtHeadHoriz[] PROGMEMSECTION2 = {	120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120
};																																																																																																																																																																								
const uint16_t VampireGraspAtMouth[] PROGMEMSECTION2 = {	110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,85	,90	,95	,100	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110
};																																																																																																																																																																								
const uint16_t VampireGraspAtArmYaw[] PROGMEMSECTION2 = {	89	,89	,90	,90	,90	,90	,91	,92	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,94	,93	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,95	,95	,95	,96	,96	,96	,96	,96	,96	,96	,96	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,96	,95	,93	,91	,90	,88	,87	,88	,88	,88	,87	,85	,85	,84	,84	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,82	,82	,83	,84	,85	,85	,85	,85	,85	,85	,86	,87	,87	,88	,88	,88	,88	,88	,88	,88	,90	,90	,90	,89	,90	,90	,91	,91	,91	,91	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89
};																																																																																																																																																																								
const uint16_t VampireGraspAtArmRoll[] PROGMEMSECTION2 = {	120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,120	,121	,122	,122	,121	,121	,121	,121	,121	,123	,123	,123	,123	,122	,123	,123	,123	,123	,123	,123	,123	,123	,122	,123	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122
};																																																																																																																																																																								
const uint16_t VampireGraspAtArmPitch[] PROGMEMSECTION2 = {	165	,168	,171	,174	,176	,179	,182	,184	,187	,188	,188	,188	,188	,188	,187	,187	,187	,186	,185	,185	,184	,184	,184	,184	,184	,183	,181	,180	,178	,177	,175	,174	,173	,171	,170	,170	,169	,169	,169	,169	,170	,170	,170	,170	,170	,170	,170	,170	,171	,171	,171	,171	,171	,171	,171	,171	,171	,171	,171	,171	,170	,165	,159	,150	,137	,137	,128	,124	,117	,109	,99	,91	,85	,81	,79	,79	,79	,80	,81	,82	,82	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,88	,91	,94	,98	,102	,106	,112	,117	,122	,127	,131	,135	,140	,144	,147	,150	,153	,156	,159	,161	,162	,163	,163	,163	,164	,165	,166	,167	,167	,167	,167	,168	,169	,170	,170	,171	,172	,172	,172	,172	,173	,173	,172	,172	,172	,173	,173	,173	,173	,173	,173	,173	,174	,173	,173	,173	,174	,173	,173	,173	,173	,173	,173	,173	,173
};																																																																																																																																																																								
const uint16_t VampireGraspAtElbowPitch[] PROGMEMSECTION2 = {	173	,173	,173	,172	,173	,173	,172	,173	,172	,172	,173	,172	,172	,172	,173	,173	,172	,173	,173	,172	,173	,173	,173	,173	,173	,173	,174	,173	,173	,173	,174	,173	,173	,174	,174	,173	,174	,174	,174	,174	,173	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,173	,170	,153	,153	,120	,120	,120	,111	,112	,112	,112	,112	,112	,113	,113	,112	,112	,112	,112	,112	,113	,113	,113	,113	,112	,113	,113	,113	,113	,113	,113	,113	,114	,113	,114	,114	,115	,115	,115	,116	,119	,121	,125	,129	,135	,140	,142	,146	,151	,155	,159	,162	,162	,164	,168	,170	,173	,174	,174	,174	,174	,173	,174	,174	,174	,173	,174	,174	,174	,173	,173	,172	,173	,173	,174	,174	,174	,174	,174	,174	,174	,174	,174	,174	,175	,174	,174	,174	,175	,174	,174	,175	,174	,175	,175	,175	,174	,175	,175	,175	,175	,175	,175	,174	,175
};																																																																																																																																																																								
const uint16_t VampireGraspAtEyesLED[] PROGMEMSECTION2 = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																								
const uint16_t VampireGraspAtVoice[] PROGMEMSECTION2 = {	MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(START, 3)	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 
};																																																																																																																																																																								

ProgMemArray_values_reader VampireArmGraspAt_HeadVert_Reader;
ProgMemArray_values_reader VampireArmGraspAt_HeadHori_Reader;
ProgMemArray_values_reader VampireArmGraspAt_Mouth_Reader;
ProgMemArray_values_reader VampireArmGraspAt_Voice_Reader;
ProgMemArray_values_reader VampireArmGraspAt_ArmYaw_Reader;
ProgMemArray_values_reader VampireArmGraspAt_ArmRoll_Reader;
ProgMemArray_values_reader VampireArmGraspAt_ArmPitch_Reader;
ProgMemArray_values_reader VampireArmGraspAt_ElbowPitch_Reader;
ProgMemArray_values_reader VampireArmGraspAt_EyesLED_Reader;

#endif



#if 0
const unsigned long Silly_play_interval = 50; // milliseconds
const uint16_t Silly_HeadHoriRotation[] = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_HeadVertRotation[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90																																																																					
};

const uint16_t Silly_MouthRotation[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_Eyes_LEDs[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_Pneumatic_Back[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_Voice_Player[] = {  MKVoiceEntry(START,  MORE_OFTEN_CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)																																																																					
};
																																																																																																																																																																																																																																																															

#endif																																																																																																																																																																																																																																																															
																																																																																																																						

// Command Line structures
#define CmdLineMaxSize  150
char cmdLine [CmdLineMaxSize];
unsigned int cmdLineIndex;
const char Carriage_Return = 13;
const char CmdSeperator = ';';
const char delimiters[] = " ";
bool cmdComplete;

// Earth's magnetic field varies by location. Add or subtract 
// a declination to get a more accurate heading. Calculate 
// your's here:
// http://www.ngdc.noaa.gov/geomag-web/#declination
//#define DECLINATION -8.58 // 8.58 Declination (degrees) in Boulder, CO. 8.31° E  ± 0.35°  changing by  0.10° W per year
#define DECLINATION 0.82913 // -0.82913Declination (degrees) in Cedar Rapids IA 0° 50' W  ± 0° 22'  changing by  0° 5' W per year 9-26-2018

// create the i2cSwitch device object used to handle devices with i2c address conflicts such as the BNO055 IMUs
i2cSwitch i2cSwitchDevice = i2cSwitch(0x70);  // I2C address that switch resides at is passed parameter

// create the BNO055 IMUs
// The defines also are used as indicies to the Adafruit_sensors
#define ADAFRUIT_IMU_MOUTH 0
#define ADAFRUIT_IMU_HEAD 1
#define ADAFRUIT_IMU_ARM 2
#define ADAFRUIT_IMU_FOREARM 3

#define MAX_ADAFRUIT_SENSORS 4
//  Note: sensor number in Adafruit_BNO055_HalloweenProp constructor does not change which sensor is which, only the I2C address passed does.
//  Currently the sensor have their I2C address strapping fixed via grounds.   Mouth gaurd sensor isthe one wiht no I2C address passed
Adafruit_BNO055_HalloweenProp bno_head(ADAFRUIT_IMU_HEAD  , BNO055_ADDRESS_B, &i2cSwitchDevice, 0x01,  0xff);
Adafruit_BNO055_HalloweenProp bno_mouth(ADAFRUIT_IMU_MOUTH, BNO055_ADDRESS_A, &i2cSwitchDevice, 0x01,  0xff);
Adafruit_BNO055_HalloweenProp bno_arm(ADAFRUIT_IMU_ARM  , BNO055_ADDRESS_B, &i2cSwitchDevice, 0x02,  0xff);
Adafruit_BNO055_HalloweenProp bno_forearm(ADAFRUIT_IMU_FOREARM, BNO055_ADDRESS_A, &i2cSwitchDevice, 0x02,  0xff);
struct Adafruit_sensors_def {
  Adafruit_BNO055_HalloweenProp * sensor;
  char * name;
};
Adafruit_sensors_def Adafruit_sensors[MAX_ADAFRUIT_SENSORS] = { {&bno_mouth,"Mouth IMU"}, {&bno_head, "Head IMU"}, {&bno_arm, "Arm IMU"}, {&bno_forearm, "Forearm IMU"}};  // Must match index defines above

// create IMU filters
imu_filter armImuFilter(Imu_Arm_Yaw_Default_Position, Imu_Arm_Roll_Default_Position, Imu_Arm_Pitch_Default_Position,
                        Imu_Arm_Yaw_Min_Position, Imu_Arm_Yaw_Max_Position,
                        Imu_Arm_Roll_Min_Position, Imu_Arm_Roll_Max_Position,
                        Imu_Arm_Pitch_Min_Position, Imu_Arm_Pitch_Max_Position
                        );
imu_filter forearmImuFilter(Imu_Arm_Yaw_Default_Position, Imu_Arm_Roll_Default_Position, Imu_Elbow_Pitch_Default_Position,
                        Imu_Arm_Yaw_Min_Position, Imu_Arm_Yaw_Max_Position,
                        Imu_Arm_Roll_Min_Position, Imu_Arm_Roll_Max_Position,
                        Imu_Elbow_Pitch_Min_Position, Imu_Elbow_Pitch_Max_Position
                        );

// General Adafruit items
unsigned long AdafruitSensorReadPeriodMsec;
unsigned long AdafruitSensorReadTimeout;

// Adafruit Visualize 3D items
// uncomment the line below to cause the 3D Visualize opertion to start up on reset
// to get around the Arudino reseting whenever you open the com serial port to it (caused by the DTR line going to 
// the arduino reset thru a capacitor, and open a com port cause this line to go active, unless you cut the trace
// and use the manual reset button to reset the arudino. Ther are jumper pins you can just add a jumpter to renable this again.
//#define ForceVisualize3DOnStartup
bool Adafruit3DVisualizeEnabled = false;
int AdafruitSensorToVisualize = 0;
#define direct_Euler_fmt 0
#define quat_converted_to_Euler_fmt 1
#define quat_converted_to_DirectEuler_fmt 2
int Adafruit3DVisualizeFormat = direct_Euler_fmt;



// Adafruit IMU sensor controls Mouth items
bool AdafruitImuMouthCtrlEnabled = false;
int AdafruitImuMouthCtrlSensor = 0;
unsigned long AdafruitImuMouthCtrlPeriodMsec;
unsigned long AdafruitImuMouthCtrlTimeout;
#define MaxMouthDegreeSettings 10
int MouthDegreeSettings[MaxMouthDegreeSettings];
int NumMouthDegreeSettings = 0;
int MouthDegreeSettingsIndex = 0;
struct ImuMouthCtrlRefFrameDef {
  float heading;
  float pitch;
  float roll;
};
struct ImuMouthCtrlRefFrameDef ImuMouthCtrlRefFrame;  //starting heading, pitch, yaw of IMU when Mouth control started. Used as 0 reference frame

#define ADAFRUIT_IMU_HEAD_MOUTH_OPS
#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
// Adafruit IMUs control head and mouth items --------------------
struct ImuCtrlRefFrameDef {
  float heading;
  float pitch;
  float roll;
};
struct ImuServoControlDef {
  int AdafruitImuCtrlSensor;
  servo_device * servo;
  servo_filter * servoFilter;
  struct ImuCtrlRefFrameDef ImuCtrlRefFrame;
};
#define AdafruitImuHeadMouthStopDiscrete 24 // Arudino mega 2560 pin PA2 used to stop the ImuHeadMouth operations via this discrete.
                                            // Normally high.  Pulled low to stop operations.
bool AdafruitImuHeadMouthEnabled = false;
bool AdafruitImuHeadMouthIncludeArm = false;
unsigned long AdafruitImuHeadMouthPeriodMs;
unsigned long AdafruitImuHeadMouthTimeout;
ImuServoControlDef ImuHeadVerticalServoControl;
ImuServoControlDef ImuHeadHorizontalServoControl;
ImuServoControlDef ImuMouthServoControl;
ImuServoControlDef ImuArmYawServoControl;
ImuServoControlDef ImuArmRollServoControl;
ImuServoControlDef ImuArmPitchServoControl;
ImuServoControlDef ImuElbowPitchServoControl;
int AdafruitImuHeadMouthAudioFile = 0;
int AdafruitImuHeadMouthAudioDelay = 0;

#endif

// Adafruit IMUs continuously show diff between head and mouth pitch --------------------
bool AdafruitImusPitchDiffEnabled = false;
struct ImusPitchDiffControlDef {
  int AdafruitImuCtrlSensor1;
  int AdafruitImuCtrlSensor2;
  unsigned long periodMs;
  unsigned long timeout;
  int pitch1ZeroBase;
  int pitch2ZeroBase;
};
ImusPitchDiffControlDef AdafruitImusPitchDiffControl;

// forward prototypes
void printGyro(float gx, float gy, float gz, bool isCalculated);
void printAccel(float ax, float ay, float az, bool isCalculated);
void printMag(float mx, float my, float mz, bool isCalculated);
void printAttitude(float ax, float ay, float az, float mx, float my, float mz);
void getAttitude(float ax, float ay, float az, float mx, float my, float mz, float &pitch, float &roll, float &heading);
float getAngleBetweenVectors(float heading, float roll, float pitch, float heading1, float roll1, float pitch1);
void quatToDirectEulerReading (imu::Quaternion quat, float &heading, float &roll, float &pitch );
int scaleMouthAngle(int angle);
int scaleElbowPitchAngle(int angle);
int scaleArmPitchAngle(int angle);
float convertPitchForHeadOrientation( float pitch);
void printSdCardInfo();



// -------------------------------------------

// ------------Create the devices that make up the Prop

servo_device    Head_Horizontal_Rotation_servo      ;   // attached to pins in setup
servo_filter    Head_Horizontal_Servo_Filter(50.0/150.0, 333.0);
  // For the head horizontal servo HS7954HS, per its spec,  it can move, no load, 0.15 sec/60° at 6volt supply voltage to the servo,
  // but give it an extra marign for now
servo_device    Head_Vertical_Rotation_servo        ;   // attached to pins in setup
servo_filter    Head_Vertical_Servo_Filter(50.0/150.0, 333.0);
  // For the head vertical servo HS7954HS, per its spec,  it can move, no load, 0.15 sec/60° at 6volt supply voltage to the servo,
  // but give it an extra marign for now
servo_device    Head_Mouth_Rotation_servo           ;   // attached to pins in setup
servo_filter    Head_Mouth_Servo_Filter(50.0/120.0, 76.0);
  // For the mouth servo HS5245MG, per its spec,  it can move, no load, 60 degrees in 120 milliseconds at 6volt supply voltage to the servo at no load,
  // but give it an extra marign for now
servo_device    Arm_Yaw_servo                       ;   // attached to pins in setup
servo_filter    Arm_Yaw_Servo_Filter(50.0/200.0, 300.0);
  // For the Arm Yaw servo GoBilda 2000-0025-0002, per its spec,  it can move, no load, 60 degrees in 200 milliseconds at 6volt supply voltage to the servo at no load,
  // but give it an extra marign for now
servo_device    Arm_Roll_servo                      ;   // attached to pins in setup
servo_filter    Arm_Roll_Servo_Filter(50.0/200.0, 300.0);
  // For the Arm Roll servo GoBilda 2000-0025-0002, per its spec,  it can move, no load, 60 degrees in 200 milliseconds at 6volt supply voltage to the servo at no load,
  // but give it an extra marign for now.
servo_device    Arm_Pitch_servo                     ;   // attached to pins in setup
servo_filter    Arm_Pitch_Servo_Filter(135.0/670.0, 350.0);
  // For the Arm Pitch servo GoBilda 2000-0025-0002, per its spec,  it can move, no load, 60 degrees in 160 milliseconds at 7.5 volt supply voltage to the servo at no load,
  // but give it what measurements indicate for traveling 135 degrees from the arm hanging straight down which is 670 milliseconds
  // Measurements indicate 
servo_device    Elbow_Pitch_servo                   ;   // attached to pins in setup
servo_filter    Elbow_Pitch_Servo_Filter(50.0/200.0, 300.0);
  // For the Arm Roll servo GoBilda 2000-0025-0002, per its spec,  it can move, no load, 60 degrees in 200 milliseconds at 6volt supply voltage to the servo at no load,
  // but give it an extra marign for now.
LED_device * Eyes_LEDsPtr;
#define Eyes_LEDs (* Eyes_LEDsPtr)
//LED_device      Eyes_LEDs                           (22); // pin 22
relay_device    Pneumatic_Back_relay                (23); // pin 23
mp3_device      Voice_Player                        ;

devices_player  Devices_Player                      ;
int dbg_prop_user_control_state;
unsigned long prop_user_control_timeout;
 
void setup() 
{
    Eyes_LEDsPtr = new LED_device(22)  ;
    int i = 0;
    // setup cmd line structures
    cmdLineIndex = 0;
    cmdComplete = false;

    // set up user control and debug port
    dbg_prop_user_control_state = 0;
    prop_user_control_timeout = 1000 + millis();
    //Serial.begin(9600);
    Serial.begin(115200);
    Serial.print(F("Free Memory at point 1:"));
    Serial.println(freeMemory());
     
    // Initializethe BNO055 IMUs

    for (i = 0 ; i < MAX_ADAFRUIT_SENSORS; i++)
    {
      if(!Adafruit_sensors[i].sensor->begin())
      {
        /* There was a problem detecting the BNO055 ... check your connections */
        Serial.print(Adafruit_sensors[i].name);
        Serial.println(F(" BNO055 NOT detected"));
      }
      else
      {
        Adafruit_sensors[i].sensor->setExtCrystalUse(true);
      }
    }
    // Not sure of axis remapping, so use software to convert senses and ranges for now.
    //bno_arm.setAxisRemap( Adafruit_BNO055::REMAP_CONFIG_P7); // remap arm axis since sensor underneath arm
    //bno_arm.setAxisSign( Adafruit_BNO055::REMAP_SIGN_P7 );
    // Can't figure out mapping of bno_forearm that gives same sense of yaw, roll , pitch that the bno_arm one does
    // for forearm sensor under arm.  Thus would need to convert either pitch, roll, yaw to
    // the appropriate sense via software.
    Serial.println(F("Start BNO055 Manual Cal"));

    //Serial.println(F("Let the IMU sit still for 5 seconds for gyro cal"));
    //Serial.println(F("Then rotate the imu by 45 degree increments for 180 deg total for accel cal, stoping at least 1 second between each"));
    //Serial.println(F("Then move in figure 8s for a few seconcs for mag cal"));
    
    #ifdef ForceVisualize3DOnStartup
    AdafruitSensorReadPeriodMsec = 100;
    AdafruitSensorReadTimeout = millis();
    Adafruit3DVisualizeEnabled = true;
    AdafruitSensorToVisualize = 0;
    #endif

#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS

    // setup the discrete pin that will stop the head mouth operations
    pinMode(AdafruitImuHeadMouthStopDiscrete, INPUT);
    // initialize IMU head mouth control items
    ImuHeadVerticalServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_HEAD;
    ImuHeadVerticalServoControl.servo =  &Head_Vertical_Rotation_servo;
    ImuHeadVerticalServoControl.servoFilter = &Head_Vertical_Servo_Filter;
    
      // Horizontal uses same Head IMU
    ImuHeadHorizontalServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_HEAD;  
    ImuHeadHorizontalServoControl.servo =  &Head_Horizontal_Rotation_servo;
    ImuHeadHorizontalServoControl.servoFilter = &Head_Horizontal_Servo_Filter;
     
    ImuMouthServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_MOUTH;
    ImuMouthServoControl.servo =  &Head_Mouth_Rotation_servo;
    ImuMouthServoControl.servoFilter = &Head_Mouth_Servo_Filter;
    
    // initialize IMU arm yaw, roll, pitch, elbow pitch control items
    ImuArmYawServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_ARM;
    ImuArmYawServoControl.servo =  &Arm_Yaw_servo;
    ImuArmYawServoControl.servoFilter = &Arm_Yaw_Servo_Filter;
    ImuArmRollServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_ARM;
    ImuArmRollServoControl.servo =  &Arm_Roll_servo;
    ImuArmRollServoControl.servoFilter = &Arm_Roll_Servo_Filter;
    ImuArmPitchServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_ARM;
    ImuArmPitchServoControl.servo =  &Arm_Pitch_servo;
    ImuArmPitchServoControl.servoFilter = &Arm_Pitch_Servo_Filter;
    ImuElbowPitchServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_FOREARM;
    ImuElbowPitchServoControl.servo =  &Elbow_Pitch_servo;
    ImuElbowPitchServoControl.servoFilter = &Elbow_Pitch_Servo_Filter;

#endif
    
    // attach Head servos to specific pins on the cpu board
    // (PWM is completely done in hardware to avoid pwm signal jitter)
    Head_Horizontal_Rotation_servo.attach (SERVO_PIN_A, 1150,1733, 45, 120 );  // pin 11 on Mega2560
//    Head_Vertical_Rotation_servo.attach   (SERVO_PIN_B, 1150,1889, 45, 140);   // pin 12 on Mega2560 for Hitec
    Head_Vertical_Rotation_servo.attach   (SERVO_PIN_B, 1200,1833, 45, 140);   // pin 12 on Mega2560 for Gobilda
    Head_Mouth_Rotation_servo.attach      (SERVO_PIN_C, 1422,1656, 80, 110);   // pin 13 on Mega2560
//    // setup prop head to be completely level and looking straight forward.
    Head_Horizontal_Rotation_servo.device_write(90);               
    Head_Vertical_Rotation_servo.device_write(90);
// Setup mouth servo to be slightly open (margin so servo not fighting fully closed mouth position)
    Head_Mouth_Rotation_servo.device_write(110);
    // attach Arm servos to specific pins on the cpu board
    Arm_Yaw_servo.attach                  (SERVO_PIN_L,800,1700,45,180 );  // Pin 44 on Mega2560
    Arm_Roll_servo.attach                 (SERVO_PIN_K,1300,2100,120,240 );  // Pin 45 on Mega2560
    Arm_Pitch_servo.attach                (SERVO_PIN_J,500,1833,0,200 );  // Pin 46 on Mega2560
    Elbow_Pitch_servo.attach              (SERVO_PIN_E,967,1767,70,190 );  // pin 2 on Mega2560
    Arm_Yaw_servo.device_write(Arm_Yaw_Default_Position);
    Arm_Roll_servo.device_write(Arm_Roll_Default_Position);
    Arm_Pitch_servo.device_write(Arm_Pitch_Default_Position);
    Elbow_Pitch_servo.device_write(Elbow_Pitch_Default_Position);

//    
    // Setup Eye LEDs to be off
    Eyes_LEDs.device_write(EYE_LEDS_OFF);
    
//    // Setup Pneumatic Back to be bent over
    Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
//                                                                
//    // Setup voice player to be stopped and at max volume
    Voice_Player.Initialize(8);
    Voice_Player.device_write(mp3_device::STOP << 8);
    Voice_Player.device_write((mp3_device::VOLUME << 8) + (mp3_max_volume_level - 1)); 

    
    // Setup interval for entries in the device player
    Devices_Player.set_play_interval(device_play_interval); //
    
		// Setup device values readers before registering
		Head_Vertical_Rotation_Reader.Modify(pgm_get_far_address(Head_Vertical_Rotation_values),NUM_ARRAY_ENTRIES(Head_Vertical_Rotation_values));
		Head_Horizontal_Rotation_Reader.Modify(pgm_get_far_address(Head_Horizontal_Rotation_values),NUM_ARRAY_ENTRIES(Head_Horizontal_Rotation_values));
		Eyes_LEDs_Reader.Modify(pgm_get_far_address(Eyes_LEDs_values),NUM_ARRAY_ENTRIES(Eyes_LEDs_values));
		Pneumatic_Back_Reader.Modify(pgm_get_far_address(Pneumatic_Back_values),NUM_ARRAY_ENTRIES(Pneumatic_Back_values));
		Voice_Player_Reader.Modify(pgm_get_far_address(Voice_Player_values),NUM_ARRAY_ENTRIES(Voice_Player_values));
    
    
    // register the devices with the devices player along with the values to play

    Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                    &Head_Horizontal_Rotation_Reader,
                                    NUM_ARRAY_ENTRIES(Head_Horizontal_Rotation_values));
    Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                    &Head_Vertical_Rotation_Reader,
                                    NUM_ARRAY_ENTRIES(Head_Vertical_Rotation_values));
    Devices_Player.register_device (&Eyes_LEDs,
                                    &Eyes_LEDs_Reader,
                                    NUM_ARRAY_ENTRIES(Eyes_LEDs_values));
    Devices_Player.register_device (&Pneumatic_Back_relay,
                                    &Pneumatic_Back_Reader,
                                    NUM_ARRAY_ENTRIES(Pneumatic_Back_values));
    Devices_Player.register_device (&Voice_Player,
                                    &Voice_Player_Reader,
                                    NUM_ARRAY_ENTRIES(Voice_Player_values));
                                    
// Setup other device values readers
#ifdef DAYO_MOVEMENTS
		DayO_HeadVertRotation_Reader.Modify(pgm_get_far_address(DayO_HeadVertRotation),NUM_ARRAY_ENTRIES(DayO_HeadVertRotation));
		DayO_HeadHoriRotation_Reader.Modify(pgm_get_far_address(DayO_HeadHoriRotation),NUM_ARRAY_ENTRIES(DayO_HeadHoriRotation));
		DayO_MouthRotation_Reader.Modify(pgm_get_far_address(DayO_MouthRotation),NUM_ARRAY_ENTRIES(DayO_MouthRotation));
		DayO_Voice_Player_Reader.Modify(pgm_get_far_address(DayO_Voice_Player),NUM_ARRAY_ENTRIES(DayO_Voice_Player));
#endif

#ifdef WEREWOLVESLONDON_MOVEMENTS
		WerewolvesLondon_HeadVert_Reader.Modify(pgm_get_far_address(WerewolvesLondon_HeadVertRotation),NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadVertRotation));
		WerewolvesLondon_HeadHori_Reader.Modify(pgm_get_far_address(WerewolvesLondon_HeadHoriRotation),NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadHoriRotation));
		WerewolvesLondon_Mouth_Reader.Modify(pgm_get_far_address(WerewolvesLondon_MouthRotation),NUM_ARRAY_ENTRIES(WerewolvesLondon_MouthRotation));
		WerewolvesLondon_Voice_Reader.Modify(pgm_get_far_address(WerewolvesLondon_Voice_Player),NUM_ARRAY_ENTRIES(WerewolvesLondon_Voice_Player));
#endif

#ifdef VAMPIREARMGRASPAT_MOVEMENTS
		VampireArmGraspAt_HeadVert_Reader.Modify(pgm_get_far_address(VampireGraspAtHeadVert),NUM_ARRAY_ENTRIES(VampireGraspAtHeadVert));
		VampireArmGraspAt_HeadHori_Reader.Modify(pgm_get_far_address(VampireGraspAtHeadHoriz),NUM_ARRAY_ENTRIES(VampireGraspAtHeadHoriz));
		VampireArmGraspAt_Mouth_Reader.Modify(pgm_get_far_address(VampireGraspAtMouth),NUM_ARRAY_ENTRIES(VampireGraspAtMouth));
		VampireArmGraspAt_Voice_Reader.Modify(pgm_get_far_address(VampireGraspAtVoice),NUM_ARRAY_ENTRIES(VampireGraspAtVoice));
		VampireArmGraspAt_ArmYaw_Reader.Modify(pgm_get_far_address(VampireGraspAtArmYaw),NUM_ARRAY_ENTRIES(VampireGraspAtArmYaw));
		VampireArmGraspAt_ArmRoll_Reader.Modify(pgm_get_far_address(VampireGraspAtArmRoll),NUM_ARRAY_ENTRIES(VampireGraspAtArmRoll));
		VampireArmGraspAt_ArmPitch_Reader.Modify(pgm_get_far_address(VampireGraspAtArmPitch),NUM_ARRAY_ENTRIES(VampireGraspAtArmPitch));
		VampireArmGraspAt_ElbowPitch_Reader.Modify(pgm_get_far_address(VampireGraspAtElbowPitch),NUM_ARRAY_ENTRIES(VampireGraspAtElbowPitch));
		VampireArmGraspAt_EyesLED_Reader.Modify(pgm_get_far_address(VampireGraspAtEyesLED),NUM_ARRAY_ENTRIES(VampireGraspAtEyesLED));
#endif
                                    
//    // For testing purposes play the devices once. 
    //Devices_Player.start_play(devices_player::PLAY_ONCE); 
#if 0
    // Test reading DayOf from program memory
    {
      unsigned int k;
#ifdef WEREWOLVESLONDON_MOVEMENTS
      Serial.println(F("Reading from WerewolvesLondon_HeadHoriRotation Last 20 entries"));
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = WerewolvesLondon_HeadHori_Reader.read((NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadHoriRotation)) - 20 + k);
        Serial.println(wordRead);
      }    
      Serial.println(F("Reading from WerewolvesLondon_Voice_Player Last 20 entries"));
      for (k = 0; k < 20; k++)
      {
				unsigned int wordRead = WerewolvesLondon_Voice_Reader.read((NUM_ARRAY_ENTRIES(WerewolvesLondon_Voice_Player)) - 20 + k);
        Serial.println(wordRead);
      }
      Serial.println(F("Reading from WerewolvesLondon_HeadVertRotation Last 20 entries"));
      for (k = 0; k < 20; k++)
      {
				unsigned int wordRead = WerewolvesLondon_HeadVert_Reader.read((NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadVertRotation)) - 20 + k);
        Serial.println(wordRead);
      }
#endif   
#ifdef DAYO_MOVEMENTS
      Serial.println(F("Reading from DayO_HeadHoriRotation Last 20 entries"));
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = DayO_HeadHoriRotation_Reader.read((NUM_ARRAY_ENTRIES(DayO_HeadHoriRotation)) - 20 + k);
        Serial.println(wordRead);
      }    
      Serial.println(F("Reading from DayO_MouthRotation Last 20 entries"));
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = DayO_MouthRotation_Reader.read((NUM_ARRAY_ENTRIES(DayO_MouthRotation)) - 20 + k);
        Serial.println(wordRead);
      }  
      Serial.println(F("Reading from DayO_Voice_Player Last 20 entries"));
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = DayO_Voice_Player_Reader.read((NUM_ARRAY_ENTRIES(DayO_Voice_Player)) - 20 + k);
        Serial.println(wordRead);
      }  
#endif 
    }  
#endif
}
 
void loop() 
{ 
     
    // perform device playing operations
    Devices_Player.perform_devices_player();

  if (Serial.available())
  {
    char char_value = Serial.read();
    if (cmdLineIndex < CmdLineMaxSize) 
    {
      
      if (( Carriage_Return == char_value) || (CmdSeperator == char_value))
      {
        cmdLine[cmdLineIndex] = 0; // set end of string
        cmdComplete = true;
      }
      else
      {
        cmdLine[cmdLineIndex] = char_value;
      }
      cmdLineIndex++;
    }
    else
    {
      // cmd line is too long dump the characters until we get a CR then allow cmd line to start again.
      if (( Carriage_Return == char_value) || (CmdSeperator == char_value))
      {
        cmdLineIndex = 0;
        Serial.println(F("CmdLine to long") );
      }    
    } 
  }
  if (cmdComplete) // we have a complete command
  {
    unsigned int index = 0;   
    char* token; 
    char* restcmdLine = cmdLine;    
    int charsScanned = 0; 
    int numParms = 0;
    int value;
    
    if ((token = strtok_r(restcmdLine, delimiters, &restcmdLine)))
    {
      //Serial.print(F("Token is: "));
      //Serial.println(token);
      if (0 == strcmp(token, "BackDown"))
      {
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
        Serial.println(F("BackDown"));
      }
      else if (0 == strcmp(token, "BackUp"))
      {
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_UPRIGHT);
//        delay(700);
//        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
//        delay(200);
//        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_UPRIGHT);
        
        Serial.println(F("BackUp"));
      }
      else if (0 == strcmp(token, "EyesOff"))
      {
        Eyes_LEDs.device_write(EYE_LEDS_OFF);      
        Serial.println(F("EyesOff"));
      }
      else if (0 == strcmp(token, "EyesOn"))
      {
        Eyes_LEDs.device_write(EYE_LEDS_ON);      
        Serial.println(F("EyesOn"));
      }
      else if (0 == strcmp(token, "AudioBloodCurdlngScream"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + BLOOD_CURDLING_SCREAM_FILE);
        Serial.println(F("AudioBloodCurdlngScream")); // "Audio Play on");
      }
      else if (0 == strcmp(token, "AudioStop"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Serial.println(F("AudioStop"));
      }
      else if (0 == strcmp(token, "HeadHorizontal"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Head_Horizontal_Max_Position) && (value >= Head_Horizontal_Min_Position))
          {
            Head_Horizontal_Rotation_servo.device_write(value);
            Serial.print(F("head horizontal "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Head horizontal range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "HeadVertical"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Head_Vertical_Max_Position) && (value >= Head_Vertical_Min_Position))
          {
            Head_Vertical_Rotation_servo.device_write(value);
            Serial.print(F("head vertical "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Head vertical range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "AudioMoreOftenChewing"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + MORE_OFTEN_CHEWING_AT_HEAD_FILE);
        Serial.println(F("AudioMoreOftenChewing"));
      }
      else if (0 == strcmp(token, "AudioHissing"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + HISSING_FILE);
        Serial.println(F("AudioHissing"));
      }
      else if (0 == strcmp(token, "AudioDayO"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + DAYO_FILE);
        Serial.println(F("AudioDayO"));
      }
      else if (0 == strcmp(token, "AudioWerewolvesLondon"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + WEREWOLVES_OF_LONDON_FILE);
        Serial.println(token);
      }
      else if (0 == strcmp(token, "AudioShakeSenora"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + SHAKE_SHAKE_SENORA_FILE);
        Serial.println(F("AudioShakeSenora"));
      }
      else if (0 == strcmp(token, "Delay15SecPlayOnce"))
      {
        delay(15000);  // delay 15 seconds to 
        Devices_Player.start_play(devices_player::PLAY_ONCE);
        Serial.println(F("Delay15SecPlayOnce"));
        {
          base_device * p_device = &Eyes_LEDs;
          p_device->device_write(EYE_LEDS_ON);      
          Serial.println(F("base device write to set EYE LED ON"));
        }
      }
      else if (0 == strcmp(token, "PlayOnce"))
      {
        Devices_Player.start_play(devices_player::PLAY_ONCE);
        Serial.println(F("PlayOnce"));
      }
      else if (0 == strcmp(token, "PlayStop"))
      {
        Devices_Player.stop_play();
        Serial.println(F("PlayStop"));
      }
      else if (0 == strcmp(token, "DayOPlayerSetup"))
      //else if (0)
      {
#ifdef DAYO_MOVEMENTS
        Serial.println(F("DayOPlayerSetup"));
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Set volume Max for mp3
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + (mp3_max_volume_level - 1)); 
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(DayO_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
        
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &DayO_HeadHoriRotation_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_HeadHoriRotation));  // values in PROGMEM
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &DayO_HeadVertRotation_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_HeadVertRotation)); // values in PROGMEM
        Devices_Player.register_device (&Head_Mouth_Rotation_servo,
                                        &DayO_MouthRotation_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_MouthRotation)); // values in PROGMEM
//        Devices_Player.register_device (&Eyes_LEDs,
//                                        pgm_get_far_address(DayO_Eyes_LEDs),
//                                        NUM_ARRAY_ENTRIES(DayO_Eyes_LEDs); // values in PROGMEM
//        Devices_Player.register_device (&Pneumatic_Back_relay,
//                                        pgm_get_far_address(DayO_Pneumatic_Back),
//                                        NUM_ARRAY_ENTRIES(DayO_Pneumatic_Back)); // values in PROGMEM
        Devices_Player.register_device (&Voice_Player,
                                        &DayO_Voice_Player_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_Voice_Player)); // values in PROGMEM
#endif
      }
      else if (0 == strcmp(token, "WerewolvesLondonPlayerSetup"))
      //else if (0)
      {
#ifdef WEREWOLVESLONDON_MOVEMENTS
        Serial.println(F("WerewolvesLondonPlayerSetup"));
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Set volume Max for mp3
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + (mp3_max_volume_level - 1)); 
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(WerewolvesLondon_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
        
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &WerewolvesLondon_HeadHori_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadHoriRotation));  // values in PROGMEM
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &WerewolvesLondon_HeadVert_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadVertRotation)); // values in PROGMEM
        Devices_Player.register_device (&Head_Mouth_Rotation_servo,
                                        &WerewolvesLondon_Mouth_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_MouthRotation)); // values in PROGMEM
//        Devices_Player.register_device (&Eyes_LEDs,
//                                        pgm_get_far_address(WerewolvesLondon_Eyes_LEDs),
//                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_Eyes_LEDs); // values in PROGMEM
//        Devices_Player.register_device (&Pneumatic_Back_relay,
//                                        pgm_get_far_address(WerewolvesLondon_Pneumatic_Back),
//                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_Pneumatic_Back)); // values in PROGMEM
        Devices_Player.register_device (&Voice_Player,
                                        &WerewolvesLondon_Voice_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_Voice_Player)); // values in PROGMEM
#endif                                        
      }
      else if (0 == strcmp(token, "VampireArmGraspAtPlayerSetup"))
      //else if (0)
      {
#ifdef VAMPIREARMGRASPAT_MOVEMENTS
        Serial.println(F("VampireArmGraspAtPlayerSetup"));
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Set volume Max for mp3
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + (mp3_max_volume_level - 1)); 
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(VampireArmGraspAt_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
        
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &VampireArmGraspAt_HeadHori_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtHeadHoriz));  // values in PROGMEM
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &VampireArmGraspAt_HeadVert_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtHeadVert)); // values in PROGMEM
        Devices_Player.register_device (&Head_Mouth_Rotation_servo,
                                        &VampireArmGraspAt_Mouth_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtMouth)); // values in PROGMEM
        Devices_Player.register_device (&Eyes_LEDs,
                                        &VampireArmGraspAt_EyesLED_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtEyesLED)); // values in PROGMEM
        Devices_Player.register_device (&Voice_Player,
                                        &VampireArmGraspAt_Voice_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtVoice)); // values in PROGMEM
        Devices_Player.register_device (&Arm_Yaw_servo,
                                        &VampireArmGraspAt_ArmYaw_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtArmYaw));  // values in PROGMEM
        Devices_Player.register_device (&Arm_Roll_servo,
                                        &VampireArmGraspAt_ArmRoll_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtArmRoll));  // values in PROGMEM
        Devices_Player.register_device (&Arm_Pitch_servo,
                                        &VampireArmGraspAt_ArmPitch_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtArmPitch));  // values in PROGMEM
        Devices_Player.register_device (&Elbow_Pitch_servo,
                                        &VampireArmGraspAt_ElbowPitch_Reader,
                                        NUM_ARRAY_ENTRIES(VampireGraspAtElbowPitch));  // values in PROGMEM
#endif                                        
      }
      else if (0 == strcmp(token, "VampirePlayerSetup"))
      {
        Serial.println(F("VampirePlayerSetup"));
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Setup voice player to be stopped and at max volume
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + (mp3_max_volume_level - 1));
    
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(device_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
    
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &Head_Horizontal_Rotation_Reader,
                                        NUM_ARRAY_ENTRIES(Head_Horizontal_Rotation_values));
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &Head_Vertical_Rotation_Reader,
                                        NUM_ARRAY_ENTRIES(Head_Vertical_Rotation_values));
        Devices_Player.register_device (&Eyes_LEDs,
                                        &Eyes_LEDs_Reader,
                                        NUM_ARRAY_ENTRIES(Eyes_LEDs_values));
        Devices_Player.register_device (&Pneumatic_Back_relay,
                                        &Pneumatic_Back_Reader,
                                        NUM_ARRAY_ENTRIES(Pneumatic_Back_values));
        Devices_Player.register_device (&Voice_Player,
                                        &Voice_Player_Reader,
                                        NUM_ARRAY_ENTRIES(Voice_Player_values));
      }
      else if (0 == strcmp(token, "Mouth"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Mouth_Max_Position) && (value >= Mouth_Min_Position))
          {
            Head_Mouth_Rotation_servo.device_write(value);
            Serial.print(F("Mouth "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Mouth Range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "ArmYaw"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Arm_Yaw_Max_Position) && (value >= Arm_Yaw_Min_Position))
          {
            Arm_Yaw_servo.device_write(value);
            Serial.print(F("Arm Yaw "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Arm Yaw range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "ArmRoll"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Arm_Roll_Max_Position) && (value >= Arm_Roll_Min_Position))
          {
            Arm_Roll_servo.device_write(value);
            Serial.print(F("Arm Roll "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Arm Roll range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "ArmPitch"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Arm_Pitch_Max_Position) && (value >= Arm_Pitch_Min_Position))
          {
            Arm_Pitch_servo.device_write(value);
            Serial.print(F("Arm Pitch "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Arm Pitch range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "ElbowPitch"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= Elbow_Pitch_Max_Position) && (value >= Elbow_Pitch_Min_Position))
          {
            Elbow_Pitch_servo.device_write(value);
            Serial.print(F("Elbow Pitch "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
          else
          {
            Serial.print(F("Elbow Pitch range error "));
            Serial.print(value);
            Serial.println(F(" deg"));
          }
        }
      }
      else if (0 == strcmp(token, "ImuRead"))
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS))
          {
            sensors_event_t event; 
            Adafruit_sensors[sensorNumber].sensor->getEvent(&event);
        
            /* Display the floating point data */
            Serial.print(Adafruit_sensors[sensorNumber].name);
            Serial.print(F(" X deg: "));
            Serial.print(event.orientation.x, 4);
            Serial.print(F("\tY deg: "));
            Serial.print(event.orientation.y, 4);
            Serial.print(F("\tZ deg: "));
            Serial.print(event.orientation.z, 4);
            Serial.println(F(""));
          }
          else
          {
            Serial.println(F("ImuRead range error"));
          }
        }
        else
        {
          Serial.println(F("ImuRead invalid params"));
        }
      }
      else if (0 == strcmp(token, "Imu2Read"))
      {
      }
      else if (0 == strcmp(token, "ImuCalibrate"))
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS))
          {
            uint8_t system_status, self_test_result, system_error;         
            uint8_t sysCalState,  gyroCalState,  accelCalState,  magCalState;
            
            // Get and display system status 
            Serial.print(Adafruit_sensors[sensorNumber].name);
            Adafruit_sensors[sensorNumber].sensor->getSystemStatus(&system_status, &self_test_result, &system_error);
            Serial.print(F(" system_status: "));
            Serial.print(system_status);
            Serial.print(F("\tself_test_result: "));
            Serial.print(self_test_result);
            Serial.print(F("\tsystem_error: "));
            Serial.print(system_error);
            Serial.println(F(""));
            
            // Get and display cal states
            Adafruit_sensors[sensorNumber].sensor->getCalibration( &sysCalState,  &gyroCalState,  &accelCalState,  &magCalState); 
            Serial.print(Adafruit_sensors[sensorNumber].name);
            Serial.print(F(" sysCalState: "));
            Serial.print(sysCalState);
            Serial.print(F("\tgyroCalState: "));
            Serial.print(gyroCalState);
            Serial.print(F("\taccelCalState: "));
            Serial.print(accelCalState);
            Serial.print(F("\tmagCalState: "));
            Serial.print(magCalState);
            Serial.println(F(""));
  
            // Get and display calibration values
            adafruit_bno055_offsets_t offsets_type;
            if (Adafruit_sensors[sensorNumber].sensor->getSensorOffsets(offsets_type))
            {
              Serial.print(Adafruit_sensors[sensorNumber].name);
              Serial.print(F(" gyro offsets: x "));
              Serial.print(offsets_type.gyro_offset_x);
              Serial.print(F(", y ")); 
              Serial.print(offsets_type.gyro_offset_y);
              Serial.print(F(", z ")); 
              Serial.println(offsets_type.gyro_offset_z);
              Serial.print(F(" accel offsets: x "));
              Serial.print(offsets_type.accel_offset_x);
              Serial.print(F(", y ")); 
              Serial.print(offsets_type.accel_offset_y);
              Serial.print(F(", z ")); 
              Serial.print(offsets_type.accel_offset_z);
              Serial.print(F(" accel radius: "));
              Serial.print(offsets_type.accel_radius);
              Serial.print(F(" mag offsets: x "));
              Serial.print(offsets_type.mag_offset_x);
              Serial.print(F(", y ")); 
              Serial.print(offsets_type.mag_offset_y);
              Serial.print(F(", z ")); 
              Serial.print(offsets_type.mag_offset_z);
              Serial.print(F(" mag radius: "));
              Serial.print(offsets_type.mag_radius);
              Serial.println(F(""));
            }
            else
            {
              Serial.println(F("getSensorOffset not fully calibd"));
            }      
          }
          else
          {
            Serial.println(F("ImuRead range error"));
          }
        }
        else
        {
          Serial.println(F("ImuRead invalid parms"));
        }
      }
      else if (0 == strcmp(token, "Imu2Calibrate"))
      {
	  }
      else if (0 == strcmp(token, "ImuGetStoredCalibData"))
      	// gets stored calib offsets data from eeprom and sets IMU with that offset data
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS) && (sensorNumber < Num_Eeprom_Cal_Sensors))
          {
            // Get calibration values from eeprom
            uint8_t adafruit_bno055_offsets_raw[Per_Sensor_Cal_Data_Size_Eeprom];
            for (int i = 0; i < Per_Sensor_Cal_Data_Size_Eeprom; i++)
            {
            	adafruit_bno055_offsets_raw[i] = EEPROM.read(Sensors_Cal_Data_Eeprom_adrs + (sensorNumber * Per_Sensor_Cal_Data_Size_Eeprom) + i);
            	Serial.print(F("Offset "));
            	Serial.print(i);
            	Serial.print(F(" Value "));
            	Serial.println(adafruit_bno055_offsets_raw[i]);
            }
            // set values into IMU           
            Adafruit_sensors[sensorNumber].sensor->setSensorOffsets(&adafruit_bno055_offsets_raw[0]);
          }
          else
          {
            Serial.println(F("ImuGetStoredCalibData sensor number range error"));
          }
        }
        else
        {
          Serial.println(F("ImuGetStoredCalibData invalid parms"));
        }
      }
      else if (0 == strcmp(token, "ImuSetStoredCalibData"))
      	// gets calibration offsets from IMU and stores them in eeprom
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS) && (sensorNumber < Num_Eeprom_Cal_Sensors))
          {
            uint8_t adafruit_bno055_offsets_raw[Per_Sensor_Cal_Data_Size_Eeprom];
            // Get calibration values from IMU
            if (Adafruit_sensors[sensorNumber].sensor->getSensorOffsets(&adafruit_bno055_offsets_raw[0]))
            {
	            for (int i = 0; i < Per_Sensor_Cal_Data_Size_Eeprom; i++)
	            {
	            	EEPROM.write(Sensors_Cal_Data_Eeprom_adrs + (sensorNumber * Per_Sensor_Cal_Data_Size_Eeprom) + i, adafruit_bno055_offsets_raw[i]);
	            	Serial.print(F("Offset "));
	            	Serial.print(i);
	            	Serial.print(F(" Value "));
	            	Serial.println(adafruit_bno055_offsets_raw[i]);
	            }
						}
            else
            {
							Serial.println(F("ImuSetStoredCalibData IMU not calibrated error, not storing offsets from IMU"));
            }
          }
          else
          {
            Serial.println(F("ImuSetStoredCalibData sensor number range error"));
          }
        }
        else
        {
          Serial.println(F("ImuGetStoredCalibData invalid parms"));
        }
      }
      else if (0 == strcmp(token, "Visualize3DStop"))
      {
        Adafruit3DVisualizeEnabled = false;
        Serial.println(F("Visualize3DStop"));
      }
      else if (0 == strcmp(token, "Visualize3D"))
      {
        int numItems = 0;
        int periodMsec;
        int sensorNumber = 0;
        int format = direct_Euler_fmt;
        if ((numItems = sscanf(restcmdLine, "%d %d %d", &periodMsec, &sensorNumber, &format)) >= 2)
        {
          if ((periodMsec >= 10) && ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS)))
          {
            Serial.print(F("Visualize3D: period msec "));
            Serial.print(periodMsec);
            Serial.print(F(" Sensor to Visualize: "));
            Serial.println(Adafruit_sensors[sensorNumber].name);
            AdafruitSensorReadPeriodMsec = periodMsec;
            AdafruitSensorToVisualize = sensorNumber;
            AdafruitSensorReadTimeout = millis(); // force timeout right away
            if (numItems >= 3) 
            // format specified
            {
                switch (format)
                {
                    case direct_Euler_fmt:
                        Adafruit3DVisualizeFormat = direct_Euler_fmt;
                        break;
                    case quat_converted_to_Euler_fmt:
                        Adafruit3DVisualizeFormat = quat_converted_to_Euler_fmt;
                        break;
                    default:
                        Adafruit3DVisualizeFormat = direct_Euler_fmt;
                        break;
                }
            }
            else
            {
                Adafruit3DVisualizeFormat = direct_Euler_fmt;
            }
            Adafruit3DVisualizeEnabled = true;
          }
          else
          {
            Serial.println(F("Visualize3D: range error"));
          }    
        }
        else
        {
          Serial.println(F("Visualize3D: Invalid parms"));
        }
      }
      else if (0 == strcmp(token, "ImusShowPitchDiffStop"))
      {
      	AdafruitImusPitchDiffEnabled = false;
        Serial.print(F("ImusShowPitchDiffStop"));
      }
      else if (0 == strcmp(token, "ImusShowPitchDiff"))
      {

        int numItems = 0;
        int periodMsec;
        int sensorNumber1 = 0;
        int sensorNumber2 = 0;
        if ((numItems = sscanf(restcmdLine, "%d %d %d", &periodMsec, &sensorNumber1, &sensorNumber2)) >= 3)
        {
          if ((periodMsec >= 10) && ((sensorNumber1 >= 0) && (sensorNumber1 < MAX_ADAFRUIT_SENSORS)) &&
          	((sensorNumber2 >= 0) && (sensorNumber2 < MAX_ADAFRUIT_SENSORS))
          	)
          {
            Serial.print(F("ImusShowPitchDiff: period msec "));
            Serial.print(periodMsec);
            Serial.print(F(" Sensor1 used: "));
            Serial.println(Adafruit_sensors[sensorNumber1].name);
            Serial.print(F(" Sensor2 used: "));
            Serial.println(Adafruit_sensors[sensorNumber2].name);
            AdafruitImusPitchDiffControl.periodMs = periodMsec;
            AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor1 = sensorNumber1;
            AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor2 = sensorNumber2;
            AdafruitImusPitchDiffControl.timeout = millis(); // force timeout right away
          	// Read sensors for difference at start to treat as 0 base diff.
		        sensors_event_t event1; 
		        sensors_event_t event2; 
		        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor1].sensor->getEvent(&event1);
		        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor2].sensor->getEvent(&event2);		
		        AdafruitImusPitchDiffControl.pitch1ZeroBase = (int)(event1.orientation.z);
		        AdafruitImusPitchDiffControl.pitch2ZeroBase = (int)(event2.orientation.z);
      			AdafruitImusPitchDiffEnabled = true;
          }
          else
          {
            Serial.println(F("ImusShowPitchDiff: range error"));
          }    
        }
        else
        {
          Serial.println(F("ImusShowPitchDiff: Invalid parms"));
        }      
      }
      else if (0 == strcmp(token, "ImuMouthControlStop"))
      {
        AdafruitImuMouthCtrlEnabled = false;
        Serial.print(F("ImuMouthControlStop"));
      }
      else if (0 == strcmp(token, "ImuMouthControl"))
      {
        int numItems = 0;
        int periodMsec;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d %d", &periodMsec, &sensorNumber)) >= 2)
        {
          if ((periodMsec >= 10) && ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS)))
          {
            Serial.print(F("ImuMouthControl: period msec "));
            Serial.print(periodMsec);
            Serial.print(F(" Sensor used: "));
            Serial.println(Adafruit_sensors[sensorNumber].name);
            AdafruitImuMouthCtrlPeriodMsec = periodMsec;
            Head_Mouth_Servo_Filter.setUpdatePeriod(periodMsec);
            Head_Mouth_Servo_Filter.startingPointDegrees(Head_Mouth_Rotation_servo.device_read());
            Head_Mouth_Servo_Filter.flush();
            AdafruitImuMouthCtrlSensor = sensorNumber;
            AdafruitImuMouthCtrlTimeout = millis(); // force timeout right away
            AdafruitImuMouthCtrlEnabled = true;
            NumMouthDegreeSettings= 0; // start over
            
            sensors_event_t event; 
            Adafruit_sensors[AdafruitImuMouthCtrlSensor].sensor->getEvent(&event);
            ImuMouthCtrlRefFrame.heading = event.orientation.x;
            ImuMouthCtrlRefFrame.pitch = event.orientation.y;  // TODO check if y is pitch or z is pitch ????
            ImuMouthCtrlRefFrame.roll = event.orientation.z;
          }
          else
          {
            Serial.println(F("ImuMouthControl: range error"));
          }    
        }
        else
        {
          Serial.println(F("ImuMouthControl: Invalid parms"));
        }
      }
#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
      else if (0 == strcmp(token, "ImuHeadMouthStop"))
      {
        AdafruitImuHeadMouthEnabled = false;
        // stop any audio file
        Voice_Player.device_write(mp3_device::STOP << 8);
        Serial.println(F("ImuHeadMouthStop"));
      }
      else if (0 == strcmp(token, "ImuHeadMouth"))
      {
        int numItems = 0;
        int periodMsec;
        int audioFile;
        int audioDelayInPeriods;
        int includeArm = 0;
        if ((numItems = sscanf(restcmdLine, "%d %d %d %d", &periodMsec, &audioFile, &audioDelayInPeriods, &includeArm)) >= 3)
        {
          if (periodMsec >= Servo_Min_Update_Period)
          {            
            Serial.print(F("ImuHeadMouth: period msec "));
            Serial.print(periodMsec);
            Serial.print(F(" AudioFile "));
            Serial.print(audioFile);
            Serial.print(F(" audioDelayInPeriods "));
            Serial.print(audioDelayInPeriods);
            if (numItems >= 4)
            {
              Serial.print(F(" includeArm "));
              Serial.print(includeArm);
            }
            Serial.println("");
            
            AdafruitImuHeadMouthPeriodMs = periodMsec;
            if ((numItems >= 4) && (includeArm == 1))
            {
              AdafruitImuHeadMouthIncludeArm = true;
            }
            else
            {
              AdafruitImuHeadMouthIncludeArm = false;
            }
            Head_Mouth_Servo_Filter.setUpdatePeriod(periodMsec);
            Head_Mouth_Servo_Filter.startingPointDegrees(Head_Mouth_Rotation_servo.device_read());
            Head_Mouth_Servo_Filter.flush();
            Head_Horizontal_Servo_Filter.setUpdatePeriod(periodMsec);
            Head_Horizontal_Servo_Filter.startingPointDegrees(Head_Horizontal_Rotation_servo.device_read());
            Head_Horizontal_Servo_Filter.flush();
            Head_Vertical_Servo_Filter.setUpdatePeriod(periodMsec);
            Head_Vertical_Servo_Filter.startingPointDegrees(Head_Vertical_Rotation_servo.device_read());
            Head_Vertical_Servo_Filter.flush();
            if (AdafruitImuHeadMouthIncludeArm)
            {
              Arm_Yaw_Servo_Filter.setUpdatePeriod(periodMsec);
              Arm_Yaw_Servo_Filter.startingPointDegrees(Arm_Yaw_servo.device_read());
              Arm_Yaw_Servo_Filter.flush();
              Arm_Roll_Servo_Filter.setUpdatePeriod(periodMsec);
              Arm_Roll_Servo_Filter.startingPointDegrees(Arm_Roll_servo.device_read());
              Arm_Roll_Servo_Filter.flush();
              Arm_Pitch_Servo_Filter.setUpdatePeriod(periodMsec);
              Arm_Pitch_Servo_Filter.startingPointDegrees(Arm_Pitch_servo.device_read());
              Arm_Pitch_Servo_Filter.flush();
              Elbow_Pitch_Servo_Filter.setUpdatePeriod(periodMsec);
              Elbow_Pitch_Servo_Filter.startingPointDegrees(Elbow_Pitch_servo.device_read());
              Elbow_Pitch_Servo_Filter.flush();
              
              
            }           
            AdafruitImuHeadMouthTimeout = millis(); // force timeout right away
            AdafruitImuHeadMouthAudioFile = audioFile;
            AdafruitImuHeadMouthAudioDelay = audioDelayInPeriods;            
            AdafruitImuHeadMouthEnabled = true;
            
            
            // Get Reference Frames to start from
            sensors_event_t event; 
            Adafruit_sensors[ImuHeadVerticalServoControl.AdafruitImuCtrlSensor].sensor->getEvent(&event);
            ImuHeadVerticalServoControl.ImuCtrlRefFrame.heading = event.orientation.x;
            ImuHeadVerticalServoControl.ImuCtrlRefFrame.pitch = event.orientation.z; 
            ImuHeadVerticalServoControl.ImuCtrlRefFrame.roll = event.orientation.y;
            Serial.print(F("ImuHeadMouth Vert: period msec "));
            Serial.print(periodMsec);

            
            // Horizontal uses same IMU as vertical 
            ImuHeadHorizontalServoControl.ImuCtrlRefFrame.heading = event.orientation.x;
            ImuHeadHorizontalServoControl.ImuCtrlRefFrame.pitch = event.orientation.z; 
            ImuHeadHorizontalServoControl.ImuCtrlRefFrame.roll = event.orientation.y;
            
            
            Adafruit_sensors[ImuMouthServoControl.AdafruitImuCtrlSensor].sensor->getEvent(&event);
            ImuMouthServoControl.ImuCtrlRefFrame.heading = event.orientation.x;
            ImuMouthServoControl.ImuCtrlRefFrame.pitch = event.orientation.z; 
            ImuMouthServoControl.ImuCtrlRefFrame.roll = event.orientation.y;

            if (AdafruitImuHeadMouthIncludeArm)
            {
              int heading;
              int roll;
              int pitch;
              Adafruit_sensors[ImuArmYawServoControl.AdafruitImuCtrlSensor].sensor->getEvent(&event);
              armImuFilter.input(event.orientation.x, event.orientation.y, event.orientation.z );
              armImuFilter.output(heading, roll, pitch );

              
              // arm sensor used for arm yaw,roll,pitch servos
              ImuArmYawServoControl.ImuCtrlRefFrame.heading = heading;
              ImuArmYawServoControl.ImuCtrlRefFrame.pitch = pitch; 
              ImuArmYawServoControl.ImuCtrlRefFrame.roll = roll;
              
              ImuArmRollServoControl.ImuCtrlRefFrame.heading = heading;
              ImuArmRollServoControl.ImuCtrlRefFrame.pitch = pitch; 
              ImuArmRollServoControl.ImuCtrlRefFrame.roll = roll;

              ImuArmPitchServoControl.ImuCtrlRefFrame.heading = heading;
              ImuArmPitchServoControl.ImuCtrlRefFrame.pitch = pitch; 
              ImuArmPitchServoControl.ImuCtrlRefFrame.roll = roll;
              
              // read forearm sensor for elbow pitch servo
              Adafruit_sensors[ImuElbowPitchServoControl.AdafruitImuCtrlSensor].sensor->getEvent(&event);
              forearmImuFilter.input(event.orientation.x, event.orientation.y, event.orientation.z );
              forearmImuFilter.output(heading, roll, pitch );
              ImuElbowPitchServoControl.ImuCtrlRefFrame.heading = heading;
              ImuElbowPitchServoControl.ImuCtrlRefFrame.pitch = pitch; 
              ImuElbowPitchServoControl.ImuCtrlRefFrame.roll = roll;
            }
          }
          else
          {
            Serial.println(F("ImuHeadMouth: range error"));
          }    
        }
        else
        {
          Serial.println(F("ImuHeadMouth: Invalid parms"));
        }
      }
#endif
      else if (0 == strcmp(token, "DelayMsec"))
      {
        int numItems;
        int delayInMsec;
        if ((numItems = sscanf(restcmdLine, "%d", &delayInMsec)) >= 1)
        {
          Serial.print(F("Delaying"));
          // Use inline delay for now (holds up loop)
          delay(delayInMsec);
        }
      }
      else if (0 == strcmp(token, "ListSdCardDir"))
      {
        Serial.println(F("ListSdCardDir"));
        printSdCardInfo();
      }
      else
      {
        Serial.print(F("Unknown Cmd: "));
        Serial.println(token);       
      }
    }
    // reset command line and completion indication
    cmdComplete = false;
    cmdLineIndex = 0;    
  }
  
  switch (dbg_prop_user_control_state){
    case 1:
      if (prop_user_control_timeout < millis()){
        Eyes_LEDs.device_write(EYE_LEDS_OFF);
    //    Head_Horizontal_Rotation_servo.device_write(90);
    //    Head_Vertical_Rotation_servo.device_write(90);
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
    //    Serial.println(F("LED high"));
        prop_user_control_timeout = millis() + 1000;
        dbg_prop_user_control_state = 2;
      }
      break;
    case 2:
      if (prop_user_control_timeout < millis()){
    
        Eyes_LEDs.device_write(EYE_LEDS_ON);
    //    Head_Horizontal_Rotation_servo.device_write(120);
    //    Head_Vertical_Rotation_servo.device_write(100);
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_UPRIGHT);
    //    Serial.println(F("LED low"));
         prop_user_control_timeout = millis() + 1000;
         dbg_prop_user_control_state = 1;
      }
     break;
  }
  
  if (Adafruit3DVisualizeEnabled )
  {
    if (AdafruitSensorReadTimeout <= millis())
    {
      AdafruitSensorReadTimeout += AdafruitSensorReadPeriodMsec;
      if (direct_Euler_fmt == Adafruit3DVisualizeFormat)
      {
          sensors_event_t event; 
          Adafruit_sensors[AdafruitSensorToVisualize].sensor->getEvent(&event);
          /* Display the information as the visualize processing sketch needs it */
          Serial.print(F("Orientation: "));
          Serial.print((float)event.orientation.x);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.y);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.z);
          Serial.println(F(""));
      }
      else if (quat_converted_to_Euler_fmt == Adafruit3DVisualizeFormat)
      {
          imu::Quaternion quat;
          quat = Adafruit_sensors[AdafruitSensorToVisualize].sensor->getQuat();
          imu::Vector<3> eulerFromQuat = quat.toEuler();
          Serial.print(F("OrientationEulerFromQuat: "));
          Serial.print((float)eulerFromQuat.x()* 180.0/PI);
          Serial.print(F(" "));
          Serial.print((float)eulerFromQuat.y()* 180.0/PI);
          Serial.print(F(" "));
          Serial.print((float)eulerFromQuat.z()* 180.0/PI);
          Serial.println(F(""));
      }
      else if (quat_converted_to_DirectEuler_fmt == Adafruit3DVisualizeFormat)
      {
          imu::Quaternion quat;
          float heading; 
          float roll;
          float pitch;
          quat = Adafruit_sensors[AdafruitSensorToVisualize].sensor->getQuat();
          quatToDirectEulerReading(quat, heading, roll, pitch);
          Serial.print(F("OrientationDirectEulerFromQuat: "));
          Serial.print(heading);
          Serial.print(F(" "));
          Serial.print(roll);
          Serial.print(F(" "));
          Serial.print(pitch);
          Serial.println(F(""));
      }
      else
      {
        // do nothing
      }
      /* Also send calibration data for each sensor. */
      uint8_t sys, gyro, accel, mag = 0;
      Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
      Serial.print(F("Calibration: "));
      Serial.print(sys, DEC);
      Serial.print(F(" "));
      Serial.print(gyro, DEC);
      Serial.print(F(" "));
      Serial.print(accel, DEC);
      Serial.print(F(" "));
      Serial.println(mag, DEC); 
      
      if (AdafruitSensorReadTimeout <= millis())
      {
        Serial.println(F("AdafruitSensorReadTimeout to far behind. Resetting to current time"));
        AdafruitSensorReadTimeout = millis();
      }
    }
  }  
  if (AdafruitImusPitchDiffEnabled )
  {
    if (AdafruitImusPitchDiffControl.timeout <= millis())
    {
      AdafruitImusPitchDiffControl.timeout += AdafruitImusPitchDiffControl.periodMs;
      {
        int pitch1;
        int pitch2;
        int diffRelativeToBase;
        int diff;
        int frameBaseDiff;
        // Get new IMU positions all at same time
        sensors_event_t event1; 
        sensors_event_t event2; 
        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor1].sensor->getEvent(&event1);
        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor2].sensor->getEvent(&event2);

        pitch1 = (int)(event1.orientation.z);
        pitch2 = (int)(event2.orientation.z);
        // Handle the case where the start and end point cross over the 0/360 point by 
        // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw pitch > 180 it is assumed to 
        // be because we have transitioned across the 0/360 boundary going form the start to end point
				diff = pitch2 - pitch1;
        if (diff > 179)
        {
          diff -= 360;
        }
        else if (diff < -179)
        {
          diff += 360;
        }
        // calculate starting base diff
        frameBaseDiff = AdafruitImusPitchDiffControl.pitch2ZeroBase - AdafruitImusPitchDiffControl.pitch1ZeroBase;
        if (frameBaseDiff > 179)
        {
          frameBaseDiff -= 360;
        }
        else if (frameBaseDiff < -179)
        {
          frameBaseDiff += 360;
        }
        diffRelativeToBase = diff - frameBaseDiff;
        
        
	      // Print the current angles and difference
	      Serial.print(F("diffRelBase, diff, pitch1, pitch2:  "));
	      Serial.print(diffRelativeToBase);
	      Serial.print(F(" "));
	      Serial.print(diff);     
	      Serial.print(F(" "));
	      Serial.print(pitch1);
	      Serial.print(F(" "));
	      Serial.print(pitch2);
	      Serial.println(F(""));
      }      
      if (AdafruitImusPitchDiffControl.timeout <= millis())
      {
        Serial.println(F("AdafruitImusPitchDiffControl.timeout to far behind. Resetting to current time"));
        AdafruitImusPitchDiffControl.timeout = millis();
      }
    }
  }  
  if (AdafruitImuMouthCtrlEnabled )
  {
    if (AdafruitImuMouthCtrlTimeout <= millis())
    {
        AdafruitImuMouthCtrlTimeout += AdafruitImuMouthCtrlPeriodMsec;

        int mouthAngle;
        int filteredServoAngle;
        const int pitchToMouthAngeOffsetDeg = 90; // position for mouth relative to pitch .  adjusted pitch + offset = mouth angle to use
        // Get new IMU position for moving servo to
        sensors_event_t event; 
        Adafruit_sensors[AdafruitImuMouthCtrlSensor].sensor->getEvent(&event);
        // Use pitch for the mouth control
        int pitch = (int)(event.orientation.y);
        int zeroBasedPitch = pitch - (int)(ImuMouthCtrlRefFrame.pitch);
        // Handle the case where heading start and end point cross over the 0/360 point by 
        // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
        // be because we have transitioned across the 0/360 boundary going form the start to end point
        if (zeroBasedPitch > 179)
        {
          zeroBasedPitch -= 360;
        }
        else if (zeroBasedPitch < -179)
        {
          zeroBasedPitch += 360;
        }
        mouthAngle = zeroBasedPitch + pitchToMouthAngeOffsetDeg;
        // Limit Mouth Angle to between 110 and 80 degrees
        if (mouthAngle > Mouth_Max_Position)
        {
          mouthAngle = Mouth_Max_Position;
        }      
        else if (mouthAngle < Mouth_Min_Position)
        {
          mouthAngle = Mouth_Min_Position;
        }
        // feed servoAngle to filter
        Head_Mouth_Servo_Filter.input(mouthAngle); // ignore torqueload for now
        // Read Filter Output angle and set servo to it
        Head_Mouth_Servo_Filter.output(filteredServoAngle);
        Head_Mouth_Rotation_servo.device_write(filteredServoAngle);

        /* 
        Serial.print(F("Orientation: "));
        Serial.print((float)event.orientation.x);
        Serial.print(F(" "));
        Serial.print((float)event.orientation.y);
        Serial.print(F(" "));
        Serial.print((float)event.orientation.z);
        Serial.println(F(""));
        
        uint8_t sys, gyro, accel, mag = 0;
        Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
        Serial.print(F("Calibration: "));
        Serial.print(sys, DEC);
        Serial.print(F(" "));
        Serial.print(gyro, DEC);
        Serial.print(F(" "));
        Serial.print(accel, DEC);
        Serial.print(F(" "));
        Serial.println(mag, DEC);
       */ 
      
        if (AdafruitImuMouthCtrlTimeout <= millis())
        {
          Serial.println(F("AdafruitImuMouthCtrlTimeout to far behind. Resetting to current time"));
          AdafruitImuMouthCtrlTimeout = millis();
        }
    }
  }  
// ------------------------------------------------------
#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
  if ( AdafruitImuHeadMouthEnabled)
  { 
    int inputValue = digitalRead(AdafruitImuHeadMouthStopDiscrete);
    if (inputValue == LOW)
    {
      AdafruitImuHeadMouthEnabled = false;
      Serial.println(F("Discrete stopped IMU Head Mouth operations"));
    }
  }
  if (AdafruitImuHeadMouthEnabled )
  {
    if (AdafruitImuHeadMouthTimeout <= millis())
    {
      bool markAudioFileStartPoint = false;
      AdafruitImuHeadMouthTimeout += AdafruitImuHeadMouthPeriodMs;
      // Read the IMU sensors all together at the same time
      sensors_event_t head_event; 
      Adafruit_sensors[ADAFRUIT_IMU_HEAD].sensor->getEvent(&head_event);
      sensors_event_t mouth_event; 
      Adafruit_sensors[ADAFRUIT_IMU_MOUTH].sensor->getEvent(&mouth_event);
      sensors_event_t arm_event; 
      sensors_event_t forearm_event;
      if (AdafruitImuHeadMouthIncludeArm)
      {
        Adafruit_sensors[ADAFRUIT_IMU_ARM].sensor->getEvent(&arm_event);
        Adafruit_sensors[ADAFRUIT_IMU_FOREARM].sensor->getEvent(&forearm_event);
      }
      // Read current back setting
      bool BackBentOver = (Pneumatic_Back_relay.device_read() == PNEUMATIC_BACK_BENTOVER);
      
      // check to see if should play audio file now
      if (AdafruitImuHeadMouthAudioDelay == 0)
      {
        // Play file
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + AdafruitImuHeadMouthAudioFile);
        AdafruitImuHeadMouthAudioDelay--;
        markAudioFileStartPoint = true;       
      }
      else if (AdafruitImuHeadMouthAudioDelay > 0)
      {
        AdafruitImuHeadMouthAudioDelay--;
      }
   
      // Handle Mouth control part ------------------------------------------------
      {
          ImuServoControlDef & ImuServoCtrlUsing = ImuMouthServoControl;        
          int servoAngle;
          int filteredServoAngle;
          const int pitchToMouthAngeOffsetDeg = Mouth_Max_Position; // Mouth closed positon associated with zero based pitch angle.  Assumes we start in mouth closed position
          // Use pitch for the mouth control
          float fpitchMouth = mouth_event.orientation.z;         
          float fpitchHead = convertPitchForHeadOrientation(head_event.orientation.z);
          float fpitchHeadRef = convertPitchForHeadOrientation(ImuHeadVerticalServoControl.ImuCtrlRefFrame.pitch);
          float fpitchMouthRef = ImuServoCtrlUsing.ImuCtrlRefFrame.pitch;         
          float fpitch = fpitchMouth - fpitchHead - (fpitchMouthRef - fpitchHeadRef);
           
          #if 0        
            int pitch = (int)(fpitchMouth);
            int zeroBasedImuAngle = pitch - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.pitch);
          #else
          	int zeroBasedImuAngle = (int)(fpitch);
          #endif
          //  head cap showing starting level pointing straight forward as pitch of 179 slightly down and -179 slightly up.
          // mouth pitch diff shows -1 slightly down and + slightly up
          // Handle the case where heading start and end point cross over the 0/360 point by 
          // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
          // be because we have transitioned across the 0/360 boundary going form the start to end point
          if (zeroBasedImuAngle > 179)
          {
            zeroBasedImuAngle -= 360;
          }
          else if (zeroBasedImuAngle < -179)
          {
            zeroBasedImuAngle += 360;
          }
          
          // Scale mouth open angle
          zeroBasedImuAngle = scaleMouthAngle(zeroBasedImuAngle);
          
          servoAngle = zeroBasedImuAngle + pitchToMouthAngeOffsetDeg;
          // Limit Mouth Angle to between 110 and 80 degrees
          if (servoAngle > Mouth_Max_Position)
          {
            servoAngle = Mouth_Max_Position;
          }      
          else if (servoAngle < Mouth_Min_Position)
          {
            servoAngle = Mouth_Min_Position;
          }
          // feed servoAngle to filter
          ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
          // Read Filter Output angle and set servo to it
          ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
          ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
      }
      // Handle Head Horizontal control part ------------------------------------------------
      {
          ImuServoControlDef & ImuServoCtrlUsing = ImuHeadHorizontalServoControl;        
          int servoAngle;
          int filteredServoAngle;
          const int headingToHorizAngeOffsetDeg = 90; // position associated with zero based heading angle
          // Use heading for the head horizontal control
          int heading = (int)(head_event.orientation.x);
          int zeroBasedImuAngle = heading - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.heading);
          // Handle the case where heading start and end point cross over the 0/360 point by 
          // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
          // be because we have transitioned across the 0/360 boundary going form the start to end point
          if (zeroBasedImuAngle > 179)
          {
            zeroBasedImuAngle -= 360;
          }
          else if (zeroBasedImuAngle < -179)
          {
            zeroBasedImuAngle += 360;
          }
          servoAngle = zeroBasedImuAngle + headingToHorizAngeOffsetDeg;
          // Limit Horizontal Angle
          if (servoAngle > Head_Horizontal_Max_Position)
          {
            servoAngle = Head_Horizontal_Max_Position;
          }      
          else if (servoAngle < Head_Horizontal_Min_Position)
          {
            servoAngle = Head_Horizontal_Min_Position;
          }
          // feed servoAngle to filter
          ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
          // Read Filter Output angle and set servo to it
          ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
          ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
         
      }
      // Handle Head Vertical control part ------------------------------------------------
      {
          ImuServoControlDef & ImuServoCtrlUsing = ImuHeadVerticalServoControl;
          int servoAngle;
          int filteredServoAngle;
          const int pitchToVertAngeOffsetDeg = 80; // position associated with zero based pitch angle (this seems to keep head jitter down)
          // Use heading for the head horizontal control
          int pitch = (int)(head_event.orientation.z);
          int zeroBasedImuAngle = pitch - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.pitch);
          // Handle the case where heading start and end point cross over the 0/360 point by 
          // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assumed to 
          // be because we have transitioned across the 0/360 boundary going form the start to end point
          if (zeroBasedImuAngle > 179)
          {
            zeroBasedImuAngle -= 360;
          }
          else if (zeroBasedImuAngle < -179)
          {
            zeroBasedImuAngle += 360;
          }
          // The servo is reverse where a lesser angle moves the head up and larger angle moves it down so
          // negate the zeroBasedImuAngle
          zeroBasedImuAngle = 0 - zeroBasedImuAngle;
          servoAngle = zeroBasedImuAngle + pitchToVertAngeOffsetDeg;
          // Limit Horizontal Angle
          if (servoAngle > Head_Vertical_Max_Position)
          {
            servoAngle = Head_Vertical_Max_Position;
          }      
          else if (servoAngle < Head_Vertical_Min_Position)
          {
            servoAngle = Head_Vertical_Min_Position;
          }
          // feed servoAngle to filter
          ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
          // Read Filter Output angle and set servo to it
          ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
          ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
         
      }
      if (AdafruitImuHeadMouthIncludeArm)
      {
        int heading; //yaw
        int roll;
        int pitch;
        int armHeading; //yaw
        int armRoll;
        int armPitch;
        // Get filtered Arm IMU output
        armImuFilter.input(arm_event.orientation.x, arm_event.orientation.y, arm_event.orientation.z);
        armImuFilter.output(heading, roll, pitch );
        // Save these for use later for handling elbow servo
        armHeading = heading;
        armRoll = roll;
        armPitch = pitch;
        
        // Handle arm yaw(heading) servo
        // TODO need to figure out why get some weird IMU outputs sometimes where the Yaw goes weird
        // when pitch or roll is above a certain value.
        {
            ImuServoControlDef & ImuServoCtrlUsing = ImuArmYawServoControl;        
            int servoAngle;
            int filteredServoAngle;
            // Use heading for the servo control
            int zeroBasedImuAngle = heading - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.heading);
            // Handle the case where the reference to current imu angle crosses over the 0/360 point by 
            // by assuming that the abs (current - reference) < 180 degrees.  Thus if the raw zeroBasedImuAngle is > 180 it is assuemd to 
            // be because we have transitioned across the 0/360 boundary going form the reference to the current imu angle
            if (zeroBasedImuAngle > 179)
            {
              zeroBasedImuAngle -= 360;
            }
            else if (zeroBasedImuAngle < -179)
            {
              zeroBasedImuAngle += 360;
            }
            servoAngle = zeroBasedImuAngle + Arm_Yaw_Default_Position; // add the default position of the servo that zeroBasedImuAngle = 0 corresponds to
            // Limit  Angle
            if (servoAngle > Arm_Yaw_Max_Position)
            {
              servoAngle = Arm_Yaw_Max_Position;
            }      
            else if (servoAngle < Arm_Yaw_Min_Position)
            {
              servoAngle = Arm_Yaw_Min_Position;
            }
            // feed servoAngle to filter
            ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
            // Read Filter Output angle and set servo to it
            ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
            ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
        }
        
        // Handle arm roll servo
        {
            ImuServoControlDef & ImuServoCtrlUsing = ImuArmRollServoControl;        
            int servoAngle;
            int filteredServoAngle;
            // Use roll for the servo control
            int zeroBasedImuAngle = roll - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.roll);
            // Currently the imu roll does not ever get at or above 90 or at or below -90 and so the code below while not needed
            // can be left in, just in case the roll ever gets extended to 0 to 180 and 0 to -180.
            // Handle the case where the reference to current imu angle crosses over the  -180/180 point by 
            // by assuming that the abs (current - reference) < 180 degrees.  Thus if the raw zeroBasedImuAngle is > 180 it is assumed to 
            // be because we have transitioned across the -180/180 boundary going form the reference to the current imu angle
            if (zeroBasedImuAngle > 179)
            {
              zeroBasedImuAngle -= 360;
            }
            else if (zeroBasedImuAngle < -179)
            {
              zeroBasedImuAngle += 360;
            }
            // take the negative of the zeroBasedImuAngle as incresing servo roll angle rolls
            // the arm  toward the body (counter clockwise when viewed from the prop itself)
            // , whereas increasing arm Imu roll
            // rolls the arm away from the body (clockwise when viewed from the prop itself)
            zeroBasedImuAngle = 0 - zeroBasedImuAngle;
            servoAngle = zeroBasedImuAngle + Arm_Roll_Default_Position; // add the default position of the servo that zeroBasedImuAngle = 0 corresponds to
            // Limit  Angle
            if (servoAngle > Arm_Roll_Max_Position)
            {
              servoAngle = Arm_Roll_Max_Position;
            }      
            else if (servoAngle < Arm_Roll_Min_Position)
            {
              servoAngle = Arm_Roll_Min_Position;
            }
            // feed servoAngle to filter
            ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
            // Read Filter Output angle and set servo to it
            ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
            ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
        }
        
        // Handle arm pitch servo
        // TODO need to figure out why get some weird IMU outputs sometimes where the Yaw goes weird
        // when pitch or roll is above a certain value.
        {
            ImuServoControlDef & ImuServoCtrlUsing = ImuArmPitchServoControl;        
            int servoAngle;
            int filteredServoAngle;
            // Use pitch for the servo control
            int zeroBasedImuAngle = pitch - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.pitch);
            // Handle the case where the reference to current imu angle crosses over the -180/180 point by 
            // by assuming that the abs (current - reference) < 180 degrees.  Thus if the raw zeroBasedImuAngle is > 180 it is assumed to 
            // be because we have transitioned across the -180/180 boundary going form the reference to the current imu angle
            if (zeroBasedImuAngle > 179)
            {
              zeroBasedImuAngle -= 360;
            }
            else if (zeroBasedImuAngle < -179)
            {
              zeroBasedImuAngle += 360;
            }
            // Perform any scaling to more/less exagerate movement or compensate for constrained sensor movement
            // TODO need to figure out why IMU is showing more constrained movement than what is believed it should be
            zeroBasedImuAngle = scaleArmPitchAngle(zeroBasedImuAngle);

            // take the negative of the zeroBasedImuAngle as incresing arm servo pitch pitches the arm down
            // (counter clockwise when point of view is from the prop itself)
            // , whereas increasing arm Imu pitch 
            // happens when the arm pitch goes up (clockwise when point of view is from the prop itself)
            zeroBasedImuAngle = 0 - zeroBasedImuAngle;
            servoAngle = zeroBasedImuAngle + Arm_Pitch_Default_Position; // add the default position of the servo that zeroBasedImuAngle = 0 corresponds to
            // Limit  Angle
            if (servoAngle > Arm_Pitch_Max_Position)
            {
              servoAngle = Arm_Pitch_Max_Position;
            }      
            else if (servoAngle < Arm_Pitch_Min_Position)
            {
              servoAngle = Arm_Pitch_Min_Position;
            }
            // feed servoAngle to filter
            ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
            // Read Filter Output angle and set servo to it
            ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
            ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
        }


        // Get filtered Forearm IMU output
        forearmImuFilter.input(forearm_event.orientation.x, forearm_event.orientation.y, forearm_event.orientation.z);
        forearmImuFilter.output(heading, roll, pitch );
        // TODO need to figure out why get some weird IMU outputs sometimes where the Yaw goes weird
        // when pitch or roll is above a certain value.
        
        // Handle elbow pitch servo
        // TODO need to figure out why get some weird IMU outputs sometimes where the Yaw goes weird
        // when pitch or roll is above a certain value.
        {
            ImuServoControlDef & ImuServoCtrlUsing = ImuElbowPitchServoControl;        
            int servoAngle;
            int filteredServoAngle;
            unsigned long operationsExecutionTime;
            bool dbgShowAngleBetweenVectorsCalcInfo = false; // Set true for debug
            
            if (dbgShowAngleBetweenVectorsCalcInfo)
            {
                operationsExecutionTime = millis();
            }
            // float fpitchForearm = pitch;         
            // float fpitchArm = (float)armPitch;
            // float fpitchArmRef = (float)ImuArmPitchServoControl.ImuCtrlRefFrame.pitch;
            // float fpitchForearmRef = ImuServoCtrlUsing.ImuCtrlRefFrame.pitch;
            // zero based angle between forearm and arm =  angle between current forearm, arm vectors - angle between reference forearm, arm vectors
            float fangleBetweenCurrent = getAngleBetweenVectors(armHeading, armRoll, armPitch, heading,roll,pitch);
            float fangleBetweenReferences =  getAngleBetweenVectors(ImuArmPitchServoControl.ImuCtrlRefFrame.heading, ImuArmPitchServoControl.ImuCtrlRefFrame.roll, ImuArmPitchServoControl.ImuCtrlRefFrame.pitch, ImuServoCtrlUsing.ImuCtrlRefFrame.heading,ImuServoCtrlUsing.ImuCtrlRefFrame.roll,ImuServoCtrlUsing.ImuCtrlRefFrame.pitch);
            // float fpitch = fpitchForearm - fpitchArm - (fpitchForearmRef - fpitchArmRef);
            if (dbgShowAngleBetweenVectorsCalcInfo)
            {
                operationsExecutionTime = millis() - operationsExecutionTime;
                Serial.print(F("VectorAngl diff calcs took msec: "));
                Serial.println(operationsExecutionTime);
                // Looks to be around 2 to 4 milliseconds execution time so not insignificant
                // TODO  see if can reduce the calc execution time
            }
            
            int zeroBasedImuAngle = (int)(fangleBetweenCurrent - fangleBetweenReferences);
            // Handle the case where the reference to current imu angle crosses over the -180/180 point by 
            // by assuming that the abs (current - reference) < 180 degrees.  Thus if the raw zeroBasedImuAngle is > 180 it is assumed to 
            // be because we have transitioned across the -180/180 boundary going form the reference to the current imu angle
            if (zeroBasedImuAngle > 179)
            {
              zeroBasedImuAngle -= 360;
            }
            else if (zeroBasedImuAngle < -179)
            {
              zeroBasedImuAngle += 360;
            }
            // Perform any scaling to more/less exagerate movement or compensate for constrained sensor movement
            // TODO need to figure out why IMU is showing more constrained movement than what is believed it should be
            zeroBasedImuAngle = scaleElbowPitchAngle(zeroBasedImuAngle);
            
            // Take the negative of the zeroBasedImuAngle as  elbow servo pitch angle increases
            // when forearm pitch decreases holding arm pitch the same.
            // happens when the arm pitch goes up (clockwise when point of view is from the prop itself)
            zeroBasedImuAngle = 0 - zeroBasedImuAngle;
            
            servoAngle = zeroBasedImuAngle + Elbow_Pitch_Default_Position; // add the default position of the servo that zeroBasedImuAngle = 0 corresponds to
            // Limit  Angle
            if (servoAngle > Elbow_Pitch_Max_Position)
            {
              servoAngle = Elbow_Pitch_Max_Position;
            }      
            else if (servoAngle < Elbow_Pitch_Min_Position)
            {
              servoAngle = Elbow_Pitch_Min_Position;
            }
            // feed servoAngle to filter
            ImuServoCtrlUsing.servoFilter->input(servoAngle); // ignore torqueload for now
            // Read Filter Output angle and set servo to it
            ImuServoCtrlUsing.servoFilter->output(filteredServoAngle);
            ImuServoCtrlUsing.servo->device_write(filteredServoAngle);
        }
      }

      // Print the current servo settings for each item (can then be captured for replay)
      Serial.print(F("Head Vert,Horz,Mouth: "));
      Serial.print((int)ImuHeadVerticalServoControl.servo->device_read());
      Serial.print(F(" "));
      Serial.print((int)ImuHeadHorizontalServoControl.servo->device_read());
      Serial.print(F(" "));
      Serial.print((int)ImuMouthServoControl.servo->device_read());
      if (AdafruitImuHeadMouthIncludeArm)
      {
        Serial.print(F("Arm Y,R,P,ElbowP: "));
        Serial.print((int)ImuArmYawServoControl.servo->device_read());
        Serial.print(F(" "));
        Serial.print((int)ImuArmRollServoControl.servo->device_read());
        Serial.print(F(" "));
        Serial.print((int)ImuArmPitchServoControl.servo->device_read());
        Serial.print(F(" "));
        Serial.print((int)ImuElbowPitchServoControl.servo->device_read());
        
      }
      if (markAudioFileStartPoint)
      {
        Serial.print(F(" Started Audio File: "));
        Serial.print(AdafruitImuHeadMouthAudioFile);
      }
      Serial.println(F(""));
 
      if (AdafruitImuHeadMouthTimeout <= millis())
      {
        Serial.println(F("AdafruitImuHeadMouthTimeout to far behind. Resetting to current time"));
        AdafruitImuHeadMouthTimeout = millis();
      }
    }
  }  
#endif
 
}

void printGyro(float gx, float gy, float gz, bool isCalculated)
{
    if (isCalculated)
    {
      Serial.print(F("GyroCalc: "));
    }
    else
    {
      Serial.print(F("GyroRaw: "));
    }
    Serial.print(gx, 2);
    Serial.print(F(", "));
    Serial.print(gy, 2);
    Serial.print(F(", "));
    Serial.print(gz, 2);
    if (isCalculated)
    {
      Serial.print(F(" deg/s"));
    }
    Serial.println(F(""));
}

void printAccel(float ax, float ay, float az, bool isCalculated)
{  
    if (isCalculated)
    {
      Serial.print(F("AccelCalc: "));
    }
    else
    {
      Serial.print(F("AccelRaw: "));
    }
    Serial.print(ax, 2);
    Serial.print(F(", "));
    Serial.print(ay, 2);
    Serial.print(F(", "));
    Serial.print(az, 2);
    if (isCalculated)
    {
      Serial.print(F(" Gs"));
    }
    Serial.println(F(""));
}

void printMag(float mx, float my, float mz, bool isCalculated)
{  
    if (isCalculated)
    {
      Serial.print(F("MagCalc: "));
    }
    else
    {
      Serial.print(F("MagRaw: "));
    }
    Serial.print(mx, 2);
    Serial.print(F(", "));
    Serial.print(my, 2);
    Serial.print(F(", "));
    Serial.print(mz, 2);
    if (isCalculated)
    {
      Serial.print(F(" Gauss"));
    }
    Serial.println(F(""));
}

// Calculate pitch, roll, and heading.
// Pitch/roll calculations take from this app note:
// http://cache.freescale.com/files/sensors/doc/app_note/AN3461.pdf?fpsp=1
// Heading calculations taken from this app note:
// http://www51.honeywell.com/aero/common/documents/myaerospacecatalog-documents/Defense_Brochures-documents/Magnetic__Literature_Application_notes-documents/AN203_Compass_Heading_Using_Magnetometers.pdf
void printAttitude(float ax, float ay, float az, float mx, float my, float mz)
{
  float roll = atan2(ay, az);
  float pitch = atan2(-ax, sqrt(ay * ay + az * az));
  
  float heading;
  if (my == 0)
    heading = (mx < 0) ? PI : 0;
  else
    heading = atan2(mx, my);
    
  heading -= DECLINATION * PI / 180;
  
  if (heading > PI) heading -= (2 * PI);
  else if (heading < -PI) heading += (2 * PI);
  
  // Convert everything from radians to degrees:
  heading *= 180.0 / PI;
  pitch *= 180.0 / PI;
  roll  *= 180.0 / PI;
  
  Serial.print(F("Pitch, Roll, Heading: "));
  Serial.print(pitch, 2);
  Serial.print(F(", "));
  Serial.print(roll, 2);
  Serial.print(F(", "));
  Serial.println(heading, 2);
}

void getAttitude(float ax, float ay, float az, float mx, float my, float mz, float &pitch, float &roll, float &heading)
{
  roll = atan2(ay, az);
  pitch = atan2(-ax, sqrt(ay * ay + az * az));
  if (my == 0)
    heading = (mx < 0) ? PI : 0;
  else
    heading = atan2(mx, my);
    
  heading -= DECLINATION * PI / 180;
  
  if (heading > PI) heading -= (2 * PI);
  else if (heading < -PI) heading += (2 * PI);
  
  // Convert everything from radians to degrees:
  heading *= 180.0 / PI;
  pitch *= 180.0 / PI;
  roll  *= 180.0 / PI;
  
}

int scaleMouthAngle(int angle)
// scales the mouth open angle for the servo
// Used to make the mouth open wider than the normal human mouth or increase the degree of openness.
{
  if (abs(angle) <= 4) {
    // leave as is
  }
  else{
    angle = (angle * 10)/4;
  }
  return angle;
}

int scaleArmPitchAngle(int angle)
// scales the Arm pitch angle for the servo
// Used to make the Pitch increase more as Arm gets closer to max pitch up.
// This currently compensates for the actual movement being slightly constrained by the arm brace
{
    float angleF = angle;
    angleF *= 1.2;
    return angleF;
}

int scaleElbowPitchAngle(int angle)
// scales the Elbow pitch angle for the servo
// Used to make the Pitch increase more as Elbow gets closer to max pitch up.
// This currently compensates for the actual movement being slightly constrained by the arm brace
{
    float angleF = angle;
    angleF *= 1.2;
    return angleF;
}


float convertPitchForHeadOrientation( float pitch)
//  head cap showing starting level pointing straight forward as pitch of 179 slightly down for that point and -179 slightly up.
{
	if (pitch >= 0.0)
  {
  	pitch = pitch -180.0;
  }
  else
  {
  	pitch = pitch +180.0;
  }
  return pitch;
}


void quatToDirectEulerReading (imu::Quaternion quat, float &heading, float &roll, float &pitch )
// returns heading, roll, pitch in degrees from the passed quat
{
    float headingTmp;
    float rollTmp;
    float pitchTmp;
    // converts a quat reading from the IMU to a direct Euler reading as if read from the IMU 
    imu::Vector<3> eulerFromQuat = quat.toEuler();
    headingTmp = (float)eulerFromQuat.x()* 180.0/PI;
    rollTmp = (float)eulerFromQuat.y()* 180.0/PI;
    pitchTmp = (float)eulerFromQuat.z()* 180.0/PI;
    // Quat from IMU has
    // Pitch:
    // When arm pitches down (looking from prop) has pitch value increasing from 0 (looking from prop with arm pointing straight out ) to 180 
    // When arm pitches up pitch value decreasing from 0 to -180 
    // Yaw/heading -  North is the -180/180 point (with arm pointing straight out), and going clockwise/to the right (looking from prop) value decreasea from 180 to 0,
    //                and going counter clockwise increases from -180 to 0.  So basically going clockwise go from 180 down to 0 down to -180 (contiguous)
    // Roll -  (looking from prop with arm pointing straight out ) -  rotate counter clockwise/left goes from 0  (level pointing straight out)
    //          to 90 and then to 0,
    //          rotating clockwise/right goes from 0 to -90 then to 0
    // Direct Euler from IMU has
    // Yaw/heading (looking from prop) North is 180 and rotating to right goes up to 360 ,  rotating to left goes down to 0 (so south is 0/360 point)
    // Pitch: When arm pitches up (looking from prop)  has pitch value increasing from 0  (arm staight out) to 180  and when arm pitches down value decreasing from 0 to -180 
    // Roll:  looking from prop with arm straight out and level,   rotating counterclockwise/left Roll value decreases from 0 to -90
    //        and rotating clockwise/right roll value increased from 0 to 90
    if (headingTmp >= 0)
    {
        headingTmp = 360 - headingTmp;
    }
    else
    {
        headingTmp = 360 + headingTmp;
    }
    pitchTmp = -pitchTmp;
    rollTmp = -rollTmp;
    
    heading = headingTmp;
    roll = rollTmp;
    pitch = pitchTmp;
}

float getAngleBetweenVectors(float heading, float roll, float pitch, float heading1, float roll1, float pitch1)
// Gets the angle in degrees between two vectors given their heading(yaw), roll, and pitch values.
// Currently angle always returned as positive

// coordinate frame is positive x points out of page toward you,  positive y poinst to the right on page, positive z points up on page.
// and 0 pitch is z = 0 and 90 degree pitch is direction of positive z axis ,  and heading is clockwise in degress from x axis  (i.e. goes from 0 to 360)
{
    //#define debug_getAngleBetweenVectors 1
    double x,y,z,x1,y1,z1;  // x,y,z coordinate system
    double cosPitch;
    double dotProduct;
    double angleBetween;
    float pitchInRadians = pitch *  PI / 180.0;
    float pitch1InRadians = pitch1 *  PI / 180.0;
    float headingInRadians = heading *  PI / 180.0;
    float heading1InRadians = heading1 *  PI / 180.0;

    
    #ifdef debug_getAngleBetweenVectors
    Serial.print(F("getAngleBetweenVectors: heading,roll,pitch, heading1,roll1,pitch1: " ));
    Serial.print(heading);
    Serial.print(F(", "));
    Serial.print(roll);
    Serial.print(F(", "));
    Serial.print(pitch);
    Serial.print(F(", "));
    Serial.print(heading1);
    Serial.print(F(", "));
    Serial.print(roll1);
    Serial.print(F(", "));
    Serial.print(pitch1);
    Serial.println();
    #endif
    
    // Convert pitch, and yaw to an x,y,z vector (roll not needed) of length 1
    z = sin(pitchInRadians);
    cosPitch = cos(pitchInRadians);
    y = -sin(headingInRadians)* cosPitch;
    x = cos(headingInRadians) * cosPitch;
    
    z1 = sin(pitch1InRadians);
    cosPitch = cos(pitch1InRadians);
    y1 = -sin(heading1InRadians)* cosPitch;
    x1 = cos(heading1InRadians) * cosPitch;
    
    #ifdef debug_getAngleBetweenVectors
    Serial.print(F("getAngleBetweenVectors: x, y, z " ));
    Serial.print(x);
    Serial.print(F(", "));
    Serial.print(y);
    Serial.print(F(", "));
    Serial.print(z);
    Serial.print(F(", "));
    Serial.println();
    Serial.print(F("getAngleBetweenVectors: x1, y1, z1 " ));
    Serial.print(x1);
    Serial.print(F(", "));
    Serial.print(y1);
    Serial.print(F(", "));
    Serial.print(z1);
    Serial.println();
    #endif

    
    // Calculate the dot product
    dotProduct  =  (x*x1) + (y*y1) + (z*z1);
    // calculate the angle between the vectors of length 1 in degrees
    angleBetween = (acos(dotProduct) / PI) * 180.0;
    #ifdef debug_getAngleBetweenVectors
    Serial.print(F("getAngleBetweenVectors: dotproduct is " ));
    Serial.print(dotProduct);
    Serial.println();
    #endif
    if (angleBetween < 0)
    {
        angleBetween = 0 - angleBetween;
    }

    #ifdef debug_getAngleBetweenVectors
    Serial.print(F("getAngleBetweenVectors: Angle between these vectors in deg is : " ));
    Serial.println(angleBetween);    
    #endif
    return angleBetween;
}

void printSdCardInfo()
{
    /*  
      created  28 Mar 2011
      by Limor Fried
      modified 24 July 2020
      by Tom Igoe
    */
    Sd2Card card;
    SdVolume volume;
    SdFile root;
    
    // change this to match your SD shield or module;
    // Default SPI on Uno and Nano: pin 10
    // Arduino Ethernet shield: pin 4
    // Adafruit SD shields and modules: pin 10
    // Sparkfun SD shield: pin 8
    // MKRZero SD: SDCARD_SS_PIN
    
    const int chipSelect = SS;
    if (!card.init(SPI_HALF_SPEED, chipSelect)) {
      Serial.println(F("initialization failed. Things to check:"));
      Serial.println(F("* is a card inserted?"));
      Serial.println(F("* is your wiring correct?"));
      Serial.println(F("* did you change the chipSelect pin to match your shield or module?"));
    } 
    else 
    {
      Serial.println(F("Wiring is correct and a card is present."));
      // print the type of card
      Serial.println();
      Serial.print(F("Card type:         "));
      switch (card.type()) {
        case SD_CARD_TYPE_SD1:
          Serial.println(F("SD1"));
          break;
        case SD_CARD_TYPE_SD2:
          Serial.println(F("SD2"));
          break;
        case SD_CARD_TYPE_SDHC:
          Serial.println(F("SDHC"));
          break;
        default:
          Serial.println(F("Unknown"));
      }
      // Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32
      if (!volume.init(card)) {
        Serial.println(F("Could not find FAT16/FAT32 partition.\nMake sure you've formatted the card"));
      }
      else
      {
          Serial.print(F("Clusters:          "));
          Serial.println(volume.clusterCount());
          Serial.print(F("Blocks x Cluster:  "));
          Serial.println(volume.blocksPerCluster());
          Serial.print(F("Total Blocks:      "));
          Serial.println(volume.blocksPerCluster() * volume.clusterCount());
          Serial.println();
          // print the type and size of the first FAT-type volume
          uint32_t volumesize;
          Serial.print(F("Volume type is:    FAT"));
          Serial.println(volume.fatType(), DEC);
          volumesize = volume.blocksPerCluster();    // clusters are collections of blocks
          volumesize *= volume.clusterCount();       // we'll have a lot of clusters
          volumesize /= 2;                           // SD card blocks are always 512 bytes (2 blocks are 1KB)
          Serial.print(F("Volume size (Kb):  "));
          Serial.println(volumesize);
          Serial.print(F("Volume size (Mb):  "));
          volumesize /= 1024;
          Serial.println(volumesize);
          Serial.print(F("Volume size (Gb):  "));
          Serial.println((float)volumesize / 1024.0);
          Serial.println(F("\nFiles found on the card (name, date and size in bytes): "));
          root.openRoot(volume);
          // list all files in the card with date and size
          root.ls(LS_R | LS_DATE | LS_SIZE);
          root.close();
      }
    }
}

