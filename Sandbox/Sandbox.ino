 

// Prop Controller
#include <stdio.h> 
#include <string.h> 
#include "Arduino.h"
#include <PWMServo.h>
#include <inttypes.h>
#include <EEPROM.h>
#include "base_device.h"
#include "servo_device.h"
#include "relay_device.h"
#include "mp3_device.h"
#include "LED_device.h"
#include "devices_player.h"
#include "mp3_Player.h"
#include "indexed_values_reader.h"
#include "NormalArray_values_reader.h"
#include "ProgMemArray_values_reader.h"
#include <Wire.h>
#include <SPI.h>
//#define IncludeSparkFunLSM9DS1
#ifdef  IncludeSparkFunLSM9DS1
#include <SparkFunLSM9DS1.h>
#endif
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
//#define MadgwickFilterTestOps
#ifdef MadgwickFilterTestOps
#include <MadgwickAHRS.h>
#endif

#include "program_memory_misc.h"

const int  Per_Sensor_Cal_Data_Size_Eeprom = NUM_BNO055_OFFSET_REGISTERS;  // in bytes per sensor
const int  Num_Eeprom_Cal_Sensors = 2;
const int  Sensors_Cal_Data_Eeprom_adrs = 0x2ff;  // max is 0x3ff


enum e_pneumatic_back_position_def {
    PNEUMATIC_BACK_UPRIGHT  = HIGH,
    PNEUMATIC_BACK_BENTOVER = LOW
};

enum e_eye_LEDs_def {
    EYE_LEDS_OFF    = 0,
    EYE_LEDS_ON     = 255
};

enum e_voice_files {
    CHEWING_AT_HEAD_FILE            = 5,
    BLOOD_CURDLING_SCREAM_FILE      = 4,
    HISSING_FILE                    = 3,
    MORE_OFTEN_CHEWING_AT_HEAD_FILE = 6,
    DAYO_FILE                       = 7, 
    WEREWOLVES_OF_LONDON_FILE       = 8,
    SHAKE_SHAKE_SENORA_FILE         = 9
    
};

#define NUM_ARRAY_ENTRIES(a)  (sizeof(a)/sizeof(a[0]))
#define MKVoiceEntry(cmd, param) ((mp3_device::cmd << 8) | (param & 0x00ff))

// imported from excel spreadsheet
#if 0
const unsigned long device_play_interval = 500; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] = {	90	,100	,90	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,110	,110	,110	,110	,110	,110																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Head_Vertical_Rotation_values[] = {	90	,90	,90	,90	,90	,95	,90	,85	,90	,90	,90	,120	,120	,120	,120	,120	,120	,120	,100	,100	,100	,100	,100	,100																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Eyes_LEDs_values[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Pneumatic_Back_values[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT																																																																																															
};																																																																																																																							
																																																																																																																							
const uint16_t Voice_Player_values[] = {	MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)																																																																																															
};

#elif 0

// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.
const unsigned long device_play_interval = 100; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Head_Vertical_Rotation_values[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,90	,90	,90	,95	,95	,95	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Eyes_LEDs_values[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Pneumatic_Back_values[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER
};																																																																																																																																																																																				
																																																																																																																																																																																				
const uint16_t Voice_Player_values[] = {	MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)
};	

#elif 0
// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.

const unsigned long device_play_interval = 100; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Head_Vertical_Rotation_values[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Eyes_LEDs_values[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Pneumatic_Back_values[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Voice_Player_values[] = {	MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)
};																																																																																																																																																																														
																																																																																																																																																																																			
																																																																																																																				
#elif 0
// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.

const unsigned long device_play_interval = 100; // milliseconds

const uint16_t Head_Horizontal_Rotation_values[] = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Head_Vertical_Rotation_values[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Eyes_LEDs_values[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Pneumatic_Back_values[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER
};																																																																																																																																																																														
																																																																																																																																																																														
const uint16_t Voice_Player_values[] = {	MKVoiceEntry(START,  MORE_OFTEN_CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)
};	

#else
// Note that vertical servo change from 45 degrees to 90 degrees doesn't seem to work right but works if
// insert a 66 degree for a few intervals between them.
																																																																																																																																																																													
const unsigned long device_play_interval = 100; // milliseconds
const uint16_t Head_Horizontal_Rotation_values[] = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Head_Vertical_Rotation_values[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Eyes_LEDs_values[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Pneumatic_Back_values[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Voice_Player_values[] = {  MKVoiceEntry(START,  MORE_OFTEN_CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)																																																																					
};																																																																																																																																																																																																																																																															

#endif	

NormalArray_values_reader Head_Horizontal_Rotation_Reader = NormalArray_values_reader(Head_Horizontal_Rotation_values, NUM_ARRAY_ENTRIES(Head_Horizontal_Rotation_values));
NormalArray_values_reader Head_Vertical_Rotation_Reader = NormalArray_values_reader(Head_Vertical_Rotation_values, NUM_ARRAY_ENTRIES(Head_Vertical_Rotation_values));
NormalArray_values_reader Eyes_LEDs_Reader = NormalArray_values_reader(Eyes_LEDs_values, NUM_ARRAY_ENTRIES(Eyes_LEDs_values));
NormalArray_values_reader Pneumatic_Back_Reader = NormalArray_values_reader(Pneumatic_Back_values, NUM_ARRAY_ENTRIES(Pneumatic_Back_values));
NormalArray_values_reader Voice_Player_Reader = NormalArray_values_reader(Voice_Player_values, NUM_ARRAY_ENTRIES(Voice_Player_values));


#define DAYO_MOVEMENTS
#ifdef DAYO_MOVEMENTS
// Harry Belefonte DayO movements  // takes up about 32,000 bytes of program memory
const unsigned long DayO_play_interval = 50; // milliseconds
const uint16_t DayO_HeadVertRotation[] PROGMEM = {	80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,83	,84	,84	,84	,83	,83	,83	,82	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,83	,84	,85	,86	,86	,86	,86	,86	,86	,85	,84	,84	,84	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,85	,86	,87	,87	,87	,86	,86	,86	,85	,85	,84	,83	,82	,82	,82	,82	,82	,82	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,82	,82	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,80	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,84	,84	,84	,83	,83	,83	,82	,82	,82	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,86	,85	,85	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,84	,84	,84	,84	,84	,84	,85	,86	,86	,86	,85	,84	,84	,84	,83	,83	,83	,84	,85	,85	,84	,84	,84	,84	,84	,84	,85	,85	,85	,84	,84	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,83	,84	,85	,85	,85	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,83	,83	,83	,84	,85	,85	,85	,84	,84	,83	,83	,83	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,86	,85	,85	,85	,84	,84	,84	,84	,85	,85	,85	,84	,84	,84	,83	,83	,84	,84	,85	,86	,85	,85	,84	,84	,84	,84	,84	,84	,85	,84	,83	,82	,81	,80	,80	,80	,80	,80	,80	,80	,81	,81	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,81	,81	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,81	,81	,82	,82	,81	,82	,82	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,82	,82	,83	,83	,84	,84	,84	,83	,83	,84	,84	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,85	,84	,84	,83	,83	,82	,82	,83	,84	,85	,85	,85	,84	,84	,83	,83	,84	,85	,85	,86	,85	,84	,83	,82	,81	,81	,82	,83	,84	,85	,86	,85	,84	,84	,83	,84	,84	,85	,86	,86	,86	,84	,83	,82	,81	,81	,81	,81	,82	,83	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,82	,83	,83	,83	,83	,82	,82	,83	,83	,84	,84	,83	,82	,83	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,85	,85	,85	,85	,84	,84	,83	,83	,83	,84	,84	,85	,85	,85	,85	,85	,84	,84	,84	,85	,85	,86	,86	,86	,86	,85	,84	,83	,83	,83	,84	,85	,85	,85	,84	,84	,83	,83	,84	,85	,85	,84	,83	,81	,80	,79	,78	,79	,79	,80	,81	,80	,79	,78	,78	,79	,79	,79	,79	,78	,78	,78	,78	,79	,79	,79	,79	,78	,78	,77	,77	,76	,76	,76	,75	,75	,74	,74	,72	,72	,72	,71	,71	,71	,71	,71	,70	,69	,67	,66	,66	,66	,66	,66	,66	,66	,65	,64	,64	,63	,63	,63	,63	,62	,61	,60	,59	,57	,56	,55	,55	,56	,56	,57	,58	,60	,64	,69	,75	,78	,82	,84	,83	,82	,82	,82	,82	,82	,83	,83	,82	,82	,82	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,81	,82	,82	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,84	,85	,86	,86	,86	,85	,85	,84	,84	,84	,84	,84	,84	,83	,83	,83	,82	,82	,81	,81	,80	,80	,78	,77	,73	,71	,71	,71	,71	,71	,72	,72	,72	,71	,71	,71	,71	,71	,71	,71	,70	,68	,67	,66	,65	,65	,65	,65	,66	,66	,65	,64	,64	,64	,64	,63	,63	,63	,62	,61	,60	,59	,59	,59	,59	,59	,59	,59	,58	,57	,56	,56	,56	,56	,56	,56	,57	,57	,57	,56	,55	,55	,54	,55	,55	,55	,55	,58	,62	,67	,72	,76	,79	,81	,81	,80	,80	,79	,79	,80	,81	,81	,81	,81	,81	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,79	,79	,78	,78	,78	,78	,79	,81	,82	,83	,82	,82	,82	,82	,82	,83	,84	,85	,86	,87	,87	,86	,86	,85	,85	,84	,84	,85	,85	,85	,85	,84	,84	,84	,84	,83	,84	,84	,84	,84	,83	,83	,83	,83	,84	,84	,85	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,86	,85	,84	,83	,83	,83	,83	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,82	,82	,82	,82	,83	,84	,85	,86	,86	,86	,85	,85	,84	,84	,84	,85	,85	,85	,85	,84	,84	,85	,85	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,87	,87	,88	,88	,87	,87	,86	,85	,85	,85	,85	,86	,86	,86	,85	,85	,85	,85	,86	,87	,88	,88	,88	,87	,86	,85	,85	,84	,84	,84	,85	,85	,86	,86	,86	,86	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,85	,85	,86	,86	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,86	,86	,85	,85	,85	,85	,86	,86	,87	,87	,87	,87	,87	,86	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,87	,88	,87	,86	,86	,86	,87	,88	,88	,89	,89	,88	,88	,87	,87	,86	,87	,87	,88	,88	,89	,89	,88	,88	,87	,87	,87	,88	,88	,89	,89	,88	,88	,87	,87	,86	,86	,87	,88	,89	,89	,89	,88	,87	,86	,86	,86	,87	,87	,88	,87	,87	,86	,86	,85	,85	,86	,87	,88	,89	,89	,88	,87	,87	,86	,86	,87	,87	,88	,88	,87	,86	,85	,84	,84	,85	,85	,86	,88	,88	,87	,86	,86	,85	,86	,86	,86	,86	,85	,83	,80	,78	,77	,77	,77	,77	,77	,76	,75	,73	,72	,72	,72	,72	,73	,73	,73	,74	,74	,74	,75	,75	,75	,75	,75	,75	,75	,73	,71	,70	,70	,70	,70	,71	,71	,70	,69	,68	,66	,65	,64	,63	,62	,61	,60	,59	,58	,57	,57	,57	,58	,60	,64	,69	,74	,79	,85	,88	,89	,89	,88	,87	,86	,86	,86	,86	,86	,86	,87	,87	,88	,87	,86	,86	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,88	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,89	,88	,88	,88	,88	,88	,88	,89	,90	,90	,90	,90	,89	,88	,87	,87	,87	,86	,86	,86	,87	,88	,87	,85	,83	,82	,82	,82	,82	,82	,81	,80	,78	,78	,78	,78	,78	,77	,75	,72	,70	,68	,67	,67	,67	,67	,67	,67	,67	,67	,66	,66	,66	,66	,65	,65	,65	,66	,66	,65	,65	,64	,64	,64	,64	,64	,64	,63	,61	,59	,57	,56	,55	,55	,55	,55	,54	,53	,52	,51	,51	,51	,52	,53	,55	,60	,66	,74	,80	,84	,87	,88	,88	,87	,86	,86	,86	,87	,86	,85	,84	,83	,84	,85	,86	,85	,84	,83	,83	,83	,84	,84	,85	,86	,87	,89	,90	,90	,90	,89	,89	,88	,88	,88	,88	,88	,87	,86	,86	,86	,86	,86	,87	,87	,88	,89	,90	,89	,89	,88	,88	,88	,88	,87	,87	,88	,87	,87	,86	,85	,85	,84	,85	,85	,85	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,85	,84	,84	,84	,85	,85	,85	,86	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,84	,84	,83	,83	,83	,83	,84	,84	,84	,84	,84	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,87	,88	,89	,89	,89	,89	,88	,87	,87	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,86	,87	,87	,88	,88	,87	,87	,86	,86	,85	,85	,85	,85	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,85	,85	,84	,84	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,85	,85	,84	,84	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,84	,85	,85	,85	,84	,84	,84	,85	,85	,86	,87	,88	,89	,89	,88	,88	,88	,88	,88	,88	,88	,87	,87	,85	,83	,82	,82	,82	,82	,83	,85	,87	,88	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,86	,85	,86	,86	,86	,86	,86	,86	,85	,86	,86	,86	,86	,86	,85	,84	,83	,82	,82	,82	,82	,83	,83	,84	,84	,83	,83	,83	,83	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,83	,84	,83	,83	,84	,83	,83	,83	,82	,82	,82	,83	,85	,85	,84	,83	,82	,82	,83	,83	,83	,83	,83	,83	,83	,85	,86	,86	,86	,86	,86	,85	,85	,85	,84	,84	,84	,85	,85	,86	,85	,85	,85	,85	,85	,85	,86	,87	,88	,88	,88	,87	,86	,86	,86	,85	,86	,86	,86	,87	,86	,86	,86	,86	,86	,87	,87	,88	,89	,88	,87	,87	,86	,85	,85	,85	,86	,86	,86	,85	,84	,84	,84	,84	,85	,86	,86	,87	,88	,88	,87	,87	,87	,87	,86	,86	,86	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,84	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,82	,83	,84	,85	,85	,85	,85	,84	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,86	,87	,87	,87	,86	,86	,85	,84	,84	,84	,84	,85	,87	,88	,89	,88	,88	,87	,87	,87	,87	,88	,89	,89	,90	,89	,88	,88	,87	,87	,87	,87	,87	,88	,89	,90	,90	,89	,88	,88	,87	,87	,88	,89	,89	,89	,88	,87	,87	,86	,86	,86	,86	,86	,87	,87	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,83	,82	,81	,81	,80	,80	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,80	,80	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,79	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,80	,80	,79	,79	,79	,79	,79	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,79	,79	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,82	,84	,85	,87	,89	,91	,94	,96	,98	,99	,101	,103	,106	,107	,109	,110	,110	,110	,110	,110	,110	,109	,109	,109	,108	,108	,108	,108	,108	,108	,107	,107	,107	,107	,107	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,106	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,105	,106	,105	,105	,105	,105	,106	,106	,106	,106	,105	,105	,105	,105	,105	,105	,105	,105	,105	,104	,105	,105	,105	,105	,105	,105	,105	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,104	,103	,103	,103	,103	,104	,104	,103	,103	,103	,103	,103	,103	,103	,103	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
const uint16_t DayO_HeadHoriRotation[] PROGMEM = {	91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,95	,97	,98	,98	,98	,98	,97	,97	,97	,97	,97	,97	,96	,96	,96	,95	,95	,95	,95	,94	,94	,94	,94	,94	,93	,88	,81	,75	,72	,70	,70	,70	,71	,71	,72	,74	,81	,90	,100	,107	,109	,108	,107	,106	,105	,101	,94	,89	,86	,84	,84	,86	,86	,87	,87	,87	,88	,88	,88	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,92	,92	,92	,92	,92	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,93	,92	,93	,93	,92	,92	,92	,93	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,93	,92	,92	,92	,92	,92	,92	,92	,93	,92	,92	,92	,92	,92	,92	,92	,93	,93	,92	,93	,93	,92	,92	,93	,93	,93	,92	,93	,93	,93	,93	,93	,93	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,93	,94	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,90	,90	,89	,90	,90	,90	,91	,92	,93	,93	,93	,94	,94	,93	,93	,92	,92	,91	,90	,89	,89	,89	,89	,90	,90	,91	,92	,93	,94	,95	,95	,95	,95	,95	,94	,94	,93	,92	,91	,91	,90	,90	,90	,90	,91	,92	,92	,93	,94	,95	,95	,96	,96	,95	,95	,94	,93	,92	,92	,91	,90	,89	,89	,90	,90	,91	,92	,93	,94	,95	,95	,95	,95	,95	,94	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,92	,92	,93	,92	,93	,93	,92	,93	,93	,93	,93	,92	,92	,92	,92	,92	,93	,92	,92	,92	,92	,92	,92	,93	,92	,92	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,94	,95	,95	,96	,96	,97	,97	,96	,96	,95	,94	,93	,92	,91	,91	,90	,90	,90	,91	,91	,92	,93	,94	,95	,95	,95	,95	,94	,93	,92	,91	,90	,89	,88	,88	,88	,89	,89	,90	,91	,92	,93	,94	,94	,94	,94	,94	,94	,93	,92	,91	,90	,89	,88	,88	,88	,89	,90	,91	,92	,93	,95	,96	,97	,96	,96	,95	,95	,94	,92	,92	,91	,90	,89	,89	,90	,91	,92	,92	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,94	,94	,93	,94	,94	,93	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,94	,93	,93	,93	,93	,92	,92	,91	,89	,87	,86	,86	,87	,88	,89	,90	,91	,92	,93	,94	,93	,93	,92	,91	,90	,89	,89	,89	,89	,90	,91	,91	,92	,93	,93	,93	,93	,92	,92	,91	,90	,90	,89	,88	,87	,86	,86	,86	,87	,88	,88	,89	,90	,91	,92	,91	,91	,91	,91	,90	,89	,88	,87	,86	,86	,85	,85	,86	,87	,88	,89	,89	,90	,91	,91	,91	,92	,91	,90	,90	,89	,88	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,88	,89	,89	,88	,88	,89	,89	,88	,89	,89	,89	,88	,88	,89	,89	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,86	,83	,82	,81	,81	,82	,83	,84	,85	,86	,87	,88	,88	,87	,87	,86	,85	,83	,83	,83	,83	,83	,84	,85	,86	,87	,88	,88	,88	,88	,87	,86	,85	,84	,83	,82	,81	,80	,79	,80	,80	,81	,82	,83	,84	,86	,87	,88	,88	,88	,88	,87	,86	,85	,84	,83	,82	,81	,81	,80	,81	,82	,83	,84	,85	,86	,86	,87	,87	,86	,85	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,87	,86	,86	,86	,87	,87	,87	,87	,88	,89	,89	,89	,89	,89	,89	,89	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,92	,93	,93	,93	,93	,93	,93	,94	,95	,96	,96	,96	,96	,96	,95	,95	,95	,94	,93	,91	,90	,88	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,90	,91	,91	,91	,92	,93	,95	,96	,97	,97	,96	,96	,95	,93	,92	,90	,89	,88	,87	,87	,88	,88	,89	,90	,90	,91	,91	,91	,91	,92	,92	,93	,93	,93	,93	,93	,92	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,94	,94	,94	,94	,94	,94	,95	,95	,96	,96	,96	,96	,97	,97	,98	,98	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,98	,98	,98	,97	,97	,97	,97	,97	,97	,97	,97	,97	,96	,95	,94	,92	,91	,90	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,86	,84	,83	,83	,82	,81	,80	,79	,78	,78	,78	,78	,78	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,82	,82	,83	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,85	,85	,85	,85	,85	,84	,83	,83	,83	,84	,84	,85	,86	,87	,88	,89	,90	,90	,90	,89	,88	,87	,84	,83	,81	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,82	,83	,84	,85	,86	,88	,89	,90	,91	,91	,91	,91	,90	,90	,89	,88	,88	,87	,86	,86	,85	,85	,85	,84	,83	,82	,82	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,83	,84	,85	,86	,86	,87	,87	,88	,90	,92	,92	,92	,92	,92	,91	,90	,89	,87	,86	,85	,85	,85	,86	,87	,89	,90	,91	,91	,91	,90	,90	,89	,89	,88	,87	,86	,85	,85	,85	,85	,85	,86	,87	,88	,89	,89	,91	,92	,93	,93	,93	,92	,92	,92	,91	,90	,90	,89	,89	,88	,88	,89	,90	,92	,93	,94	,96	,97	,98	,98	,97	,96	,94	,92	,89	,87	,85	,83	,81	,80	,80	,80	,81	,82	,84	,85	,86	,87	,88	,87	,87	,88	,88	,87	,87	,86	,86	,87	,87	,89	,90	,93	,96	,99	,102	,105	,107	,109	,109	,109	,109	,109	,109	,109	,107	,106	,104	,101	,98	,94	,91	,89	,87	,86	,85	,83	,83	,83	,83	,83	,83	,83	,83	,83	,82	,82	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,80	,80	,78	,77	,76	,75	,74	,74	,75	,76	,77	,79	,80	,82	,83	,85	,85	,85	,85	,84	,83	,82	,81	,80	,78	,78	,77	,77	,77	,77	,78	,79	,80	,81	,83	,84	,85	,85	,84	,83	,82	,81	,79	,78	,77	,75	,74	,74	,75	,76	,77	,78	,80	,81	,82	,83	,84	,84	,83	,82	,81	,80	,78	,76	,75	,74	,74	,74	,75	,76	,77	,79	,80	,81	,82	,83	,84	,84	,83	,82	,81	,80	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,81	,81	,83	,83	,84	,84	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,85	,83	,80	,78	,76	,76	,76	,76	,75	,76	,76	,77	,78	,79	,79	,79	,79	,79	,79	,79	,80	,81	,81	,82	,82	,83	,83	,83	,84	,84	,85	,85	,85	,85	,84	,84	,83	,82	,82	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,80	,80	,80	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,80	,81	,82	,83	,84	,85	,85	,84	,83	,82	,80	,79	,78	,77	,77	,77	,78	,79	,80	,81	,82	,84	,85	,86	,86	,85	,85	,84	,83	,82	,81	,81	,81	,80	,80	,80	,80	,81	,81	,82	,82	,82	,82	,82	,83	,83	,84	,84	,85	,85	,85	,85	,86	,87	,87	,88	,88	,89	,88	,89	,89	,89	,89	,89	,90	,89	,90	,90	,90	,90	,91	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,91	,91	,90	,90	,90	,90	,89	,90	,90	,90	,90	,90	,90	,90	,90	,89	,88	,87	,86	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,84	,84	,83	,83	,83	,83	,84	,85	,88	,90	,91	,92	,91	,91	,90	,89	,87	,85	,84	,82	,81	,80	,79	,77	,76	,74	,72	,71	,69	,68	,68	,68	,69	,70	,70	,71	,72	,72	,73	,73	,74	,76	,77	,79	,81	,83	,85	,86	,88	,88	,89	,89	,89	,89	,88	,88	,87	,87	,86	,86	,84	,83	,81	,80	,79	,78	,77	,77	,76	,76	,76	,76	,76	,76	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,79	,80	,80	,81	,81	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,80	,78	,77	,76	,77	,78	,79	,81	,83	,86	,88	,90	,90	,90	,90	,88	,87	,86	,85	,84	,82	,81	,80	,79	,78	,78	,79	,80	,82	,83	,85	,88	,89	,90	,90	,89	,88	,87	,86	,84	,83	,81	,80	,79	,78	,78	,78	,79	,79	,80	,80	,81	,82	,82	,82	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,82	,82	,81	,81	,82	,82	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,80	,79	,79	,79	,80	,82	,83	,85	,86	,87	,89	,90	,91	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,90	,87	,85	,82	,80	,79	,78	,78	,77	,77	,77	,77	,78	,77	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,78	,78	,78	,78	,78	,78	,78	,78	,79	,78	,78	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,80	,81	,83	,84	,84	,84	,83	,82	,81	,80	,79	,80	,80	,81	,82	,83	,85	,87	,88	,88	,88	,87	,87	,86	,85	,83	,82	,81	,80	,80	,80	,80	,81	,82	,83	,84	,86	,87	,89	,90	,90	,90	,90	,89	,88	,87	,85	,84	,82	,81	,81	,81	,82	,83	,85	,86	,88	,89	,91	,91	,91	,90	,90	,88	,86	,85	,83	,82	,82	,82	,82	,84	,85	,86	,86	,86	,86	,85	,84	,83	,83	,84	,84	,84	,85	,85	,85	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,84	,82	,79	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,84	,86	,88	,89	,90	,91	,90	,90	,89	,88	,87	,86	,85	,84	,84	,84	,85	,86	,87	,88	,90	,92	,93	,94	,94	,94	,93	,92	,90	,88	,87	,84	,82	,81	,80	,79	,79	,79	,81	,82	,83	,85	,87	,89	,90	,92	,92	,90	,89	,88	,87	,85	,83	,82	,80	,79	,79	,79	,79	,80	,82	,83	,84	,86	,87	,88	,88	,88	,86	,85	,83	,82	,82	,81	,81	,81	,81	,80	,80	,81	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,83	,82	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,81	,81	,82	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,81	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,82	,81	,81	,80	,80	,79	,79	,79	,79	,79	,78	,78	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,78	,78	,78	,79	,79	,79	,79	,79	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,82	,82	,82	,82	,82	,83	,83	,84	,84	,84	,85	,85	,86	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,94	,94	,94
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
const uint16_t DayO_MouthRotation[] PROGMEM = {	110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,110	,109	,109	,109	,109	,109	,110	,109	,109	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,92	,88	,87	,90	,90	,90	,95	,105	,110	,110	,110	,110	,110	,104	,94	,88	,85	,87	,92	,97	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,98	,92	,99	,106	,102	,93	,96	,103	,109	,102	,95	,98	,109	,110	,110	,110	,102	,96	,93	,91	,93	,94	,95	,99	,104	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,106	,95	,91	,97	,101	,104	,101	,100	,102	,105	,106	,108	,108	,107	,104	,96	,94	,96	,99	,104	,105	,106	,106	,107	,109	,109	,109	,106	,100	,95	,96	,99	,103	,105	,106	,107	,107	,107	,105	,99	,96	,99	,104	,104	,97	,95	,97	,100	,104	,108	,110	,108	,105	,100	,95	,97	,99	,101	,102	,104	,106	,108	,110	,110	,109	,101	,96	,92	,93	,95	,96	,96	,96	,96	,96	,97	,97	,100	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,110	,110	,110	,110	,109	,109	,109	,109	,109	,109	,108	,108	,108	,101	,93	,95	,96	,98	,98	,101	,105	,109	,109	,109	,109	,110	,110	,109	,110	,110	,109	,110	,110	,110	,110	,110	,109	,109	,109	,109	,108	,99	,95	,99	,103	,106	,104	,101	,103	,104	,103	,97	,98	,100	,97	,96	,98	,99	,104	,107	,106	,104	,104	,102	,101	,105	,110	,105	,102	,97	,92	,96	,101	,100	,97	,94	,94	,98	,95	,90	,90	,95	,103	,102	,94	,93	,94	,97	,105	,104	,95	,93	,94	,98	,92	,90	,94	,98	,103	,110	,110	,110	,110	,110	,110	,110	,104	,100	,95	,96	,100	,104	,106	,98	,92	,90	,92	,94	,100	,99	,93	,92	,92	,93	,93	,92	,94	,97	,99	,99	,91	,92	,93	,91	,90	,91	,92	,93	,94	,95	,97	,99	,99	,99	,100	,100	,101	,101	,102	,102	,103	,102	,102	,102	,102	,102	,102	,98	,85	,81	,83	,89	,92	,85	,82	,85	,94	,103	,104	,96	,87	,82	,84	,89	,93	,94	,95	,96	,97	,96	,94	,87	,81	,80	,82	,86	,90	,93	,95	,96	,97	,96	,94	,90	,87	,81	,80	,80	,80	,82	,86	,91	,95	,97	,99	,101	,102	,102	,102	,98	,93	,86	,81	,82	,85	,88	,89	,91	,93	,95	,96	,97	,98	,98	,99	,101	,102	,104	,104	,104	,105	,105	,102	,101	,100	,96	,93	,90	,87	,83	,80	,80	,80	,80	,80	,80	,82	,85	,87	,89	,91	,92	,94	,95	,96	,97	,98	,99	,100	,102	,102	,103	,104	,105	,106	,107	,108	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,93	,92	,102	,102	,94	,92	,95	,98	,103	,102	,95	,87	,87	,92	,95	,99	,103	,107	,109	,105	,98	,93	,93	,100	,106	,109	,110	,109	,109	,109	,106	,97	,93	,98	,104	,103	,94	,93	,97	,101	,102	,92	,91	,94	,95	,90	,90	,99	,110	,110	,110	,110	,110	,110	,98	,91	,89	,89	,89	,89	,90	,92	,96	,104	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,87	,81	,88	,93	,100	,104	,103	,92	,86	,92	,100	,104	,104	,90	,86	,94	,86	,84	,89	,91	,97	,106	,108	,103	,91	,88	,93	,93	,86	,86	,88	,96	,102	,104	,104	,104	,101	,87	,81	,82	,88	,98	,103	,99	,88	,84	,84	,95	,104	,104	,104	,104	,104	,99	,83	,80	,80	,80	,86	,94	,103	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,94	,97	,101	,103	,106	,109	,110	,104	,96	,101	,106	,110	,110	,108	,100	,102	,105	,101	,98	,101	,104	,99	,94	,101	,104	,98	,103	,104	,98	,92	,91	,97	,106	,110	,110	,110	,110	,110	,101	,94	,98	,100	,97	,89	,95	,100	,97	,92	,88	,90	,88	,86	,95	,96	,92	,89	,91	,95	,89	,80	,81	,90	,95	,99	,103	,101	,89	,85	,88	,94	,99	,104	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,90	,86	,89	,94	,98	,101	,104	,106	,100	,91	,91	,99	,105	,101	,93	,93	,101	,103	,94	,91	,98	,103	,94	,90	,97	,102	,110	,108	,95	,91	,88	,88	,98	,103	,109	,110	,110	,110	,104	,95	,97	,103	,102	,89	,93	,102	,101	,92	,93	,99	,94	,88	,96	,97	,91	,91	,91	,93	,92	,80	,83	,94	,104	,110	,110	,110	,108	,92	,80	,84	,99	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,98	,99	,103	,104	,107	,110	,110	,107	,96	,90	,92	,95	,98	,98	,99	,100	,103	,101	,87	,82	,85	,88	,88	,88	,89	,92	,94	,86	,80	,82	,84	,85	,85	,83	,83	,83	,81	,80	,80	,80	,80	,80	,80	,84	,85	,80	,80	,80	,80	,80	,80	,80	,81	,82	,82	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,97	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,90	,93	,99	,100	,96	,92	,94	,99	,99	,99	,99	,100	,102	,97	,90	,91	,97	,101	,104	,105	,105	,104	,99	,91	,94	,99	,100	,102	,104	,104	,106	,106	,105	,99	,96	,101	,103	,100	,93	,93	,99	,104	,107	,109	,107	,95	,92	,96	,101	,104	,106	,106	,108	,108	,104	,103	,104	,104	,106	,108	,108	,109	,110	,110	,107	,98	,88	,90	,96	,102	,104	,107	,110	,110	,110	,110	,107	,104	,95	,87	,88	,92	,99	,104	,104	,98	,87	,89	,100	,108	,110	,110	,110	,109	,105	,90	,82	,84	,88	,89	,91	,93	,94	,87	,80	,80	,89	,94	,99	,105	,108	,105	,93	,80	,80	,80	,80	,82	,88	,92	,96	,87	,80	,80	,80	,80	,80	,80	,80	,80	,93	,100	,95	,80	,80	,80	,80	,80	,80	,80	,80	,97	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,110	,110	,110	,104	,104	,104	,102	,103	,102	,104	,106	,109	,101	,93	,95	,100	,107	,110	,110	,110	,110	,101	,95	,100	,104	,110	,110	,110	,110	,110	,110	,104	,96	,104	,107	,106	,97	,95	,98	,100	,103	,103	,102	,102	,97	,93	,97	,100	,102	,104	,107	,109	,107	,100	,95	,96	,100	,106	,108	,109	,110	,110	,108	,100	,93	,96	,106	,110	,110	,110	,110	,110	,110	,110	,110	,102	,90	,95	,98	,100	,98	,98	,99	,99	,99	,99	,99	,99	,99	,100	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,97	,102	,107	,110	,101	,95	,102	,107	,100	,95	,102	,105	,97	,94	,99	,107	,110	,106	,100	,96	,104	,109	,101	,98	,104	,102	,94	,96	,103	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,90	,95	,104	,104	,99	,99	,101	,103	,104	,106	,107	,105	,98	,98	,102	,105	,107	,107	,107	,108	,108	,105	,101	,104	,106	,108	,108	,108	,109	,110	,110	,110	,104	,96	,93	,96	,102	,105	,107	,108	,109	,110	,108	,102	,97	,100	,106	,110	,110	,110	,110	,110	,110	,109	,101	,99	,102	,105	,108	,110	,110	,110	,110	,110	,104	,98	,102	,105	,110	,110	,110	,110	,110	,110	,110	,108	,95	,92	,95	,97	,99	,101	,103	,104	,104	,103	,103	,103	,103	,103	,103	,103	,104	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,104	,107	,107	,110	,110	,110	,110	,110	,103	,103	,105	,104	,104	,105	,109	,106	,102	,105	,109	,110	,109	,100	,99	,103	,104	,104	,101	,101	,100	,95	,95	,96	,98	,100	,100	,101	,103	,106	,101	,95	,98	,101	,102	,103	,95	,96	,102	,98	,92	,90	,91	,94	,94	,94	,94	,95	,100	,107	,110	,110	,110	,108	,109	,110	,109	,109	,104	,92	,98	,104	,104	,104	,104	,104	,104	,101	,95	,100	,104	,104	,105	,105	,103	,102	,96	,92	,99	,104	,105	,107	,107	,107	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,103	,103	,105	,110	,110	,110	,98	,91	,95	,101	,107	,110	,110	,110	,110	,110	,106	,95	,96	,103	,110	,110	,110	,110	,110	,110	,104	,105	,110	,110	,110	,110	,110	,110	,97	,89	,95	,93	,91	,98	,102	,107	,110	,110	,102	,91	,92	,101	,109	,110	,110	,97	,90	,96	,104	,108	,110	,110	,108	,93	,83	,81	,86	,98	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,92	,93	,101	,107	,110	,110	,110	,110	,104	,91	,90	,98	,104	,107	,107	,92	,83	,89	,95	,99	,103	,104	,104	,98	,85	,85	,92	,91	,96	,104	,109	,110	,110	,110	,110	,106	,92	,89	,97	,107	,110	,110	,109	,109	,106	,94	,91	,101	,104	,103	,96	,87	,88	,95	,99	,89	,87	,91	,94	,100	,104	,101	,86	,82	,88	,95	,88	,80	,80	,80	,83	,94	,100	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,92	,81	,87	,95	,97	,97	,99	,101	,103	,97	,89	,91	,93	,96	,99	,100	,104	,105	,108	,106	,92	,83	,84	,90	,94	,96	,96	,99	,103	,93	,82	,82	,83	,85	,89	,91	,93	,89	,80	,80	,80	,80	,83	,87	,90	,90	,89	,80	,80	,80	,80	,88	,97	,99	,100	,101	,100	,89	,80	,80	,80	,80	,80	,82	,91	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,108	,104	,98	,98	,98	,98	,90	,86	,94	,96	,101	,104	,104	,102	,93	,91	,96	,98	,102	,105	,106	,105	,99	,92	,94	,98	,102	,104	,104	,105	,107	,108	,105	,100	,91	,84	,92	,94	,88	,86	,86	,87	,94	,95	,95	,96	,94	,88	,88	,90	,91	,91	,91	,96	,102	,101	,93	,81	,80	,83	,87	,93	,96	,99	,104	,105	,102	,100	,97	,96	,99	,101	,102	,104	,104	,103	,101	,98	,87	,83	,88	,90	,94	,96	,97	,97	,96	,89	,82	,88	,94	,100	,104	,106	,106	,97	,82	,80	,80	,80	,85	,84	,84	,86	,87	,85	,81	,81	,98	,107	,109	,110	,110	,110	,110	,98	,80	,80	,87	,90	,95	,98	,97	,94	,80	,80	,80	,89	,102	,110	,110	,110	,110	,110	,98	,80	,80	,80	,80	,84	,90	,97	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,97	,100	,100	,98	,90	,88	,92	,87	,86	,88	,86	,91	,94	,94	,94	,87	,84	,86	,87	,88	,90	,92	,93	,95	,93	,81	,80	,80	,89	,97	,102	,108	,110	,110	,110	,109	,103	,98	,98	,100	,100	,102	,104	,104	,105	,106	,104	,98	,95	,98	,100	,104	,107	,109	,110	,110	,103	,93	,91	,93	,94	,98	,100	,101	,104	,104	,102	,98	,97	,104	,110	,110	,110	,110	,110	,110	,110	,108	,95	,91	,96	,99	,99	,97	,97	,98	,100	,104	,108	,100	,90	,94	,99	,102	,104	,106	,110	,110	,109	,104	,108	,110	,110	,110	,110	,110	,110	,108	,96	,92	,99	,101	,99	,96	,95	,99	,99	,97	,98	,99	,94	,92	,95	,101	,105	,98	,98	,102	,101	,96	,90	,95	,100	,93	,86	,87	,93	,97	,95	,95	,98	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,99	,98	,104	,104	,98	,100	,105	,104	,102	,105	,106	,107	,109	,110	,104	,96	,94	,99	,104	,105	,107	,107	,105	,100	,95	,97	,99	,102	,104	,104	,105	,107	,106	,103	,97	,96	,99	,104	,108	,110	,110	,110	,110	,110	,102	,93	,93	,95	,98	,101	,103	,104	,105	,107	,107	,105	,104	,105	,106	,106	,109	,110	,109	,108	,108	,103	,96	,90	,89	,96	,100	,104	,109	,109	,110	,109	,105	,100	,94	,92	,95	,97	,98	,100	,100	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,101	,105	,110	,110	,110	,110	,110	,110	,102	,96	,99	,101	,98	,88	,94	,100	,98	,93	,93	,97	,97	,92	,90	,96	,102	,106	,107	,99	,98	,102	,104	,108	,102	,93	,96	,102	,99	,93	,98	,100	,97	,91	,91	,97	,101	,106	,110	,110	,110	,107	,98	,96	,101	,102	,95	,95	,102	,103	,102	,91	,86	,93	,99	,101	,101	,104	,107	,110	,110	,110	,110	,110	,108	,110	,110	,110	,110	,110	,107	,104	,105	,106	,104	,100	,101	,104	,104	,104	,104	,101	,101	,104	,106	,110	,110	,105	,103	,103	,99	,96	,97	,98	,98	,98	,98	,98	,98	,98	,98	,99	,99	,99	,99	,99	,100	,101	,104	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,92	,94	,101	,105	,110	,110	,110	,99	,99	,108	,109	,105	,102	,92	,93	,101	,101	,91	,87	,94	,100	,104	,105	,96	,92	,97	,92	,92	,104	,110	,110	,110	,110	,110	,110	,110	,99	,96	,105	,106	,97	,98	,102	,101	,97	,95	,102	,104	,98	,94	,100	,106	,107	,97	,96	,102	,106	,97	,91	,95	,102	,110	,110	,110	,102	,84	,88	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,94	,96	,101	,104	,104	,107	,109	,110	,109	,98	,89	,95	,103	,104	,93	,88	,94	,100	,100	,89	,81	,86	,96	,102	,99	,89	,87	,89	,89	,89	,88	,90	,90	,86	,88	,95	,98	,88	,80	,80	,88	,93	,86	,80	,86	,92	,88	,86	,87	,85	,85	,84	,84	,103	,110	,107	,98	,98	,110	,108	,102	,99	,99	,108	,110	,110	,110	,110	,95	,102	,110	,110	,96	,80	,83	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,95	,82	,87	,90	,90	,90	,91	,92	,92	,91	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,102	,107	,104	,100	,103	,101	,96	,88	,87	,91	,91	,86	,88	,88	,81	,80	,80	,88	,96	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,100	,100	,103	,105	,109	,110	,110	,110	,104	,96	,91	,93	,98	,101	,103	,104	,106	,108	,104	,100	,93	,90	,93	,96	,100	,102	,104	,107	,106	,100	,94	,95	,100	,103	,100	,91	,88	,90	,91	,94	,97	,101	,104	,105	,108	,109	,108	,104	,95	,89	,91	,93	,96	,99	,101	,104	,106	,108	,110	,110	,110	,110	,110	,109	,104	,93	,88	,86	,84	,85	,86	,88	,90	,93	,96	,99	,101	,103	,104	,104	,105	,106	,108	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,95	,92	,96	,99	,103	,104	,104	,105	,105	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,85	,85	,94	,101	,96	,89	,99	,103	,95	,94	,102	,101	,96	,99	,100	,96	,93	,95	,99	,95	,88	,91	,97	,100	,98	,95	,93	,94	,95	,93	,94	,93	,88	,94	,98	,97	,102	,110	,110	,110	,103	,104	,110	,110	,110	,110	,106	,110	,110	,110	,110	,105	,101	,108	,110	,105	,102	,105	,106	,104	,101	,102	,106	,108	,102	,97	,99	,104	,104	,98	,94	,92	,93	,95	,95	,96	,99	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,104	,104	,106	,109	,109	,104	,103	,105	,106	,109	,110	,110	,110	,110	,106	,100	,96	,97	,98	,99	,99	,99	,99	,99	,101	,103	,104	,104	,99	,93	,91	,92	,95	,97	,99	,101	,102	,104	,105	,106	,106	,107	,104	,97	,92	,88	,87	,88	,89	,90	,94	,98	,102	,104	,106	,108	,108	,109	,109	,109	,109	,108	,105	,104	,104	,101	,98	,95	,92	,89	,85	,85	,88	,90	,92	,95	,97	,100	,103	,105	,106	,107	,108	,109	,109	,107	,104	,101	,97	,94	,91	,89	,87	,86	,86	,86	,86	,87	,90	,92	,94	,96	,98	,100	,101	,102	,103	,103	,104	,104	,105	,105	,106	,107	,108	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,109	,109	,109	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,109	,109	,109	,109	,108	,108	,108	,107	,106	,107	,106	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,108	,107	,107	,108	,108	,108	,108	,108	,108	,108	,108	,108	,108	,108	,107	,106	,105	,105	,105	,105	,106	,106	,106	,105	,104	,104	,104	,104	,104	,104	,103	,104	,104	,104	,104	,104	,104	,104	,104	,103	,103	,103	,103	,103	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,101	,101	,101	,101	,101	,101	,101	,100	,100	,100	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,102	,101	,101	,101	,101	,101	,101	,102	,102	,102	,101	,102	,101	,101	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																															
const uint16_t DayO_Voice_Player[] PROGMEM = {	MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(START, 7)	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 
};
// NO EyeLEDs or Back used in this. Those are done manually at the start.
ProgMemArray_values_reader DayO_HeadVertRotation_Reader;
ProgMemArray_values_reader DayO_HeadHoriRotation_Reader;
ProgMemArray_values_reader DayO_MouthRotation_Reader;
ProgMemArray_values_reader DayO_Voice_Player_Reader;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																												
#endif

#define WEREWOLVESLONDON_MOVEMENTS
#ifdef WEREWOLVESLONDON_MOVEMENTS
																																																																																																																																																																																																																																																															
// Werewolves of London Movements // takes up about 33,000 bytes of program memory
const unsigned long WerewolvesLondon_play_interval = 50; // milliseconds
const uint16_t WerewolvesLondon_HeadHoriRotation[] PROGMEM = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,90	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,89	,90	,92	,93	,95	,97	,98	,98	,98	,97	,95	,94	,92	,90	,88	,86	,85	,84	,85	,86	,87	,88	,89	,91	,92	,95	,97	,99	,99	,99	,98	,97	,95	,93	,91	,89	,87	,85	,84	,82	,81	,82	,83	,84	,85	,86	,87	,88	,88	,89	,89	,89	,89	,89	,90	,90	,89	,89	,89	,89	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,88	,86	,84	,82	,80	,77	,75	,74	,73	,74	,75	,76	,77	,79	,80	,82	,84	,86	,88	,90	,91	,92	,92	,91	,90	,89	,87	,85	,84	,82	,80	,78	,77	,77	,78	,79	,80	,81	,83	,84	,85	,87	,89	,91	,92	,92	,92	,91	,91	,90	,88	,87	,86	,84	,83	,81	,80	,79	,80	,81	,82	,83	,84	,85	,87	,88	,90	,91	,91	,91	,90	,89	,88	,87	,86	,84	,83	,81	,80	,80	,81	,82	,83	,84	,85	,87	,89	,91	,92	,94	,94	,93	,93	,91	,90	,88	,87	,86	,84	,83	,81	,80	,79	,79	,81	,83	,85	,87	,88	,89	,90	,91	,92	,93	,93	,92	,91	,89	,88	,86	,85	,83	,81	,79	,77	,77	,79	,80	,81	,82	,84	,85	,87	,88	,91	,94	,95	,95	,95	,94	,92	,91	,88	,86	,85	,83	,81	,81	,81	,83	,85	,87	,89	,91	,94	,96	,101	,105	,109	,111	,111	,111	,110	,110	,110	,109	,109	,109	,110	,109	,109	,109	,108	,108	,107	,107	,107	,107	,108	,108	,108	,108	,108	,107	,105	,102	,97	,93	,88	,83	,79	,76	,74	,72	,72	,73	,73	,74	,74	,74	,74	,73	,73	,73	,73	,73	,73	,74	,74	,74	,74	,74	,73	,73	,73	,73	,74	,74	,75	,76	,79	,82	,86	,89	,92	,95	,97	,98	,98	,97	,96	,96	,94	,92	,90	,88	,86	,85	,83	,83	,84	,86	,87	,89	,91	,94	,97	,99	,102	,104	,104	,104	,103	,100	,97	,94	,91	,89	,86	,84	,81	,79	,78	,79	,81	,83	,85	,87	,89	,91	,93	,95	,95	,95	,94	,92	,91	,89	,87	,85	,83	,81	,79	,78	,77	,79	,81	,83	,85	,87	,89	,91	,92	,92	,91	,91	,91	,90	,89	,89	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,91	,93	,94	,93	,92	,91	,90	,87	,84	,81	,80	,79	,80	,81	,81	,82	,82	,83	,84	,84	,85	,85	,84	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,85	,85	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,87	,88	,90	,92	,95	,98	,100	,100	,100	,99	,97	,95	,92	,90	,87	,85	,82	,80	,79	,79	,80	,83	,85	,86	,88	,91	,93	,95	,96	,96	,96	,94	,92	,89	,87	,85	,83	,82	,81	,81	,82	,82	,82	,82	,83	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,87	,89	,92	,95	,98	,100	,103	,106	,107	,106	,105	,104	,101	,98	,96	,93	,90	,87	,85	,83	,80	,79	,79	,81	,84	,86	,88	,91	,93	,94	,96	,96	,95	,94	,93	,92	,91	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,92	,93	,95	,96	,99	,101	,104	,106	,106	,105	,104	,102	,99	,97	,94	,91	,88	,85	,82	,79	,78	,78	,80	,82	,84	,85	,87	,88	,89	,90	,90	,89	,88	,87	,86	,86	,85	,85	,84	,84	,84	,84	,83	,82	,82	,81	,80	,80	,80	,80	,80	,81	,81	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,85	,85	,87	,89	,91	,93	,96	,98	,100	,101	,101	,100	,98	,96	,94	,91	,89	,86	,85	,83	,81	,79	,79	,81	,83	,84	,85	,85	,85	,85	,84	,84	,84	,83	,83	,81	,80	,80	,81	,82	,82	,83	,84	,84	,85	,85	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,87	,87	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,89	,90	,90	,90	,90	,90	,90	,90	,90	,88	,86	,84	,82	,81	,80	,81	,82	,83	,84	,84	,84	,84	,84	,85	,85	,85	,84	,84	,83	,83	,83	,83	,83	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,89	,91	,92	,93	,93	,93	,92	,90	,88	,85	,82	,80	,79	,80	,82	,84	,86	,88	,89	,91	,91	,91	,90	,88	,86	,84	,83	,82	,82	,82	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,87	,87	,88	,88	,88	,88	,88	,87	,87	,86	,86	,85	,86	,88	,91	,93	,95	,96	,95	,93	,92	,91	,89	,86	,84	,83	,83	,83	,84	,84	,84	,84	,84	,84	,84	,84	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,88	,90	,92	,93	,94	,94	,94	,93	,92	,91	,90	,89	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,91	,91	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,90	,89	,87	,86	,85	,85	,85	,86	,87	,89	,91	,93	,95	,97	,98	,99	,98	,97	,96	,95	,93	,92	,90	,89	,88	,87	,86	,85	,85	,87	,88	,90	,91	,92	,94	,95	,96	,97	,98	,97	,96	,95	,93	,92	,91	,89	,88	,87	,87	,87	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,88	,88	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,90	,91	,92	,94	,97	,100	,101	,102	,102	,101	,100	,98	,96	,93	,90	,88	,85	,83	,81	,79	,79	,81	,83	,85	,88	,90	,92	,94	,96	,97	,97	,95	,94	,92	,91	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,90	,90	,90	,91	,92	,93	,95	,96	,96	,95	,94	,91	,88	,85	,82	,80	,79	,78	,78	,78	,78	,80	,82	,85	,87	,89	,90	,92	,93	,95	,97	,99	,100	,101	,99	,97	,95	,92	,90	,87	,85	,83	,81	,79	,77	,77	,78	,81	,83	,85	,87	,89	,90	,92	,92	,92	,92	,91	,89	,88	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,86	,86	,86	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,89	,90	,93	,95	,96	,97	,98	,98	,98	,96	,95	,93	,91	,89	,87	,84	,82	,81	,82	,83	,84	,85	,87	,89	,89	,89	,89	,89	,88	,88	,87	,86	,85	,85	,84	,84	,83	,83	,83	,83	,83	,84	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,87	,87	,86	,86	,86	,86	,86	,87	,87	,86	,86	,86	,87	,87	,86	,86	,86	,86	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,89	,90	,92	,94	,96	,97	,97	,96	,95	,93	,91	,89	,86	,83	,80	,79	,80	,81	,82	,84	,86	,89	,90	,91	,90	,90	,89	,88	,87	,87	,86	,85	,84	,83	,83	,82	,82	,82	,82	,82	,82	,83	,83	,83	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,87	,89	,91	,93	,94	,96	,98	,100	,101	,101	,100	,98	,96	,94	,92	,90	,88	,86	,84	,82	,80	,80	,81	,83	,84	,85	,86	,86	,86	,86	,86	,85	,84	,84	,84	,84	,85	,84	,84	,83	,84	,84	,84	,85	,85	,86	,87	,87	,87	,87	,88	,89	,92	,94	,97	,100	,102	,103	,104	,103	,103	,102	,102	,101	,101	,101	,100	,101	,101	,102	,103	,103	,103	,104	,104	,104	,104	,102	,100	,97	,95	,93	,91	,89	,88	,88	,87	,87	,86	,86	,85	,85	,84	,84	,83	,83	,83	,83	,84	,85	,87	,90	,91	,93	,95	,96	,95	,95	,93	,91	,90	,88	,86	,84	,82	,81	,80	,80	,82	,83	,84	,85	,86	,88	,89	,90	,93	,95	,95	,95	,94	,93	,93	,93	,93	,93	,93	,93	,92	,92	,93	,93	,93	,93	,92	,92	,92	,91	,92	,93	,94	,94	,94	,94	,93	,92	,91	,88	,86	,83	,81	,78	,75	,73	,71	,71	,71	,72	,74	,76	,78	,80	,83	,85	,87	,89	,91	,91	,91	,90	,88	,87	,85	,83	,81	,79	,78	,79	,82	,85	,89	,92	,95	,98	,102	,105	,108	,110	,111	,110	,109	,109	,109	,109	,109	,109	,110	,110	,110	,109	,108	,108	,108	,108	,108	,108	,109	,109	,110	,109	,107	,104	,100	,96	,91	,86	,81	,76	,72	,68	,65	,63	,62	,62	,63	,64	,64	,65	,65	,66	,66	,66	,66	,66	,67	,68	,68	,69	,69	,69	,69	,69	,69	,70	,71	,72	,72	,73	,74	,75	,76	,77	,78	,79	,80	,80	,79	,79	,78	,77	,76	,75	,74	,73	,73	,72	,72	,72	,73	,74	,75	,76	,77	,79	,81	,83	,85	,87	,87	,87	,87	,86	,85	,83	,81	,79	,77	,75	,74	,74	,75	,76	,77	,79	,81	,82	,83	,83	,83	,83	,85	,86	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,88	,89	,92	,95	,97	,100	,103	,104	,105	,105	,105	,105	,105	,105	,105	,104	,104	,104	,104	,104	,105	,104	,104	,104	,104	,103	,103	,102	,102	,103	,104	,104	,103	,103	,102	,100	,99	,98	,96	,95	,94	,93	,91	,89	,88	,87	,88	,88	,89	,90	,91	,92	,95	,97	,98	,98	,98	,97	,97	,95	,94	,91	,89	,86	,84	,82	,80	,79	,79	,80	,81	,83	,84	,86	,87	,90	,91	,92	,92	,92	,91	,90	,89	,87	,85	,83	,82	,80	,79	,78	,77	,78	,79	,79	,79	,78	,78	,78	,77	,76	,76	,77	,78	,78	,78	,79	,79	,79	,78	,77	,76	,74	,74	,74	,75	,78	,81	,84	,86	,88	,91	,94	,96	,97	,97	,96	,95	,95	,94	,94	,93	,92	,91	,90	,89	,88	,86	,86	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,87	,88	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,90	,92	,92	,91	,91	,90	,88	,86	,84	,82	,81	,80	,80	,79	,80	,80	,81	,82	,82	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,84	,84	,83	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,86	,87	,89	,92	,95	,97	,97	,96	,96	,94	,93	,91	,88	,85	,84	,83	,84	,85	,87	,89	,91	,92	,93	,94	,94	,93	,92	,90	,89	,88	,86	,84	,83	,82	,83	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,90	,91	,92	,92	,91	,90	,88	,86	,83	,82	,82	,83	,84	,86	,88	,90	,91	,90	,90	,90	,90	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,87	,85	,83	,80	,78	,78	,79	,81	,84	,87	,90	,92	,95	,99	,101	,101	,101	,100	,99	,98	,98	,98	,99	,99	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,101	,101	,100	,100	,100	,100	,100	,100	,100	,100	,99	,99	,99	,98	,98	,98	,98	,97	,97	,97	,96	,96	,95	,94	,93	,92	,91	,90	,89	,89	,89	,88	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,90	,91	,93	,95	,97	,100	,101	,102	,101	,100	,99	,97	,94	,91	,87	,85	,84	,85	,87	,89	,91	,92	,93	,94	,93	,93	,92	,92	,91	,90	,89	,88	,88	,87	,87	,86	,86	,86	,87	,87	,87	,88	,88	,88	,89	,89	,89	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,90	,90	,91	,92	,93	,93	,92	,91	,90	,87	,84	,81	,79	,80	,81	,82	,83	,83	,83	,83	,83	,82	,82	,83	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,87	,88	,88	,89	,90	,91	,93	,96	,98	,100	,101	,101	,99	,98	,96	,93	,91	,88	,85	,82	,81	,81	,83	,85	,87	,89	,91	,92	,93	,92	,90	,89	,88	,87	,86	,86	,85	,85	,84	,84	,83	,83	,83	,83	,83	,84	,84	,84	,85	,85	,85	,86	,86	,86	,86	,86	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,88	,89	,91	,92	,93	,93	,92	,91	,89	,86	,83	,81	,80	,80	,82	,84	,85	,87	,88	,88	,88	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,88	,89	,91	,95	,97	,98	,98	,98	,96	,95	,93	,91	,88	,86	,84	,83	,84	,85	,86	,87	,88	,89	,91	,92	,93	,94	,93	,92	,91	,89	,88	,87	,86	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,88	,89	,92	,95	,98	,101	,103	,105	,105	,104	,102	,99	,96	,93	,89	,86	,83	,80	,78	,79	,80	,81	,84	,85	,88	,91	,94	,97	,99	,99	,98	,97	,96	,95	,95	,95	,95	,95	,94	,94	,94	,94	,94	,94	,94	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,91	,90	,90	,90	,90	,91	,91	,90	,91	,91	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,92	,93	,92	,92	,90	,88	,86	,85	,84	,83	,84	,85	,87	,89	,91	,93	,94	,94	,94	,92	,91	,90	,89	,87	,86	,84	,84	,84	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,85	,85	,85	,86	,87	,88	,88	,87	,85	,83	,81	,81	,81	,83	,85	,88	,92	,95	,98	,99	,100	,100	,99	,97	,95	,94	,91	,88	,86	,83	,81	,79	,80	,82	,84	,86	,88	,90	,92	,95	,97	,98	,98	,97	,94	,92	,90	,88	,87	,85	,83	,82	,83	,83	,84	,84	,84	,84	,84	,84	,85	,84	,84	,85	,85	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,87	,87	,88	,89	,89	,90	,90	,89	,89	,87	,85	,83	,83	,84	,85	,87	,90	,93	,96	,98	,100	,100	,100	,100	,99	,97	,94	,92	,91	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,93	,93	,93	,93	,93	,92	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,93	,93	,93	,92	,93	,93	,92	,93	,93	,92	,93	,93	,93	,93	,94	,94	,93	,91	,89	,86	,84	,84	,83	,84	,86	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,89	,89	,90	,90	,91	,92	,92	,93	,92	,91	,90	,89	,88	,87	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,90	,90	,90	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,86	,86	,86	,87	,86	,87	,87	,87	,87	,87	,88	,88	,88	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,88	,88	,88	,88	,88	,88	,87	,85	,84	,82	,80	,79	,79	,80	,82	,84	,86	,89	,92	,95	,96	,96	,96	,95	,95	,95	,96	,96	,96	,96	,96	,96	,97	,97	,97	,96	,96	,96	,96	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,97	,98	,97	,97	,96	,96	,95	,94	,94	,93	,93	,93	,93	,93	,93	,93	,94	,94	,94	,95	,95	,95	,95	,95	,96	,95	,96	,95	,95	,95	,95	,95	,95	,95	,95	,95	,94	,94	,94	,94	,94	,94	,94	,94	,93	,93	,93	,93	,93	,93	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,90	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,88	,89	,89	,89	,89	,89	,90	,90	,90	,91	,91	,91	,92	,92	,92	,93	,93	,94	,94	,94	,94	,94	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95	,95
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
const uint16_t WerewolvesLondon_MouthRotation[] PROGMEM = {	110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,95	,92	,100	,105	,106	,108	,97	,92	,97	,102	,103	,99	,86	,91	,95	,95	,88	,89	,91	,94	,97	,86	,85	,85	,88	,81	,80	,91	,90	,87	,80	,90	,92	,80	,80	,80	,83	,86	,87	,88	,80	,80	,93	,96	,106	,94	,84	,85	,99	,98	,98	,94	,94	,104	,96	,103	,104	,104	,110	,110	,108	,99	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,99	,102	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,103	,107	,110	,110	,110	,97	,96	,110	,109	,101	,91	,87	,96	,104	,107	,103	,93	,96	,102	,110	,110	,106	,93	,87	,94	,107	,90	,85	,86	,95	,108	,102	,90	,81	,90	,100	,108	,109	,91	,92	,102	,93	,90	,94	,80	,85	,95	,103	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,103	,94	,103	,110	,108	,102	,85	,101	,110	,103	,94	,90	,106	,107	,101	,96	,87	,96	,100	,100	,104	,85	,93	,96	,95	,104	,95	,85	,82	,95	,105	,105	,104	,88	,80	,85	,102	,105	,99	,91	,80	,89	,100	,108	,110	,110	,110	,110	,110	,95	,80	,80	,89	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,95	,110	,110	,106	,110	,102	,102	,110	,104	,101	,95	,105	,110	,102	,99	,99	,110	,110	,101	,89	,94	,106	,110	,108	,94	,90	,105	,109	,110	,100	,86	,86	,96	,110	,110	,110	,93	,86	,92	,104	,110	,110	,110	,110	,110	,110	,110	,88	,88	,80	,86	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,94	,106	,110	,110	,110	,110	,96	,90	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,86	,100	,110	,110	,110	,94	,87	,88	,90	,87	,80	,80	,80	,86	,88	,80	,80	,80	,91	,102	,97	,83	,80	,86	,83	,80	,92	,80	,82	,85	,80	,80	,87	,90	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,88	,80	,94	,104	,110	,110	,94	,86	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,84	,80	,83	,83	,82	,86	,87	,91	,93	,93	,97	,96	,98	,98	,99	,102	,102	,105	,107	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,104	,92	,86	,99	,110	,107	,103	,81	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,90	,102	,110	,110	,110	,105	,96	,94	,100	,95	,89	,96	,92	,101	,97	,91	,104	,106	,103	,95	,80	,82	,92	,94	,86	,84	,94	,99	,95	,93	,80	,90	,86	,80	,95	,99	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,94	,80	,87	,96	,96	,104	,88	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,86	,86	,92	,94	,94	,101	,98	,101	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,106	,107	,103	,97	,88	,81	,97	,103	,103	,94	,91	,103	,95	,96	,93	,81	,93	,94	,90	,100	,93	,89	,81	,80	,97	,100	,92	,82	,81	,99	,97	,90	,85	,87	,99	,90	,80	,80	,80	,88	,94	,105	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,84	,84	,103	,97	,88	,94	,103	,103	,94	,96	,99	,105	,107	,99	,89	,83	,99	,96	,91	,99	,94	,105	,103	,83	,80	,82	,89	,99	,102	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,80	,87	,103	,97	,91	,94	,96	,102	,85	,90	,97	,100	,94	,87	,95	,101	,101	,88	,80	,88	,101	,94	,89	,81	,86	,101	,101	,106	,92	,80	,80	,86	,94	,97	,94	,81	,80	,82	,91	,98	,99	,103	,105	,108	,109	,99	,80	,80	,80	,80	,88	,98	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,99	,86	,98	,108	,105	,104	,88	,98	,105	,98	,93	,80	,90	,100	,98	,104	,94	,83	,87	,93	,110	,110	,110	,110	,110	,110	,110	,99	,82	,80	,88	,91	,85	,94	,98	,103	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,93	,87	,105	,110	,110	,110	,95	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,92	,105	,110	,110	,110	,109	,95	,104	,102	,100	,104	,90	,95	,103	,99	,102	,92	,85	,83	,94	,98	,84	,88	,87	,80	,89	,80	,89	,105	,104	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,90	,89	,90	,107	,110	,110	,110	,94	,91	,85	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,84	,81	,81	,83	,82	,91	,92	,94	,103	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,94	,93	,102	,110	,110	,110	,110	,102	,94	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,101	,110	,110	,110	,110	,110	,91	,97	,95	,99	,96	,90	,94	,94	,90	,85	,90	,95	,101	,103	,95	,86	,94	,95	,80	,87	,93	,90	,85	,80	,80	,80	,80	,90	,93	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,95	,110	,110	,110	,110	,91	,85	,83	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,89	,98	,106	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,101	,110	,100	,92	,99	,100	,104	,89	,89	,105	,110	,110	,94	,98	,109	,103	,105	,104	,100	,93	,85	,80	,80	,80	,88	,99	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,88	,96	,104	,104	,101	,91	,106	,104	,100	,107	,97	,96	,100	,99	,98	,88	,97	,103	,96	,102	,98	,96	,93	,80	,81	,81	,98	,102	,91	,84	,80	,92	,94	,98	,103	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,94	,90	,110	,108	,102	,105	,95	,100	,105	,109	,110	,105	,96	,94	,101	,108	,102	,107	,100	,90	,99	,102	,107	,105	,90	,90	,94	,103	,109	,99	,85	,82	,94	,106	,93	,80	,81	,88	,104	,105	,101	,83	,80	,80	,80	,86	,96	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,100	,109	,110	,110	,110	,95	,95	,106	,95	,97	,97	,99	,110	,95	,94	,99	,93	,90	,80	,80	,85	,97	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,90	,88	,105	,100	,93	,99	,95	,99	,87	,87	,97	,86	,94	,94	,80	,80	,83	,104	,104	,110	,110	,110	,110	,110	,110	,110	,100	,80	,80	,80	,82	,83	,89	,102	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,95	,97	,109	,103	,110	,107	,104	,108	,106	,110	,110	,110	,110	,94	,99	,107	,93	,98	,94	,92	,105	,104	,101	,91	,87	,103	,93	,83	,89	,81	,94	,94	,101	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,109	,110	,110	,110	,110	,110	,110	,110	,110	,108	,82	,82	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,84	,102	,104	,109	,110	,110	,110	,94	,92	,83	,81	,85	,80	,89	,88	,85	,89	,80	,88	,101	,95	,94	,85	,89	,91	,80	,92	,89	,80	,88	,81	,93	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,90	,80	,80	,104	,104	,109	,110	,87	,87	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,83	,85	,82	,85	,84	,87	,91	,93	,98	,100	,103	,104	,105	,106	,107	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,96	,96	,110	,110	,110	,110	,100	,94	,91	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,96	,110	,110	,110	,110	,110	,110	,97	,101	,103	,99	,103	,97	,88	,97	,103	,99	,88	,90	,95	,105	,110	,105	,89	,92	,102	,96	,84	,92	,95	,92	,81	,80	,89	,102	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,109	,94	,94	,102	,110	,110	,110	,110	,97	,91	,81	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,81	,83	,84	,89	,89	,94	,95	,94	,98	,96	,97	,100	,100	,106	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,105	,110	,110	,104	,106	,106	,103	,104	,107	,107	,97	,100	,108	,102	,103	,107	,93	,94	,99	,100	,101	,91	,90	,101	,97	,94	,96	,96	,96	,89	,94	,101	,95	,96	,92	,92	,95	,81	,90	,96	,94	,105	,92	,80	,80	,81	,96	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,107	,94	,91	,104	,98	,92	,91	,95	,106	,97	,91	,94	,101	,109	,108	,103	,83	,84	,93	,96	,102	,105	,107	,110	,108	,109	,102	,84	,80	,87	,94	,83	,86	,97	,86	,80	,80	,82	,101	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,105	,88	,88	,95	,98	,85	,92	,95	,96	,100	,89	,92	,102	,103	,104	,91	,91	,102	,98	,94	,92	,90	,103	,95	,91	,94	,93	,90	,80	,83	,91	,88	,86	,84	,98	,109	,110	,107	,96	,105	,95	,98	,95	,87	,96	,93	,87	,94	,94	,99	,94	,80	,80	,80	,80	,81	,91	,94	,105	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,103	,91	,103	,105	,105	,101	,103	,110	,105	,109	,109	,96	,100	,100	,101	,110	,107	,110	,110	,110	,110	,110	,97	,82	,87	,96	,99	,91	,92	,101	,101	,87	,80	,82	,87	,99	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,98	,92	,90	,104	,110	,110	,110	,107	,94	,98	,103	,107	,100	,90	,95	,99	,105	,108	,108	,109	,110	,97	,90	,93	,96	,98	,92	,97	,102	,91	,97	,99	,95	,94	,84	,94	,101	,94	,86	,82	,89	,103	,101	,97	,83	,80	,88	,85	,80	,80	,85	,100	,107	,103	,89	,80	,80	,80	,92	,106	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,92	,94	,106	,107	,94	,95	,95	,105	,106	,94	,94	,93	,100	,108	,110	,110	,110	,110	,110	,108	,98	,90	,90	,98	,88	,88	,88	,88	,90	,80	,86	,94	,100	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,94	,100	,110	,103	,92	,85	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,83	,81	,83	,87	,86	,92	,94	,97	,102	,101	,105	,106	,107	,109	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,101	,81	,82	,89	,95	,102	,101	,105	,103	,103	,98	,87	,88	,93	,100	,88	,88	,92	,93	,92	,81	,90	,96	,91	,91	,84	,87	,86	,80	,82	,80	,82	,101	,101	,107	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,108	,107	,109	,110	,110	,110	,101	,93	,96	,99	,94	,92	,97	,102	,101	,95	,96	,98	,110	,110	,110	,110	,110	,110	,98	,84	,87	,97	,94	,90	,85	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,86	,87	,90	,91	,93	,94	,94	,96	,97	,98	,102	,105	,108	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,94	,91	,94	,98	,103	,106	,107	,103	,104	,104	,94	,91	,94	,100	,104	,101	,103	,94	,89	,94	,99	,95	,90	,90	,96	,101	,97	,95	,94	,96	,90	,86	,94	,101	,109	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
const uint16_t WerewolvesLondon_Voice_Player[] PROGMEM = {	MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(START, 8)	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 	, MKVoiceEntry(UNCHANGED, 0) 
};																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
const uint16_t WerewolvesLondon_HeadVertRotation[] PROGMEM = {	80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,79	,79	,80	,82	,83	,83	,83	,82	,81	,80	,80	,79	,80	,81	,81	,82	,81	,80	,79	,79	,79	,78	,79	,79	,80	,81	,81	,81	,80	,79	,78	,77	,77	,77	,77	,77	,77	,78	,78	,78	,77	,76	,76	,76	,76	,77	,77	,78	,80	,81	,82	,81	,79	,78	,77	,77	,77	,78	,79	,80	,81	,80	,79	,78	,77	,77	,77	,77	,79	,81	,82	,81	,80	,79	,78	,77	,77	,76	,76	,76	,76	,77	,78	,78	,78	,77	,76	,75	,75	,74	,74	,74	,74	,74	,76	,77	,78	,77	,77	,76	,75	,74	,74	,74	,74	,76	,77	,78	,78	,77	,76	,75	,74	,74	,74	,74	,73	,74	,74	,75	,75	,75	,74	,74	,74	,73	,72	,72	,72	,73	,74	,74	,74	,74	,73	,72	,72	,72	,72	,72	,73	,74	,74	,74	,74	,73	,72	,72	,71	,71	,71	,71	,72	,73	,74	,73	,73	,72	,72	,72	,73	,73	,74	,75	,75	,76	,75	,75	,74	,74	,73	,73	,72	,72	,73	,74	,74	,75	,75	,74	,75	,78	,80	,83	,84	,85	,85	,85	,85	,84	,82	,80	,78	,76	,75	,75	,76	,77	,78	,79	,78	,77	,76	,76	,76	,75	,75	,76	,77	,77	,78	,79	,78	,78	,77	,76	,75	,75	,75	,75	,76	,77	,77	,76	,75	,74	,74	,74	,74	,75	,76	,77	,79	,81	,83	,83	,83	,81	,80	,80	,79	,79	,79	,81	,82	,83	,81	,80	,78	,77	,77	,77	,78	,80	,82	,83	,83	,81	,79	,78	,77	,76	,76	,76	,76	,77	,78	,80	,81	,81	,80	,79	,77	,77	,77	,77	,78	,79	,81	,82	,82	,80	,79	,78	,78	,78	,78	,79	,81	,81	,80	,78	,76	,76	,75	,75	,75	,75	,75	,76	,77	,79	,80	,81	,80	,79	,78	,77	,76	,76	,76	,77	,77	,78	,78	,77	,76	,76	,76	,76	,76	,76	,77	,78	,80	,80	,80	,78	,77	,75	,74	,74	,73	,73	,73	,74	,74	,73	,72	,70	,69	,69	,69	,70	,71	,73	,74	,74	,74	,73	,72	,72	,71	,71	,71	,72	,73	,74	,74	,74	,74	,73	,71	,71	,70	,71	,71	,72	,72	,72	,71	,70	,70	,69	,69	,69	,69	,69	,69	,68	,68	,68	,68	,68	,68	,68	,68	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,69	,70	,70	,70	,70	,70	,70	,70	,70	,70	,71	,71	,70	,70	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,71	,72	,72	,72	,72	,72	,72	,72	,73	,74	,74	,74	,75	,75	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,76	,75	,75	,75	,75	,76	,78	,79	,79	,78	,77	,77	,77	,78	,79	,79	,78	,77	,76	,76	,76	,76	,76	,76	,75	,75	,75	,76	,76	,76	,75	,75	,76	,76	,76	,76	,75	,75	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,76	,76	,76	,76	,76	,75	,76	,76	,76	,76	,75	,75	,75	,76	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,76	,77	,79	,81	,82	,82	,81	,80	,79	,79	,79	,80	,81	,83	,84	,84	,83	,81	,80	,80	,79	,79	,80	,81	,81	,81	,81	,80	,79	,78	,78	,78	,79	,80	,80	,78	,77	,77	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,75	,75	,76	,76	,75	,75	,75	,75	,76	,76	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,76	,75	,75	,75	,75	,75	,74	,75	,75	,75	,76	,78	,80	,83	,85	,86	,85	,84	,82	,80	,78	,77	,76	,76	,76	,77	,79	,80	,80	,78	,77	,76	,76	,76	,77	,78	,80	,79	,78	,77	,76	,75	,75	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,78	,80	,82	,82	,81	,80	,79	,78	,78	,79	,80	,82	,84	,86	,87	,86	,85	,83	,82	,82	,82	,83	,85	,86	,85	,83	,80	,78	,76	,75	,74	,75	,74	,74	,74	,73	,71	,67	,63	,59	,56	,53	,50	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,50	,55	,60	,64	,68	,70	,70	,70	,69	,69	,68	,68	,68	,69	,69	,68	,68	,68	,68	,68	,68	,68	,68	,68	,69	,68	,68	,68	,68	,68	,68	,68	,68	,68	,68	,69	,69	,69	,70	,71	,73	,74	,76	,79	,81	,83	,82	,81	,79	,78	,77	,76	,76	,76	,77	,78	,79	,79	,77	,76	,74	,74	,74	,73	,72	,70	,68	,67	,66	,65	,63	,61	,58	,55	,52	,50	,47	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,48	,50	,51	,52	,54	,56	,57	,58	,60	,62	,63	,64	,66	,68	,69	,70	,72	,73	,74	,74	,76	,77	,78	,80	,81	,83	,84	,85	,86	,88	,90	,92	,94	,95	,95	,93	,92	,90	,89	,88	,88	,88	,89	,90	,89	,87	,85	,83	,81	,80	,79	,77	,76	,75	,74	,74	,71	,67	,63	,59	,56	,53	,51	,49	,48	,46	,46	,45	,45	,45	,45	,45	,46	,49	,52	,57	,62	,65	,68	,70	,70	,69	,68	,67	,67	,67	,67	,67	,67	,67	,68	,68	,67	,68	,68	,67	,67	,67	,68	,68	,68	,67	,67	,68	,68	,67	,67	,67	,68	,68	,67	,68	,68	,68	,69	,71	,72	,74	,76	,77	,78	,79	,79	,79	,80	,82	,84	,85	,85	,84	,83	,83	,83	,84	,86	,87	,87	,86	,84	,83	,82	,80	,77	,74	,72	,69	,66	,64	,62	,59	,56	,53	,50	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,48	,50	,53	,56	,60	,62	,65	,68	,71	,73	,74	,76	,78	,78	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,79	,81	,82	,83	,83	,82	,82	,81	,80	,79	,79	,79	,80	,79	,77	,76	,76	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,79	,80	,82	,83	,84	,83	,83	,82	,81	,80	,80	,81	,82	,84	,85	,85	,84	,82	,81	,80	,79	,79	,80	,82	,83	,83	,82	,80	,79	,78	,78	,78	,80	,80	,79	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,76	,76	,76	,76	,76	,76	,76	,77	,78	,79	,79	,79	,78	,78	,78	,77	,77	,78	,79	,80	,81	,81	,80	,79	,78	,77	,77	,76	,76	,76	,76	,77	,78	,78	,77	,77	,76	,75	,75	,75	,75	,76	,77	,78	,78	,77	,76	,75	,75	,75	,75	,75	,76	,76	,75	,74	,74	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,73	,74	,73	,73	,74	,74	,74	,73	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,76	,78	,81	,83	,84	,83	,82	,80	,79	,78	,78	,78	,78	,79	,80	,81	,81	,80	,79	,78	,77	,77	,77	,78	,79	,81	,81	,80	,78	,76	,74	,74	,74	,73	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,77	,77	,78	,79	,79	,79	,79	,78	,77	,77	,76	,77	,78	,79	,79	,79	,79	,78	,77	,77	,77	,78	,79	,81	,82	,82	,81	,79	,78	,77	,76	,75	,75	,75	,76	,77	,78	,77	,76	,75	,74	,74	,74	,74	,74	,75	,76	,76	,74	,73	,71	,70	,69	,68	,68	,66	,65	,65	,63	,62	,60	,57	,55	,52	,49	,47	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,48	,53	,58	,63	,67	,69	,69	,68	,68	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,67	,68	,69	,72	,74	,76	,78	,80	,82	,82	,81	,80	,79	,78	,78	,78	,79	,80	,80	,79	,78	,77	,77	,77	,78	,79	,78	,76	,74	,73	,71	,69	,67	,66	,65	,63	,61	,59	,56	,54	,51	,49	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,47	,47	,48	,49	,51	,52	,53	,54	,56	,57	,59	,60	,62	,64	,67	,69	,71	,73	,74	,75	,76	,78	,80	,82	,84	,87	,90	,91	,92	,91	,90	,89	,88	,87	,86	,86	,85	,85	,85	,84	,83	,82	,82	,82	,82	,83	,82	,80	,78	,76	,74	,73	,70	,68	,66	,65	,63	,61	,59	,56	,53	,51	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,48	,52	,55	,57	,58	,59	,59	,59	,59	,59	,59	,59	,58	,58	,59	,59	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,58	,59	,59	,59	,59	,59	,59	,60	,61	,63	,66	,70	,74	,77	,81	,84	,87	,88	,87	,85	,84	,82	,81	,80	,80	,80	,81	,82	,83	,83	,81	,79	,77	,75	,74	,74	,73	,71	,70	,69	,68	,67	,65	,64	,62	,59	,57	,55	,53	,51	,50	,48	,46	,45	,45	,45	,45	,45	,45	,45	,46	,46	,47	,47	,47	,48	,47	,47	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,46	,46	,46	,47	,48	,49	,51	,54	,58	,62	,66	,69	,72	,74	,75	,76	,76	,77	,78	,79	,80	,81	,83	,85	,86	,85	,84	,83	,81	,81	,80	,80	,81	,81	,81	,79	,77	,75	,74	,74	,74	,75	,76	,77	,80	,82	,83	,82	,81	,80	,79	,78	,78	,78	,78	,79	,80	,80	,79	,78	,77	,77	,77	,76	,76	,76	,77	,79	,80	,81	,80	,79	,78	,77	,76	,76	,75	,74	,74	,74	,75	,75	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,73	,73	,72	,72	,72	,73	,74	,75	,75	,74	,74	,74	,74	,75	,75	,76	,78	,80	,83	,85	,87	,87	,86	,85	,83	,82	,81	,82	,83	,85	,87	,86	,85	,83	,82	,81	,81	,82	,84	,85	,86	,85	,83	,81	,79	,78	,77	,77	,76	,77	,77	,79	,80	,82	,82	,81	,79	,78	,77	,77	,77	,78	,79	,80	,80	,78	,77	,77	,77	,77	,77	,77	,77	,77	,76	,74	,74	,74	,74	,74	,74	,74	,75	,75	,76	,78	,78	,78	,78	,78	,79	,81	,84	,86	,88	,89	,91	,92	,92	,91	,91	,90	,90	,89	,90	,90	,90	,91	,91	,91	,89	,88	,87	,86	,86	,87	,88	,89	,89	,89	,89	,88	,87	,86	,85	,85	,85	,85	,87	,88	,88	,89	,89	,87	,86	,86	,85	,85	,86	,87	,88	,88	,87	,86	,85	,83	,81	,79	,78	,77	,77	,78	,80	,82	,83	,83	,82	,82	,81	,81	,81	,81	,82	,82	,82	,81	,80	,78	,75	,74	,72	,73	,73	,74	,74	,74	,71	,68	,64	,61	,58	,56	,54	,52	,52	,52	,53	,54	,54	,53	,52	,52	,51	,51	,52	,53	,55	,57	,59	,60	,59	,59	,58	,57	,57	,57	,58	,59	,61	,63	,64	,64	,64	,64	,63	,63	,63	,64	,65	,67	,68	,69	,69	,69	,69	,70	,71	,72	,74	,75	,77	,79	,82	,83	,84	,83	,83	,83	,82	,80	,79	,77	,76	,75	,76	,76	,76	,76	,76	,75	,75	,74	,73	,72	,72	,73	,74	,76	,77	,77	,77	,76	,76	,76	,76	,77	,78	,79	,80	,79	,78	,77	,76	,74	,73	,72	,70	,70	,71	,73	,75	,74	,74	,72	,71	,70	,69	,70	,71	,72	,71	,71	,71	,71	,71	,71	,70	,70	,70	,71	,71	,70	,70	,71	,71	,71	,71	,71	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,73	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,76	,78	,79	,79	,78	,77	,76	,76	,76	,76	,78	,81	,83	,83	,81	,79	,78	,77	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,76	,76	,76	,75	,75	,76	,76	,76	,76	,75	,75	,75	,75	,75	,75	,75	,75	,76	,76	,75	,75	,75	,75	,76	,75	,75	,75	,75	,75	,75	,76	,78	,80	,81	,81	,81	,81	,80	,79	,79	,79	,80	,81	,81	,80	,79	,78	,78	,78	,80	,81	,81	,80	,78	,77	,76	,75	,74	,75	,76	,77	,77	,77	,76	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,75	,76	,77	,79	,80	,81	,81	,80	,79	,79	,79	,79	,81	,81	,80	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,77	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,76	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,75	,76	,76	,78	,79	,81	,83	,84	,84	,82	,81	,81	,80	,81	,82	,83	,84	,85	,84	,83	,82	,80	,80	,79	,80	,81	,83	,83	,82	,81	,81	,80	,79	,79	,79	,79	,80	,81	,81	,80	,79	,78	,78	,77	,77	,78	,80	,80	,78	,77	,76	,75	,74	,74	,74	,74	,74	,74	,73	,73	,72	,72	,70	,68	,64	,61	,58	,56	,54	,52	,50	,49	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,50	,56	,63	,69	,73	,74	,74	,74	,73	,73	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,71	,71	,71	,71	,72	,72	,73	,73	,74	,75	,77	,79	,81	,82	,82	,81	,80	,78	,77	,77	,77	,78	,77	,77	,76	,76	,76	,77	,78	,78	,76	,74	,73	,71	,69	,67	,64	,61	,59	,57	,55	,52	,50	,47	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,47	,48	,49	,50	,51	,52	,53	,55	,57	,58	,60	,62	,64	,65	,67	,68	,69	,70	,71	,72	,74	,74	,75	,77	,79	,81	,84	,87	,89	,91	,92	,93	,94	,92	,90	,89	,88	,88	,88	,90	,91	,91	,89	,87	,85	,85	,85	,86	,88	,89	,88	,86	,84	,81	,79	,78	,76	,75	,74	,74	,74	,74	,73	,72	,69	,66	,62	,59	,55	,52	,49	,46	,45	,45	,45	,45	,45	,45	,45	,45	,46	,50	,55	,60	,66	,70	,72	,74	,74	,73	,73	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,71	,71	,72	,71	,71	,71	,71	,72	,72	,73	,74	,76	,79	,82	,84	,84	,84	,83	,82	,81	,81	,81	,81	,82	,83	,82	,81	,80	,80	,80	,81	,82	,83	,82	,79	,77	,75	,74	,72	,69	,66	,64	,61	,59	,57	,55	,53	,51	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,47	,48	,49	,51	,53	,54	,55	,57	,59	,60	,62	,63	,65	,66	,68	,70	,72	,74	,75	,76	,77	,79	,81	,82	,83	,84	,86	,88	,89	,90	,90	,89	,88	,87	,86	,86	,86	,86	,85	,84	,83	,83	,84	,84	,83	,82	,81	,80	,80	,79	,79	,79	,79	,79	,78	,79	,79	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,77	,78	,78	,78	,78	,78	,78	,77	,77	,77	,77	,78	,80	,81	,83	,84	,84	,83	,82	,81	,80	,80	,80	,80	,80	,80	,78	,77	,76	,75	,74	,74	,75	,76	,77	,78	,78	,77	,77	,76	,76	,77	,78	,78	,77	,76	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,75	,77	,79	,81	,83	,84	,83	,82	,80	,79	,78	,79	,79	,81	,82	,83	,82	,81	,80	,79	,79	,79	,80	,81	,82	,84	,84	,83	,82	,80	,79	,78	,77	,78	,79	,80	,80	,80	,79	,78	,78	,78	,78	,77	,78	,79	,78	,77	,76	,75	,75	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,74	,75	,76	,77	,78	,79	,81	,81	,82	,82	,82	,82	,83	,84	,85	,87	,88	,88	,87	,86	,85	,84	,83	,84	,84	,85	,85	,84	,83	,83	,83	,83	,83	,83	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,82	,81	,81	,82	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,82	,82	,84	,85	,86	,86	,85	,85	,84	,84	,84	,85	,86	,87	,87	,87	,86	,85	,84	,83	,82	,82	,82	,82	,83	,83	,83	,81	,80	,80	,79	,79	,80	,81	,82	,83	,82	,82	,81	,80	,80	,79	,80	,80	,81	,81	,79	,77	,75	,74	,74	,73	,72	,71	,71	,70	,70	,70	,70	,71	,71	,71	,71	,72	,71	,71	,71	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,72	,73	,73	,73	,74	,74	,74	,74	,75	,76	,77	,79	,81	,84	,86	,86	,85	,85	,85	,86	,87	,88	,89	,89	,89	,88	,88	,88	,88	,89	,90	,89	,89	,89	,89	,89	,88	,88	,88	,88	,88	,88	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,87	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,84	,84	,85	,85	,85	,85	,85	,85	,85	,84	,83	,82	,81	,81	,82	,83	,85	,86	,85	,83	,82	,81	,80	,79	,79	,78	,78	,79	,80	,81	,82	,81	,81	,80	,79	,78	,79	,79	,80	,81	,80	,79	,78	,78	,77	,77	,77	,77	,77	,77	,77	,77	,77	,76	,75	,74	,70	,67	,63	,60	,57	,54	,52	,49	,48	,46	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,47	,49	,50	,52	,53	,54	,55	,55	,56	,56	,58	,59	,60	,61	,63	,65	,66	,67	,69	,70	,71	,73	,74	,75	,77	,78	,80	,81	,82	,83	,84	,85	,88	,90	,92	,93	,93	,93	,92	,91	,91	,90	,90	,89	,89	,89	,88	,87	,87	,86	,86	,86	,86	,86	,85	,85	,85	,85	,85	,85	,85	,85	,85	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,84	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,83	,84	,85	,86	,86	,86	,85	,84	,84	,84	,84	,85	,86	,86	,85	,85	,84	,83	,82	,82	,82	,84	,85	,86	,85	,84	,83	,82	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,81	,80	,80	,80	,80	,80	,80	,80	,79	,78	,77	,76	,75	,74	,73	,70	,67	,65	,62	,60	,57	,55	,53	,51	,50	,48	,47	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,45	,46	,46	,46	,47	,47	,47	,48	,48	,49	,50	,50	,51	,52	,53	,54	,55	,56	,58	,60	,61	,63	,64	,66	,69	,70	,72	,74	,75	,76	,78	,80	,81	,82	,83	,85	,86	,88	,89	,89	,90	,90	,91	,92	,94	,95	,95	,94	,94	,94	,94	,93	,93	,93	,93	,93	,93	,93	,92	,92	,92	,92	,92	,92	,92	,92	,92	,92	,91	,91	,91	,91	,91	,91	,91	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,91	,92	,92	,92	,93	,93	,94	,95	,95	,96	,97	,98	,99	,101	,103	,106	,108	,111	,113	,116	,118	,120	,122	,124	,125	,125	,125	,125	,125	,125	,125	,125	,125	,124	,124	,124	,124	,124	,124	,124	,124	,124	,124	,123	,123	,123	,123	,123	,123	,123	,123	,123	,122	,122	,122	,122	,122	,122	,122
};

ProgMemArray_values_reader WerewolvesLondon_HeadVert_Reader;
ProgMemArray_values_reader WerewolvesLondon_HeadHori_Reader;
ProgMemArray_values_reader WerewolvesLondon_Mouth_Reader;
ProgMemArray_values_reader WerewolvesLondon_Voice_Reader;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
#endif


#if 0
const unsigned long Silly_play_interval = 50; // milliseconds
const uint16_t Silly_HeadHoriRotation[] = {	90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,80	,80	,80	,100	,100	,100	,80	,80	,80	,100	,100	,100	,80	,80	,80	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,80	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_HeadVertRotation[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90																																																																					
};

const uint16_t Silly_MouthRotation[] = {	90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,95	,95	,95	,90	,90	,90	,45	,45	,45	,45	,45	,45	,66	,66	,66	,66	,66	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,140	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,90	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,60	,90																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_Eyes_LEDs[] = {	EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_ON	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF	,EYE_LEDS_OFF																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_Pneumatic_Back[] = {	PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_UPRIGHT	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER	,PNEUMATIC_BACK_BENTOVER																																																																					
};																																																																																																																																																																																																																																																															
																																																																																																																																																																																																																																																															
const uint16_t Silly_Voice_Player[] = {  MKVoiceEntry(START,  MORE_OFTEN_CHEWING_AT_HEAD_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  BLOOD_CURDLING_SCREAM_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(START,  HISSING_FILE
)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(UNCHANGED, 0)	, MKVoiceEntry(STOP, 0)																																																																					
};
																																																																																																																																																																																																																																																															

#endif																																																																																																																																																																																																																																																															
																																																																																																																						

// Command Line structures
#define CmdLineMaxSize  100
char cmdLine [CmdLineMaxSize];
unsigned int cmdLineIndex;
const char Carriage_Return = 13;
const char CmdSeperator = ';';
const char delimiters[] = " ";
bool cmdComplete;

// ---------create the inertial management units (each has a accel,gyro,mag) objects
#ifdef  IncludeSparkFunLSM9DS1
// Create the LSM9DS1 IMUs
LSM9DS1 SparkFun_imu;
LSM9DS1 SparkFun_imu2;
#define LSM9DS1_M	0x1E // Would be 0x1C if SDO_M is LOW
#define LSM9DS1_AG	0x6B // Would be 0x6A if SDO_AG is LOW
#define LSM9DS1_M_IMU2	0x1C // Would be 0x1C if SDO_M is LOW
#define LSM9DS1_AG_IMU2	0x6A // Would be 0x6A if SDO_AG is LOW

// imu  Output Settings

#endif
// Earth's magnetic field varies by location. Add or subtract 
// a declination to get a more accurate heading. Calculate 
// your's here:
// http://www.ngdc.noaa.gov/geomag-web/#declination
//#define DECLINATION -8.58 // 8.58 Declination (degrees) in Boulder, CO. 8.31° E  ± 0.35°  changing by  0.10° W per year
#define DECLINATION 0.82913 // -0.82913Declination (degrees) in Cedar Rapids IA 0° 50' W  ± 0° 22'  changing by  0° 5' W per year 9-26-2018

// create the BNO055 IMUs
// The defines also are used as indicies to the Adafruit_sensors
#define ADAFRUIT_IMU_MOUTH 0
#define ADAFRUIT_IMU_HEAD 1
#define MAX_ADAFRUIT_SENSORS 2
//  Note: sensor number in Adafruit_BNO055 constructor does not change which sensor is which, only the I2C address passed does.
//  Currently the sensor have their I2C address strapping fixed via grounds.   Mouth gaurd sensor isthe one wiht no I2C address passed
Adafruit_BNO055 bno_head = Adafruit_BNO055(ADAFRUIT_IMU_HEAD    , BNO055_ADDRESS_B);
Adafruit_BNO055 bno_mouth = Adafruit_BNO055(ADAFRUIT_IMU_MOUTH);
struct Adafruit_sensors_def {
  Adafruit_BNO055 * sensor;
  char * name;
};
Adafruit_sensors_def Adafruit_sensors[MAX_ADAFRUIT_SENSORS] = { {&bno_mouth,"Mouth IMU"}, {&bno_head, "Head IMU"}};  // Must match index defines above

// General Adafruit items
unsigned long AdafruitSensorReadPeriodMsec;
unsigned long AdafruitSensorReadTimeout;

// Adafruit Visualize 3D items
// uncomment the line below to cause the 3D Visualize opertion to start up on reset
// to get around the Arudino reseting whenever you open the com serial port to it (caused by the DTR line going to 
// the arduino reset thru a capacitor, and open a com port cause this line to go active, unless you cut the trace
// and use the manual reset button to reset the arudino. Ther are jumper pins you can just add a jumpter to renable this again.
//#define ForceVisualize3DOnStartup
bool Adafruit3DVisualizeEnabled = false;
int AdafruitSensorToVisualize = 0;


// Adafruit IMU sensor controls Mouth items
bool AdafruitImuMouthCtrlEnabled = false;
int AdafruitImuMouthCtrlSensor = 0;
unsigned long AdafruitImuMouthCtrlPeriodMsec;
unsigned long AdafruitImuMouthCtrlTimeout;
#define MaxMouthDegreeSettings 10
int MouthDegreeSettings[MaxMouthDegreeSettings];
int NumMouthDegreeSettings = 0;
int MouthDegreeSettingsIndex = 0;
struct ImuMouthCtrlRefFrameDef {
  float heading;
  float pitch;
  float roll;
};
struct ImuMouthCtrlRefFrameDef ImuMouthCtrlRefFrame;  //starting heading, pitch, yaw of IMU when Mouth control started. Used as 0 reference frame

#define ADAFRUIT_IMU_HEAD_MOUTH_OPS
#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
// Adafruit IMUs control head and mouth items --------------------
struct ImuCtrlRefFrameDef {
  float heading;
  float pitch;
  float roll;
};
#define MaxServoDegreeSettings 10
struct ImuServoControlDef {
  int AdafruitImuCtrlSensor;
  servo_device * servo;
  int DegreeSettings[MaxServoDegreeSettings];
  int NumDegreeSettings;
  int DegreeSettingsIndex;
  struct ImuCtrlRefFrameDef ImuCtrlRefFrame;
};
bool AdafruitImuHeadMouthEnabled = false;
unsigned long AdafruitImuHeadMouthPeriodMs;
unsigned long AdafruitImuHeadMouthTimeout;
ImuServoControlDef ImuHeadVerticalServoControl;
ImuServoControlDef ImuHeadHorizontalServoControl;
ImuServoControlDef ImuMouthServoControl;
int AdafruitImuHeadMouthAudioFile = 0;
int AdafruitImuHeadMouthAudioDelay = 0;

#endif

// Adafruit IMUs continuously show diff between head and mouth pitch --------------------
bool AdafruitImusPitchDiffEnabled = false;
struct ImusPitchDiffControlDef {
  int AdafruitImuCtrlSensor1;
  int AdafruitImuCtrlSensor2;
  unsigned long periodMs;
  unsigned long timeout;
  int pitch1ZeroBase;
  int pitch2ZeroBase;
};
ImusPitchDiffControlDef AdafruitImusPitchDiffControl;


// -------------------------------------------
// Madgwidk items
#ifdef MadgwickFilterTestOps
enum e_MadgwickFilterActionsDef {
    FilterActionStop,
    FilterActionVisualize101,
    FilterActionMouth,
    FilterActionMouthAndHead,
    FilterActionImuRead,
    FilterActionImuReadAttitude
};
int ImuReadOps = 0; 
// bit 0 - gyro raw
// bit 1 - gyro calc
// bit 2 - accel raw
// bit 3 - accel calc
// bit 4 - mag raw
// bit 5 - mag calc
int MadgwickFilterAction = 0;
Madgwick filter;
bool MadgwickFilterTestEnabled;
unsigned int MadgwickFilterTestUpdatePeriod;
unsigned long MadgwickFilterTestTimeout;
unsigned long MouthFilterTimeout = 0;
#endif

// ------------Create the devices that make up the Prop

servo_device    Head_Horizontal_Rotation_servo      ;   // attached to pins in setup
servo_device    Head_Vertical_Rotation_servo        ;   // attached to pins in setup
servo_device    Head_Mouth_Rotation_servo           ;   // attached to pins in setup
LED_device      Eyes_LEDs                           (22); // pin 22
relay_device    Pneumatic_Back_relay                (23); // pin 23
mp3_device      Voice_Player                        ;

devices_player  Devices_Player                      ;
int dbg_prop_user_control_state;
unsigned long prop_user_control_timeout;
 
void setup() 
{
    int i = 0;
    // setup cmd line structures
    cmdLineIndex = 0;
    cmdComplete = false;

    // set up user control and debug port
    dbg_prop_user_control_state = 0;
    prop_user_control_timeout = 1000 + millis();
    //Serial.begin(9600);
    Serial.begin(115200);
    
    // initialize the inertial management units (imu)
    #ifdef  IncludeSparkFunLSM9DS1
    SparkFun_imu.settings.device.commInterface = IMU_MODE_I2C;
    SparkFun_imu.settings.device.mAddress = LSM9DS1_M;
    SparkFun_imu.settings.device.agAddress = LSM9DS1_AG;
    // The above lines will only take effect AFTER calling
    // SparkFun_imu.begin(), which verifies communication with the IMU
    // and turns it on.
    if (!SparkFun_imu.begin())
    {
      Serial.println("Failed comm with LSM9DS1");
    }    
    SparkFun_imu2.settings.device.commInterface = IMU_MODE_I2C;
    SparkFun_imu2.settings.device.mAddress = LSM9DS1_M_IMU2;
    SparkFun_imu2.settings.device.agAddress = LSM9DS1_AG_IMU2;
    if (!SparkFun_imu2.begin())
    {
      Serial.println("Failed comm LSM9DS1 IMU2");
    } 
    #endif
 
    // Initializethe BNO055 IMUs
    for (i = 0 ; i < MAX_ADAFRUIT_SENSORS; i++)
    {
      if(!Adafruit_sensors[i].sensor->begin())
      {
        /* There was a problem detecting the BNO055 ... check your connections */
        Serial.print(Adafruit_sensors[i].name);
        Serial.println(" BNO055 NOT detected");
      }
      else
      {
        Adafruit_sensors[i].sensor->setExtCrystalUse(true);
      }
    }
    Serial.println("Start BNO055 Manual Cal");
    //Serial.println("Let the IMU sit still for 5 seconds for gyro cal");
    //Serial.println("Then rotate the imu by 45 degree increments for 180 deg total for accel cal, stoping at least 1 second between each");
    //Serial.println("Then move in figure 8s for a few seconcs for mag cal");
    
    #ifdef ForceVisualize3DOnStartup
    AdafruitSensorReadPeriodMsec = 100;
    AdafruitSensorReadTimeout = millis();
    Adafruit3DVisualizeEnabled = true;
    AdafruitSensorToVisualize = 0;
    #endif

#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
    // initialize IMU head mouth control items
    ImuHeadVerticalServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_HEAD;
    ImuHeadVerticalServoControl.NumDegreeSettings= 0; // start over
    ImuHeadVerticalServoControl.servo =  &Head_Vertical_Rotation_servo;
    
      // Horizontal uses same Head IMU
    ImuHeadHorizontalServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_HEAD;  
    ImuHeadHorizontalServoControl.NumDegreeSettings= 0; // start over
    ImuHeadHorizontalServoControl.servo =  &Head_Horizontal_Rotation_servo;
     
    ImuMouthServoControl.AdafruitImuCtrlSensor = ADAFRUIT_IMU_MOUTH;
    ImuMouthServoControl.NumDegreeSettings= 0; // start over
    ImuMouthServoControl.servo =  &Head_Mouth_Rotation_servo;
#endif
    
    // Initialze the Madgwick Filter items
#ifdef MadgwickFilterTestOps
    MadgwickFilterTestEnabled = false;
    MadgwickFilterTestTimeout = 0;
#endif    
    // attach Head servos to specific pins on the cpu board
    // Only can use pins 11,12,or 13 as these are the only hardware only PWM control pins
    // (i.e. the PWM is completely done in hardware)
    Head_Horizontal_Rotation_servo.attach (SERVO_PIN_A,800,2200 );  // pin 11 on Mega2560,
                                                                    // 800usec for 0 degrees
                                                                    // 2200usec for 180 degrees
    Head_Vertical_Rotation_servo.attach   (SERVO_PIN_B,800,2200);   // pin 12 on Mega2560
                                                                    // 800usec for 0 degrees
                                                                    // 2200usec for 180 degrees
    Head_Mouth_Rotation_servo.attach   (SERVO_PIN_C,800,2200);   // pin 12 on Mega2560
                                                                    // 800usec for 0 degrees
                                                                    // 2200usec for 180 degrees
//    // setup prop head to be completely level and looking straight forward.
//    Head_Horizontal_Rotation_servo.device_write(90);               
    Head_Vertical_Rotation_servo.device_write(90);
// Setup mouth servo to be slightly open
    Head_Mouth_Rotation_servo.device_write(110);

//    
    // Setup Eye LEDs to be off
    Eyes_LEDs.device_write(EYE_LEDS_OFF);
    
//    // Setup Pneumatic Back to be bent over
    Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
//                                                                
//    // Setup voice player to be stopped and at max volume
    Voice_Player.Initialize(8);
    Voice_Player.device_write(mp3_device::STOP << 8);
    Voice_Player.device_write((mp3_device::VOLUME << 8) + 9); // 10 is max volume

    
    // Setup interval for entries in the device player
    Devices_Player.set_play_interval(device_play_interval); //
    
    // register the devices with the devices player along with the table of values to play

    Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                    &Head_Horizontal_Rotation_Reader,
                                    NUM_ARRAY_ENTRIES(Head_Horizontal_Rotation_values));
    Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                    &Head_Vertical_Rotation_Reader,
                                    NUM_ARRAY_ENTRIES(Head_Vertical_Rotation_values));
    Devices_Player.register_device (&Eyes_LEDs,
                                    &Eyes_LEDs_Reader,
                                    NUM_ARRAY_ENTRIES(Eyes_LEDs_values));
    Devices_Player.register_device (&Pneumatic_Back_relay,
                                    &Pneumatic_Back_Reader,
                                    NUM_ARRAY_ENTRIES(Pneumatic_Back_values));
    Devices_Player.register_device (&Voice_Player,
                                    &Voice_Player_Reader,
                                    NUM_ARRAY_ENTRIES(Voice_Player_values));
                                    
#ifdef DAYO_MOVEMENTS
		DayO_HeadVertRotation_Reader.Modify(pgm_get_far_address(DayO_HeadVertRotation),NUM_ARRAY_ENTRIES(DayO_HeadVertRotation));
		DayO_HeadHoriRotation_Reader.Modify(pgm_get_far_address(DayO_HeadHoriRotation),NUM_ARRAY_ENTRIES(DayO_HeadHoriRotation));
		DayO_MouthRotation_Reader.Modify(pgm_get_far_address(DayO_MouthRotation),NUM_ARRAY_ENTRIES(DayO_MouthRotation));
		DayO_Voice_Player_Reader.Modify(pgm_get_far_address(DayO_Voice_Player),NUM_ARRAY_ENTRIES(DayO_Voice_Player));
#endif

#ifdef WEREWOLVESLONDON_MOVEMENTS
		WerewolvesLondon_HeadVert_Reader.Modify(pgm_get_far_address(WerewolvesLondon_HeadVertRotation),NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadVertRotation));
		WerewolvesLondon_HeadHori_Reader.Modify(pgm_get_far_address(WerewolvesLondon_HeadHoriRotation),NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadHoriRotation));
		WerewolvesLondon_Mouth_Reader.Modify(pgm_get_far_address(WerewolvesLondon_MouthRotation),NUM_ARRAY_ENTRIES(WerewolvesLondon_MouthRotation));
		WerewolvesLondon_Voice_Reader.Modify(pgm_get_far_address(WerewolvesLondon_Voice_Player),NUM_ARRAY_ENTRIES(WerewolvesLondon_Voice_Player));
#endif

                                    
    // For testing purposes play the devices once. 
    //Devices_Player.start_play(devices_player::PLAY_ONCE); 
#if 1
    // Test reading DayOf from program memory
    {
      unsigned int k;
#ifdef WEREWOLVESLONDON_MOVEMENTS
      Serial.println("Reading from WerewolvesLondon_HeadHoriRotation Last 20 entries");
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = WerewolvesLondon_HeadHori_Reader.read((NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadHoriRotation)) - 20 + k);
        Serial.println(wordRead);
      }    
      Serial.println("Reading from WerewolvesLondon_Voice_Player Last 20 entries");
      for (k = 0; k < 20; k++)
      {
				unsigned int wordRead = WerewolvesLondon_Voice_Reader.read((NUM_ARRAY_ENTRIES(WerewolvesLondon_Voice_Player)) - 20 + k);
        Serial.println(wordRead);
      }
      Serial.println("Reading from WerewolvesLondon_HeadVertRotation Last 20 entries");
      for (k = 0; k < 20; k++)
      {
				unsigned int wordRead = WerewolvesLondon_HeadVert_Reader.read((NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadVertRotation)) - 20 + k);
        Serial.println(wordRead);
      }
#endif   
#ifdef DAYO_MOVEMENTS
      Serial.println("Reading from DayO_HeadHoriRotation Last 20 entries");
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = DayO_HeadHoriRotation_Reader.read((NUM_ARRAY_ENTRIES(DayO_HeadHoriRotation)) - 20 + k);
        Serial.println(wordRead);
      }    
      Serial.println("Reading from DayO_MouthRotation Last 20 entries");
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = DayO_MouthRotation_Reader.read((NUM_ARRAY_ENTRIES(DayO_MouthRotation)) - 20 + k);
        Serial.println(wordRead);
      }  
      Serial.println("Reading from DayO_Voice_Player Last 20 entries");
      for (k = 0; k < 20; k++)
      {
        unsigned int wordRead = DayO_Voice_Player_Reader.read((NUM_ARRAY_ENTRIES(DayO_Voice_Player)) - 20 + k);
        Serial.println(wordRead);
      }  
#endif 
    }  
#endif
}
 
void loop() 
{ 
     
    // perform device playing operations
    Devices_Player.perform_devices_player();

  if (Serial.available())
  {
    char char_value = Serial.read();
    if (cmdLineIndex < CmdLineMaxSize) 
    {
      
      if (( Carriage_Return == char_value) || (CmdSeperator == char_value))
      {
        cmdLine[cmdLineIndex] = 0; // set end of string
        cmdComplete = true;
      }
      else
      {
        cmdLine[cmdLineIndex] = char_value;
      }
      cmdLineIndex++;
    }
    else
    {
      // cmd line is too long dump the characters until we get a CR then allow cmd line to start again.
      if (( Carriage_Return == char_value) || (CmdSeperator == char_value))
      {
        cmdLineIndex = 0;
        Serial.println("CmdLine to long" );
      }    
    } 
  }
  if (cmdComplete) // we have a complete command
  {
    unsigned int index = 0;   
    char* token; 
    char* restcmdLine = cmdLine;    
    int charsScanned = 0; 
    int numParms = 0;
    int value;
    
    if ((token = strtok_r(restcmdLine, delimiters, &restcmdLine)))
    {
      //Serial.print("Token is: ");
      //Serial.println(token);
      if (0 == strcmp(token, "BackDown"))
      {
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
        Serial.println("BackDown");
      }
      else if (0 == strcmp(token, "BackUp"))
      {
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_UPRIGHT);
//        delay(700);
//        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
//        delay(200);
//        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_UPRIGHT);
        
        Serial.println("BackUp");
      }
      else if (0 == strcmp(token, "EyesOff"))
      {
        Eyes_LEDs.device_write(EYE_LEDS_OFF);      
        Serial.println("EyesOff");
      }
      else if (0 == strcmp(token, "EyesOn"))
      {
        Eyes_LEDs.device_write(EYE_LEDS_ON);      
        Serial.println("EyesOn");
      }
      else if (0 == strcmp(token, "AudioBloodCurdlngScream"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + BLOOD_CURDLING_SCREAM_FILE);
        Serial.println("AudioBloodCurdlngScream"); // "Audio Play on");
      }
      else if (0 == strcmp(token, "AudioStop"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Serial.println("AudioStop");
      }
      else if (0 == strcmp(token, "HeadHorizontal"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= 120) && (value >= 60))
          {
            Head_Horizontal_Rotation_servo.device_write(value);
            Serial.print("head horizontal ");
            Serial.print(value);
            Serial.println(" deg");
          }
          else
          {
            Serial.print("Head horizontal range error ");
            Serial.print(value);
            Serial.println(" deg");
          }
        }
      }
      else if (0 == strcmp(token, "HeadVertical"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= 140) && (value >= 45))
          {
            Head_Vertical_Rotation_servo.device_write(value);
            Serial.print("head vertical ");
            Serial.print(value);
            Serial.println(" deg");
          }
          else
          {
            Serial.print("Head vertical range error ");
            Serial.print(value);
            Serial.println(" deg");
          }
        }
      }
      else if (0 == strcmp(token, "AudioMoreOftenChewing"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + MORE_OFTEN_CHEWING_AT_HEAD_FILE);
        Serial.println("AudioMoreOftenChewing");
      }
      else if (0 == strcmp(token, "AudioHissing"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + HISSING_FILE);
        Serial.println("AudioHissing");
      }
      else if (0 == strcmp(token, "AudioDayO"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + DAYO_FILE);
        Serial.println("AudioDayO");
      }
      else if (0 == strcmp(token, "AudioWerewolvesLondon"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + WEREWOLVES_OF_LONDON_FILE);
        Serial.println(token);
      }
      else if (0 == strcmp(token, "AudioShakeSenora"))
      {
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + SHAKE_SHAKE_SENORA_FILE);
        Serial.println("AudioShakeSenora");
      }
      else if (0 == strcmp(token, "Delay15SecPlayOnce"))
      {
        delay(15000);  // delay 15 seconds to 
        Devices_Player.start_play(devices_player::PLAY_ONCE);
        Serial.println("Delay15SecPlayOnce");
        {
          base_device * p_device = &Eyes_LEDs;
          p_device->device_write(EYE_LEDS_ON);      
          Serial.println("base device write to set EYE LED ON");
        }
      }
      else if (0 == strcmp(token, "PlayOnce"))
      {
        Devices_Player.start_play(devices_player::PLAY_ONCE);
        Serial.println("PlayOnce");
      }
      else if (0 == strcmp(token, "PlayStop"))
      {
        Devices_Player.stop_play();
        Serial.println("PlayStop");
      }
      else if (0 == strcmp(token, "DayOPlayerSetup"))
      //else if (0)
      {
#ifdef DAYO_MOVEMENTS
        Serial.println("DayOPlayerSetup");
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Set volume Max for mp3
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + 9); // 10 is max volume 
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(DayO_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
        
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &DayO_HeadHoriRotation_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_HeadHoriRotation));  // values in PROGMEM
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &DayO_HeadVertRotation_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_HeadVertRotation)); // values in PROGMEM
        Devices_Player.register_device (&Head_Mouth_Rotation_servo,
                                        &DayO_MouthRotation_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_MouthRotation)); // values in PROGMEM
//        Devices_Player.register_device (&Eyes_LEDs,
//                                        pgm_get_far_address(DayO_Eyes_LEDs),
//                                        NUM_ARRAY_ENTRIES(DayO_Eyes_LEDs); // values in PROGMEM
//        Devices_Player.register_device (&Pneumatic_Back_relay,
//                                        pgm_get_far_address(DayO_Pneumatic_Back),
//                                        NUM_ARRAY_ENTRIES(DayO_Pneumatic_Back)); // values in PROGMEM
        Devices_Player.register_device (&Voice_Player,
                                        &DayO_Voice_Player_Reader,
                                        NUM_ARRAY_ENTRIES(DayO_Voice_Player)); // values in PROGMEM
#endif
      }
      else if (0 == strcmp(token, "WerewolvesLondonPlayerSetup"))
      //else if (0)
      {
#ifdef WEREWOLVESLONDON_MOVEMENTS
        Serial.println("WerewolvesLondonPlayerSetup");
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Set volume Max for mp3
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + 9); // 10 is max volume 
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(WerewolvesLondon_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
        
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &WerewolvesLondon_HeadHori_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadHoriRotation));  // values in PROGMEM
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &WerewolvesLondon_HeadVert_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_HeadVertRotation)); // values in PROGMEM
        Devices_Player.register_device (&Head_Mouth_Rotation_servo,
                                        &WerewolvesLondon_Mouth_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_MouthRotation)); // values in PROGMEM
//        Devices_Player.register_device (&Eyes_LEDs,
//                                        pgm_get_far_address(WerewolvesLondon_Eyes_LEDs),
//                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_Eyes_LEDs); // values in PROGMEM
//        Devices_Player.register_device (&Pneumatic_Back_relay,
//                                        pgm_get_far_address(WerewolvesLondon_Pneumatic_Back),
//                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_Pneumatic_Back)); // values in PROGMEM
        Devices_Player.register_device (&Voice_Player,
                                        &WerewolvesLondon_Voice_Reader,
                                        NUM_ARRAY_ENTRIES(WerewolvesLondon_Voice_Player)); // values in PROGMEM
#endif                                        
      }
      else if (0 == strcmp(token, "VampirePlayerSetup"))
      {
        Serial.println("VampirePlayerSetup");
        // Stop play and Unregister all devices
        Devices_Player.stop_play();
        Devices_Player.unregister_all_devices();
        // Setup voice player to be stopped and at max volume
        Voice_Player.Initialize(8);
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::VOLUME << 8) + 9); // 10 is max volume
    
        
        // Setup interval for entries in the device player
        Devices_Player.set_play_interval(device_play_interval); //
        
        // register the devices with the devices player along with the table of values to play
    
        Devices_Player.register_device (&Head_Horizontal_Rotation_servo,
                                        &Head_Horizontal_Rotation_Reader,
                                        NUM_ARRAY_ENTRIES(Head_Horizontal_Rotation_values));
        Devices_Player.register_device (&Head_Vertical_Rotation_servo,
                                        &Head_Vertical_Rotation_Reader,
                                        NUM_ARRAY_ENTRIES(Head_Vertical_Rotation_values));
        Devices_Player.register_device (&Eyes_LEDs,
                                        &Eyes_LEDs_Reader,
                                        NUM_ARRAY_ENTRIES(Eyes_LEDs_values));
        Devices_Player.register_device (&Pneumatic_Back_relay,
                                        &Pneumatic_Back_Reader,
                                        NUM_ARRAY_ENTRIES(Pneumatic_Back_values));
        Devices_Player.register_device (&Voice_Player,
                                        &Voice_Player_Reader,
                                        NUM_ARRAY_ENTRIES(Voice_Player_values));
      }
      else if (0 == strcmp(token, "Mouth"))
      {
        if (sscanf(restcmdLine, "%d", &value) == 1)                   
        {
          if ((value <= 110) && (value >= 80))
          {
            Head_Mouth_Rotation_servo.device_write(value);
            Serial.print("Mouth ");
            Serial.print(value);
            Serial.println(" deg");
          }
          else
          {
            Serial.print("Mouth Range error ");
            Serial.print(value);
            Serial.println(" deg");
          }
        }
      }
      else if (0 == strcmp(token, "ImuRead"))
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS))
          {
            sensors_event_t event; 
            Adafruit_sensors[sensorNumber].sensor->getEvent(&event);
        
            /* Display the floating point data */
            Serial.print(Adafruit_sensors[sensorNumber].name);
            Serial.print(" X deg: ");
            Serial.print(event.orientation.x, 4);
            Serial.print("\tY deg: ");
            Serial.print(event.orientation.y, 4);
            Serial.print("\tZ deg: ");
            Serial.print(event.orientation.z, 4);
            Serial.println("");
          }
          else
          {
            Serial.println("ImuRead range error");
          }
        }
        else
        {
          Serial.println("ImuRead invalid params");
        }
        
#ifdef  IncludeSparkFunLSM9DS1
        if ( SparkFun_imu.gyroAvailable() )
        {
          SparkFun_imu.readGyro();
        }
        if ( SparkFun_imu.accelAvailable() )
        {
          SparkFun_imu.readAccel();
        }
        if ( SparkFun_imu.magAvailable() )
        {
          SparkFun_imu.readMag();
        }
        printGyro(SparkFun_imu.gx, SparkFun_imu.gy, SparkFun_imu.gz, false);
        printGyro(SparkFun_imu.calcGyro(SparkFun_imu.gx), SparkFun_imu.calcGyro(SparkFun_imu.gy), SparkFun_imu.calcGyro(SparkFun_imu.gz), true);
        printAccel(SparkFun_imu.ax, SparkFun_imu.ay, SparkFun_imu.az, false);
        printAccel(SparkFun_imu.calcAccel(SparkFun_imu.ax), SparkFun_imu.calcAccel(SparkFun_imu.ay), SparkFun_imu.calcAccel(SparkFun_imu.az), true);
        printMag(SparkFun_imu.mx, SparkFun_imu.my, SparkFun_imu.mz, false);
        printMag(SparkFun_imu.calcMag(SparkFun_imu.mx), SparkFun_imu.calcMag(SparkFun_imu.my), SparkFun_imu.calcMag(SparkFun_imu.mz), true);        
        printAttitude(SparkFun_imu.ax, SparkFun_imu.ay, SparkFun_imu.az, 
                     -SparkFun_imu.my, -SparkFun_imu.mx, SparkFun_imu.mz);
#endif
      }
      else if (0 == strcmp(token, "Imu2Read"))
      {
 #ifdef  IncludeSparkFunLSM9DS1       
        if ( SparkFun_imu2.gyroAvailable() )
        {
          SparkFun_imu2.readGyro();
        }
        if ( SparkFun_imu2.accelAvailable() )
        {
          SparkFun_imu2.readAccel();
        }
        if ( SparkFun_imu2.magAvailable() )
        {
          SparkFun_imu2.readMag();
        }
        printGyro(SparkFun_imu2.gx, SparkFun_imu2.gy, SparkFun_imu2.gz, false);
        printGyro(SparkFun_imu2.calcGyro(SparkFun_imu2.gx), SparkFun_imu2.calcGyro(SparkFun_imu2.gy), SparkFun_imu2.calcGyro(SparkFun_imu2.gz), true);
        printAccel(SparkFun_imu2.ax, SparkFun_imu2.ay, SparkFun_imu2.az, false);
        printAccel(SparkFun_imu2.calcAccel(SparkFun_imu2.ax), SparkFun_imu2.calcAccel(SparkFun_imu2.ay), SparkFun_imu2.calcAccel(SparkFun_imu2.az), true);
        printMag(SparkFun_imu2.mx, SparkFun_imu2.my, SparkFun_imu2.mz, false);
        printMag(SparkFun_imu2.calcMag(SparkFun_imu2.mx), SparkFun_imu2.calcMag(SparkFun_imu2.my), SparkFun_imu2.calcMag(SparkFun_imu2.mz), true);        
        printAttitude(SparkFun_imu2.ax, SparkFun_imu2.ay, SparkFun_imu2.az, 
                     -SparkFun_imu2.my, -SparkFun_imu2.mx, SparkFun_imu2.mz);
#endif
      }
      else if (0 == strcmp(token, "ImuCalibrate"))
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS))
          {
            uint8_t system_status, self_test_result, system_error;         
            uint8_t sysCalState,  gyroCalState,  accelCalState,  magCalState;
            
            // Get and display system status 
            Serial.print(Adafruit_sensors[sensorNumber].name);
            Adafruit_sensors[sensorNumber].sensor->getSystemStatus(&system_status, &self_test_result, &system_error);
            Serial.print(" system_status: ");
            Serial.print(system_status);
            Serial.print("\tself_test_result: ");
            Serial.print(self_test_result);
            Serial.print("\tsystem_error: ");
            Serial.print(system_error);
            Serial.println("");
            
            // Get and display cal states
            Adafruit_sensors[sensorNumber].sensor->getCalibration( &sysCalState,  &gyroCalState,  &accelCalState,  &magCalState); 
            Serial.print(Adafruit_sensors[sensorNumber].name);
            Serial.print(" sysCalState: ");
            Serial.print(sysCalState);
            Serial.print("\tgyroCalState: ");
            Serial.print(gyroCalState);
            Serial.print("\taccelCalState: ");
            Serial.print(accelCalState);
            Serial.print("\tmagCalState: ");
            Serial.print(magCalState);
            Serial.println("");
  
            // Get and display calibration values
            adafruit_bno055_offsets_t offsets_type;
            if (Adafruit_sensors[sensorNumber].sensor->getSensorOffsets(offsets_type))
            {
              Serial.print(Adafruit_sensors[sensorNumber].name);
              Serial.print(" gyro offsets: x ");
              Serial.print(offsets_type.gyro_offset_x);
              Serial.print(", y "); 
              Serial.print(offsets_type.gyro_offset_y);
              Serial.print(", z "); 
              Serial.println(offsets_type.gyro_offset_z);
              Serial.print(" accel offsets: x ");
              Serial.print(offsets_type.accel_offset_x);
              Serial.print(", y "); 
              Serial.print(offsets_type.accel_offset_y);
              Serial.print(", z "); 
              Serial.print(offsets_type.accel_offset_z);
              Serial.print(" accel radius: ");
              Serial.print(offsets_type.accel_radius);
              Serial.print(" mag offsets: x ");
              Serial.print(offsets_type.mag_offset_x);
              Serial.print(", y "); 
              Serial.print(offsets_type.mag_offset_y);
              Serial.print(", z "); 
              Serial.print(offsets_type.mag_offset_z);
              Serial.print(" mag radius: ");
              Serial.print(offsets_type.mag_radius);
              Serial.println("");
            }
            else
            {
              Serial.println("getSensorOffset not fully calibd");
            }      
          }
          else
          {
            Serial.println("ImuRead range error");
          }
        }
        else
        {
          Serial.println("ImuRead invalid parms");
        }
        
#ifdef  IncludeSparkFunLSM9DS1
        SparkFun_imu.calibrate(false);
        printGyro(SparkFun_imu.gBiasRaw[0], SparkFun_imu.gBiasRaw[1], SparkFun_imu.gBiasRaw[2], false);
        printGyro(SparkFun_imu.gBias[0], SparkFun_imu.gBias[1], SparkFun_imu.gBias[2], true);
        printAccel(SparkFun_imu.aBiasRaw[0], SparkFun_imu.aBiasRaw[1], SparkFun_imu.aBiasRaw[2], false);
        printAccel(SparkFun_imu.aBias[0], SparkFun_imu.aBias[1], SparkFun_imu.aBias[2], true);
        printMag(SparkFun_imu.mBiasRaw[0], SparkFun_imu.mBiasRaw[1], SparkFun_imu.mBiasRaw[2], false);
        printMag(SparkFun_imu.mBias[0], SparkFun_imu.mBias[1], SparkFun_imu.mBias[2], true);
#endif       

      }
      else if (0 == strcmp(token, "Imu2Calibrate"))
      {
#ifdef  IncludeSparkFunLSM9DS1        
        SparkFun_imu2.calibrate(false);
        printGyro(SparkFun_imu2.gBiasRaw[0], SparkFun_imu2.gBiasRaw[1], SparkFun_imu2.gBiasRaw[2], false);
        printGyro(SparkFun_imu2.gBias[0], SparkFun_imu2.gBias[1], SparkFun_imu2.gBias[2], true);
        printAccel(SparkFun_imu2.aBiasRaw[0], SparkFun_imu2.aBiasRaw[1], SparkFun_imu2.aBiasRaw[2], false);
        printAccel(SparkFun_imu2.aBias[0], SparkFun_imu2.aBias[1], SparkFun_imu2.aBias[2], true);
        printMag(SparkFun_imu2.mBiasRaw[0], SparkFun_imu2.mBiasRaw[1], SparkFun_imu2.mBiasRaw[2], false);
        printMag(SparkFun_imu2.mBias[0], SparkFun_imu2.mBias[1], SparkFun_imu2.mBias[2], true); 
#endif      
			}
      else if (0 == strcmp(token, "ImuGetStoredCalibData"))
      	// gets stored calib offsets data from eeprom and sets IMU with that offset data
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS) && (sensorNumber < Num_Eeprom_Cal_Sensors))
          {
            // Get calibration values from eeprom
            uint8_t adafruit_bno055_offsets_raw[Per_Sensor_Cal_Data_Size_Eeprom];
            for (int i = 0; i < Per_Sensor_Cal_Data_Size_Eeprom; i++)
            {
            	adafruit_bno055_offsets_raw[i] = EEPROM.read(Sensors_Cal_Data_Eeprom_adrs + (sensorNumber * Per_Sensor_Cal_Data_Size_Eeprom) + i);
            	Serial.print("Offset ");
            	Serial.print(i);
            	Serial.print(" Value ");
            	Serial.println(adafruit_bno055_offsets_raw[i]);
            }
            // set values into IMU           
            Adafruit_sensors[sensorNumber].sensor->setSensorOffsets(&adafruit_bno055_offsets_raw[0]);
          }
          else
          {
            Serial.println("ImuGetStoredCalibData sensor number range error");
          }
        }
        else
        {
          Serial.println("ImuGetStoredCalibData invalid parms");
        }
      }
      else if (0 == strcmp(token, "ImuSetStoredCalibData"))
      	// gets calibration offsets from IMU and stores them in eeprom
      {
        int numItems = 0;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d", &sensorNumber)) >= 1)
        {
          if ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS) && (sensorNumber < Num_Eeprom_Cal_Sensors))
          {
            uint8_t adafruit_bno055_offsets_raw[Per_Sensor_Cal_Data_Size_Eeprom];
            // Get calibration values from IMU
            if (Adafruit_sensors[sensorNumber].sensor->getSensorOffsets(&adafruit_bno055_offsets_raw[0]))
            {
	            for (int i = 0; i < Per_Sensor_Cal_Data_Size_Eeprom; i++)
	            {
	            	EEPROM.write(Sensors_Cal_Data_Eeprom_adrs + (sensorNumber * Per_Sensor_Cal_Data_Size_Eeprom) + i, adafruit_bno055_offsets_raw[i]);
	            	Serial.print("Offset ");
	            	Serial.print(i);
	            	Serial.print(" Value ");
	            	Serial.println(adafruit_bno055_offsets_raw[i]);
	            }
						}
            else
            {
							Serial.println("ImuSetStoredCalibData IMU not calibrated error, not storing offsets from IMU");
            }
          }
          else
          {
            Serial.println("ImuSetStoredCalibData sensor number range error");
          }
        }
        else
        {
          Serial.println("ImuGetStoredCalibData invalid parms");
        }
      }
      else if (0 == strcmp(token, "Visualize3DStop"))
      {
        Adafruit3DVisualizeEnabled = false;
        Serial.println("Visualize3DStop");
      }
      else if (0 == strcmp(token, "Visualize3D"))
      {
        int numItems = 0;
        int periodMsec;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d %d", &periodMsec, &sensorNumber)) >= 2)
        {
          if ((periodMsec >= 10) && ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS)))
          {
            Serial.print("Visualize3D: period msec ");
            Serial.print(periodMsec);
            Serial.print(" Sensor to Visualize: ");
            Serial.println(Adafruit_sensors[sensorNumber].name);
            AdafruitSensorReadPeriodMsec = periodMsec;
            AdafruitSensorToVisualize = sensorNumber;
            AdafruitSensorReadTimeout = millis(); // force timeout right away
            Adafruit3DVisualizeEnabled = true; 
          }
          else
          {
            Serial.println("Visualize3D: range error");
          }    
        }
        else
        {
          Serial.println("Visualize3D: Invalid parms");
        }
      }
      else if (0 == strcmp(token, "ImusShowPitchDiffStop"))
      {
      	AdafruitImusPitchDiffEnabled = false;
        Serial.print("ImusShowPitchDiffStop");
      }
      else if (0 == strcmp(token, "ImusShowPitchDiff"))
      {

        int numItems = 0;
        int periodMsec;
        int sensorNumber1 = 0;
        int sensorNumber2 = 0;
        if ((numItems = sscanf(restcmdLine, "%d %d %d", &periodMsec, &sensorNumber1, &sensorNumber2)) >= 3)
        {
          if ((periodMsec >= 10) && ((sensorNumber1 >= 0) && (sensorNumber1 < MAX_ADAFRUIT_SENSORS)) &&
          	((sensorNumber2 >= 0) && (sensorNumber2 < MAX_ADAFRUIT_SENSORS))
          	)
          {
            Serial.print("ImusShowPitchDiff: period msec ");
            Serial.print(periodMsec);
            Serial.print(" Sensor1 used: ");
            Serial.println(Adafruit_sensors[sensorNumber1].name);
            Serial.print(" Sensor2 used: ");
            Serial.println(Adafruit_sensors[sensorNumber2].name);
            AdafruitImusPitchDiffControl.periodMs = periodMsec;
            AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor1 = sensorNumber1;
            AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor2 = sensorNumber2;
            AdafruitImusPitchDiffControl.timeout = millis(); // force timeout right away
          	// Read sensors for difference at start to treat as 0 base diff.
		        sensors_event_t event1; 
		        sensors_event_t event2; 
		        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor1].sensor->getEvent(&event1);
		        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor2].sensor->getEvent(&event2);		
		        AdafruitImusPitchDiffControl.pitch1ZeroBase = (int)(event1.orientation.z);
		        AdafruitImusPitchDiffControl.pitch2ZeroBase = (int)(event2.orientation.z);
      			AdafruitImusPitchDiffEnabled = true;
          }
          else
          {
            Serial.println("ImusShowPitchDiff: range error");
          }    
        }
        else
        {
          Serial.println("ImusShowPitchDiff: Invalid parms");
        }      
      }
      else if (0 == strcmp(token, "ImuMouthControlStop"))
      {
        AdafruitImuMouthCtrlEnabled = false;
        Serial.print("ImuMouthControlStop");
      }
      else if (0 == strcmp(token, "ImuMouthControl"))
      {
        int numItems = 0;
        int periodMsec;
        int sensorNumber = 0;
        if ((numItems = sscanf(restcmdLine, "%d %d", &periodMsec, &sensorNumber)) >= 2)
        {
          if ((periodMsec >= 10) && ((sensorNumber >= 0) && (sensorNumber < MAX_ADAFRUIT_SENSORS)))
          {
            Serial.print("ImuMouthControl: period msec ");
            Serial.print(periodMsec);
            Serial.print(" Sensor used: ");
            Serial.println(Adafruit_sensors[sensorNumber].name);
            AdafruitImuMouthCtrlPeriodMsec = periodMsec;
            AdafruitImuMouthCtrlSensor = sensorNumber;
            AdafruitImuMouthCtrlTimeout = millis(); // force timeout right away
            AdafruitImuMouthCtrlEnabled = true;
            NumMouthDegreeSettings= 0; // start over
            
            sensors_event_t event; 
            Adafruit_sensors[AdafruitImuMouthCtrlSensor].sensor->getEvent(&event);
            ImuMouthCtrlRefFrame.heading = event.orientation.x;
            ImuMouthCtrlRefFrame.pitch = event.orientation.y;  // TODO check if y is pitch or z is pitch ????
            ImuMouthCtrlRefFrame.roll = event.orientation.z;
          }
          else
          {
            Serial.println("ImuMouthControl: range error");
          }    
        }
        else
        {
          Serial.println("ImuMouthControl: Invalid parms");
        }
      }
#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
      else if (0 == strcmp(token, "ImuHeadMouthStop"))
      {
        AdafruitImuHeadMouthEnabled = false;
        // stop any audio file
        Voice_Player.device_write(mp3_device::STOP << 8);
        Serial.println("ImuHeadMouthStop");
      }
      else if (0 == strcmp(token, "ImuHeadMouth"))
      {
        int numItems = 0;
        int periodMsec;
        int audioFile;
        int audioDelayInPeriods;
        if ((numItems = sscanf(restcmdLine, "%d %d %d", &periodMsec, &audioFile, &audioDelayInPeriods)) >= 3)
        {
          if (periodMsec >= 10)
          {            
            Serial.print("ImuHeadMouth: period msec ");
            Serial.print(periodMsec);
            Serial.print(" AudioFile ");
            Serial.print(audioFile);
            Serial.print(" audioDelayInPeriods ");
            Serial.println(audioDelayInPeriods);
            AdafruitImuHeadMouthPeriodMs = periodMsec;
            AdafruitImuHeadMouthTimeout = millis(); // force timeout right away
            AdafruitImuHeadMouthAudioFile = audioFile;
            AdafruitImuHeadMouthAudioDelay = audioDelayInPeriods;            
            AdafruitImuHeadMouthEnabled = true;
            
            
            // Get Reference Frames to start from
            sensors_event_t event; 
            Adafruit_sensors[ImuHeadVerticalServoControl.AdafruitImuCtrlSensor].sensor->getEvent(&event);
            ImuHeadVerticalServoControl.NumDegreeSettings= 0; // start over
            ImuHeadVerticalServoControl.ImuCtrlRefFrame.heading = event.orientation.x;
            ImuHeadVerticalServoControl.ImuCtrlRefFrame.pitch = event.orientation.z; 
            ImuHeadVerticalServoControl.ImuCtrlRefFrame.roll = event.orientation.y;
            Serial.print("ImuHeadMouth Vert: period msec ");
            Serial.print(periodMsec);

            
            ImuHeadHorizontalServoControl.NumDegreeSettings= 0; // start over
            // Horizontal uses same IMU as vertical 
            ImuHeadHorizontalServoControl.ImuCtrlRefFrame.heading = event.orientation.x;
            ImuHeadHorizontalServoControl.ImuCtrlRefFrame.pitch = event.orientation.z; 
            ImuHeadHorizontalServoControl.ImuCtrlRefFrame.roll = event.orientation.y;
            
            
            Adafruit_sensors[ImuMouthServoControl.AdafruitImuCtrlSensor].sensor->getEvent(&event);
            ImuMouthServoControl.NumDegreeSettings= 0; // start over
            ImuMouthServoControl.ImuCtrlRefFrame.heading = event.orientation.x;
            ImuMouthServoControl.ImuCtrlRefFrame.pitch = event.orientation.z; 
            ImuMouthServoControl.ImuCtrlRefFrame.roll = event.orientation.y;

          }
          else
          {
            Serial.println("ImuHeadMouth: range error");
          }    
        }
        else
        {
          Serial.println("ImuHeadMouth: Invalid parms");
        }
      }
#endif
#ifdef MadgwickFilterTestOps
      else if (0 == strcmp(token, "MadgwickFilter"))
      {
        char filterOutputActionstr [30];
        bool start_filter = false;
        int numItems = 0;
        int filterOutputParam2;
        if ((numItems = sscanf(restcmdLine, "%d %29s %d", &value, filterOutputActionstr, &filterOutputParam2)) >= 2)                   
        {
          if (0 == strcmp(filterOutputActionstr, "stop"))
          {
            Serial.println("Madgwick Filter operation stopped ");
            MadgwickFilterTestEnabled = false;
          }
          else if ((value < 1) || (value > 100))
          {          
            Serial.println("Madgwick Filter Rate out of range ");            
          }
          else 
          {
            if (0 == strcmp(filterOutputActionstr, "visualize101"))
            {
              Serial.println("Madgwick Filter Output Action visualize101");
              start_filter = true;
              MadgwickFilterAction = FilterActionVisualize101;
            }
            else if (0 == strcmp(filterOutputActionstr, "mouth"))
            {
              Serial.println("Madgwick Filter Output Action mouth");
              start_filter = true;
              MouthFilterTimeout = millis();
              MadgwickFilterAction = FilterActionMouth;
            }
            else if (0 == strcmp(filterOutputActionstr, "ImuRead"))
            {
              Serial.println("Imu Read at rate");
              start_filter = true;
              MouthFilterTimeout = millis();
              MadgwickFilterAction = FilterActionImuRead;
              if (numItems >= 3)
              {
                ImuReadOps = filterOutputParam2;
              }
              else
              {
                ImuReadOps = 0xFF; // all of them
              }
            }
            else if (0 == strcmp(filterOutputActionstr, "ImuReadAttitude"))
            {
              Serial.println("Imu Read at rate");
              start_filter = true;
              MouthFilterTimeout = millis();
              MadgwickFilterAction = FilterActionImuReadAttitude;
            }
//            else if (0 == strcmp(filterOutputActionstr, "mouthAndhead"))
//            {
//              Serial.println("Madgwick Filter Output Action mouth and head");
//              start_filter = true;
//              MadgwickFilterAction = FilterActionMouthAndHead;
//            }
            else
            {
              Serial.println("Madgwick Filter Output Action Invalid");
            }
            if (start_filter)
            {           
              Serial.print("Madgwick Filter started with update rate ");
              Serial.print(value);
              Serial.println(" Hz.  Rate you use should yield an integral number of millisecond period ");
              filter.begin(value);
              MadgwickFilterTestEnabled = true;
              MadgwickFilterTestUpdatePeriod = 1000/value;
              MadgwickFilterTestTimeout = millis() + MadgwickFilterTestUpdatePeriod;
            }
          }
        }
        else
        {
          Serial.println("Madgwick Filter Invalid parameters");
        }
      }
#endif
      else
      {
        Serial.print("Unknown Cmd: ");
        Serial.println(token);       
      }
    }
    // reset command line and completion indication
    cmdComplete = false;
    cmdLineIndex = 0;    
  }
  
  switch (dbg_prop_user_control_state){
    case 1:
      if (prop_user_control_timeout < millis()){
        Eyes_LEDs.device_write(EYE_LEDS_OFF);
    //    Head_Horizontal_Rotation_servo.device_write(90);
    //    Head_Vertical_Rotation_servo.device_write(90);
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_BENTOVER);
    //    Serial.println("LED high");
        prop_user_control_timeout = millis() + 1000;
        dbg_prop_user_control_state = 2;
      }
      break;
    case 2:
      if (prop_user_control_timeout < millis()){
    
        Eyes_LEDs.device_write(EYE_LEDS_ON);
    //    Head_Horizontal_Rotation_servo.device_write(120);
    //    Head_Vertical_Rotation_servo.device_write(100);
        Pneumatic_Back_relay.device_write(PNEUMATIC_BACK_UPRIGHT);
    //    Serial.println("LED low");
         prop_user_control_timeout = millis() + 1000;
         dbg_prop_user_control_state = 1;
      }
     break;
  }
  
  if (Adafruit3DVisualizeEnabled )
  {
    if (AdafruitSensorReadTimeout <= millis())
    {
      AdafruitSensorReadTimeout += AdafruitSensorReadPeriodMsec;
      sensors_event_t event; 
      Adafruit_sensors[AdafruitSensorToVisualize].sensor->getEvent(&event);
  
      /* Display the information as the visualize processing sketch needs it */
      Serial.print(F("Orientation: "));
      Serial.print((float)event.orientation.x);
      Serial.print(F(" "));
      Serial.print((float)event.orientation.y);
      Serial.print(F(" "));
      Serial.print((float)event.orientation.z);
      Serial.println(F(""));
      /* Also send calibration data for each sensor. */
      uint8_t sys, gyro, accel, mag = 0;
      Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
      Serial.print(F("Calibration: "));
      Serial.print(sys, DEC);
      Serial.print(F(" "));
      Serial.print(gyro, DEC);
      Serial.print(F(" "));
      Serial.print(accel, DEC);
      Serial.print(F(" "));
      Serial.println(mag, DEC); 
      
      if (AdafruitSensorReadTimeout <= millis())
      {
        Serial.println("AdafruitSensorReadTimeout to far behind. Resetting to current time");
        AdafruitSensorReadTimeout = millis();
      }
    }
  }  
  if (AdafruitImusPitchDiffEnabled )
  {
    if (AdafruitImusPitchDiffControl.timeout <= millis())
    {
      AdafruitImusPitchDiffControl.timeout += AdafruitImusPitchDiffControl.periodMs;
      {
        int pitch1;
        int pitch2;
        int diffRelativeToBase;
        int diff;
        int frameBaseDiff;
        // Get new IMU positions all at same time
        sensors_event_t event1; 
        sensors_event_t event2; 
        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor1].sensor->getEvent(&event1);
        Adafruit_sensors[AdafruitImusPitchDiffControl.AdafruitImuCtrlSensor2].sensor->getEvent(&event2);

        pitch1 = (int)(event1.orientation.z);
        pitch2 = (int)(event2.orientation.z);
        // Handle the case where the start and end point cross over the 0/360 point by 
        // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw pitch > 180 it is assumed to 
        // be because we have transitioned across the 0/360 boundary going form the start to end point
				diff = pitch2 - pitch1;
        if (diff > 179)
        {
          diff -= 360;
        }
        else if (diff < -179)
        {
          diff += 360;
        }
        // calculate starting base diff
        frameBaseDiff = AdafruitImusPitchDiffControl.pitch2ZeroBase - AdafruitImusPitchDiffControl.pitch1ZeroBase;
        if (frameBaseDiff > 179)
        {
          frameBaseDiff -= 360;
        }
        else if (frameBaseDiff < -179)
        {
          frameBaseDiff += 360;
        }
        diffRelativeToBase = diff - frameBaseDiff;
        
        
	      // Print the current angles and difference
	      Serial.print("diffRelBase, diff, pitch1, pitch2:  ");
	      Serial.print(diffRelativeToBase);
	      Serial.print(" ");
	      Serial.print(diff);     
	      Serial.print(" ");
	      Serial.print(pitch1);
	      Serial.print(" ");
	      Serial.print(pitch2);
	      Serial.println("");
      }      
      if (AdafruitImusPitchDiffControl.timeout <= millis())
      {
        Serial.println("AdafruitImusPitchDiffControl.timeout to far behind. Resetting to current time");
        AdafruitImusPitchDiffControl.timeout = millis();
      }
    }
  }  
  if (AdafruitImuMouthCtrlEnabled )
  {
    if (AdafruitImuMouthCtrlTimeout <= millis())
    {
      AdafruitImuMouthCtrlTimeout += AdafruitImuMouthCtrlPeriodMsec;
      if (NumMouthDegreeSettings > 0)
      // still moving servo to final position using calculated array of mouth positions (settings)
      {
          Head_Mouth_Rotation_servo.device_write(MouthDegreeSettings[MouthDegreeSettingsIndex]);
          // increment index, decrement num settings
          MouthDegreeSettingsIndex++;
          NumMouthDegreeSettings--;
      }
      else
      {
        int mouthAngle;
        int degreeChange;
        int currentMouthAngle;
        const int pitchToMouthAngeOffsetDeg = 90; // position for mouth relative to pitch .  adjusted pitch + offset = mouth angle to use
        // Get new IMU position for moving servo to
        sensors_event_t event; 
        Adafruit_sensors[AdafruitImuMouthCtrlSensor].sensor->getEvent(&event);
        // Use pitch for the mouth control
        int pitch = (int)(event.orientation.y);
        currentMouthAngle = (int)(Head_Mouth_Rotation_servo.device_read());
        int zeroBasedPitch = pitch - (int)(ImuMouthCtrlRefFrame.pitch);
        // Handle the case where heading start and end point cross over the 0/360 point by 
        // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
        // be because we have transitioned across the 0/360 boundary going form the start to end point
        if (zeroBasedPitch > 179)
        {
          zeroBasedPitch -= 360;
        }
        else if (zeroBasedPitch < -179)
        {
          zeroBasedPitch += 360;
        }
        mouthAngle = zeroBasedPitch + pitchToMouthAngeOffsetDeg;
        // Limit Mouth Angle to between 110 and 80 degrees
        if (mouthAngle > 110)
        {
          mouthAngle = 110;
        }      
        else if (mouthAngle < 80)
        {
          mouthAngle = 80;
        }
       
        degreeChange = mouthAngle - currentMouthAngle;
        bool BackBentOver = (Pneumatic_Back_relay.device_read() == PNEUMATIC_BACK_BENTOVER);
        NumMouthDegreeSettings = mouthServoSettingsForDegChng(currentMouthAngle, degreeChange, AdafruitImuMouthCtrlPeriodMsec, BackBentOver, MaxMouthDegreeSettings, MouthDegreeSettings);
        MouthDegreeSettingsIndex = 0;  // index for first entry in mouth settings array
        if (NumMouthDegreeSettings <= 0)
        {
          Serial.println("Error: Can't have <= 0 mouth settings ");
          NumMouthDegreeSettings = 0; // to allow things to continue on
        }
        else
        {
          // set servo to first angle in the mouth degree settings array
          Head_Mouth_Rotation_servo.device_write(MouthDegreeSettings[MouthDegreeSettingsIndex]);
          // increment index, decrement num settings
          MouthDegreeSettingsIndex++;
          NumMouthDegreeSettings--;
        }
        /* 
        Serial.print(F("Orientation: "));
        Serial.print((float)event.orientation.x);
        Serial.print(F(" "));
        Serial.print((float)event.orientation.y);
        Serial.print(F(" "));
        Serial.print((float)event.orientation.z);
        Serial.println(F(""));
        
        uint8_t sys, gyro, accel, mag = 0;
        Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
        Serial.print(F("Calibration: "));
        Serial.print(sys, DEC);
        Serial.print(F(" "));
        Serial.print(gyro, DEC);
        Serial.print(F(" "));
        Serial.print(accel, DEC);
        Serial.print(F(" "));
        Serial.println(mag, DEC);
       */ 
      }
      
      if (AdafruitImuMouthCtrlTimeout <= millis())
      {
        Serial.println("AdafruitImuMouthCtrlTimeout to far behind. Resetting to current time");
        AdafruitImuMouthCtrlTimeout = millis();
      }
    }
  }  
// ------------------------------------------------------
#ifdef ADAFRUIT_IMU_HEAD_MOUTH_OPS
  if (AdafruitImuHeadMouthEnabled )
  {
    if (AdafruitImuHeadMouthTimeout <= millis())
    {
      bool markAudioFileStartPoint = false;
      AdafruitImuHeadMouthTimeout += AdafruitImuHeadMouthPeriodMs;
      // Read the IMU sensors all together at the same time
      sensors_event_t head_event; 
      Adafruit_sensors[ADAFRUIT_IMU_HEAD].sensor->getEvent(&head_event);
      sensors_event_t mouth_event; 
      Adafruit_sensors[ADAFRUIT_IMU_MOUTH].sensor->getEvent(&mouth_event);
      // Read current back setting
      bool BackBentOver = (Pneumatic_Back_relay.device_read() == PNEUMATIC_BACK_BENTOVER);
      
      // check to see if should play audio file now
      if (AdafruitImuHeadMouthAudioDelay == 0)
      {
        // Play file
        Voice_Player.device_write(mp3_device::STOP << 8);
        Voice_Player.device_write((mp3_device::START << 8) + AdafruitImuHeadMouthAudioFile);
        AdafruitImuHeadMouthAudioDelay--;
        markAudioFileStartPoint = true;       
      }
      else if (AdafruitImuHeadMouthAudioDelay > 0)
      {
        AdafruitImuHeadMouthAudioDelay--;
      }
   
      // Handle Mouth control part ------------------------------------------------
      {
        ImuServoControlDef & ImuServoCtrlUsing = ImuMouthServoControl;
        
        if (ImuServoCtrlUsing.NumDegreeSettings > 0)
        // still moving servo to final position using calculated array of positions (settings)
        {
            ImuServoCtrlUsing.servo->device_write(ImuServoCtrlUsing.DegreeSettings[ImuServoCtrlUsing.DegreeSettingsIndex]);
            // increment index, decrement num settings
            ImuServoCtrlUsing.DegreeSettingsIndex++;
            ImuServoCtrlUsing.NumDegreeSettings--;
        }
        else
        {
          int servoAngle;
          int degreeChange;
          int currentServoAngle;
          const int pitchToMouthAngeOffsetDeg = 110; // Mouth closed positon associated with zero based pitch angle.  Assumes we start in mouth closed position
          // Use pitch for the mouth control
          float fpitchMouth = mouth_event.orientation.z;         
          float fpitchHead = convertPitchForHeadOrientation(head_event.orientation.z);
          float fpitchHeadRef = convertPitchForHeadOrientation(ImuHeadVerticalServoControl.ImuCtrlRefFrame.pitch);
          float fpitchMouthRef = ImuServoCtrlUsing.ImuCtrlRefFrame.pitch;         
          float fpitch = fpitchMouth - fpitchHead - (fpitchMouthRef - fpitchHeadRef);
           
          #if 0        
            int pitch = (int)(fpitchMouth);
            int zeroBasedImuAngle = pitch - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.pitch);
          #else
          	int zeroBasedImuAngle = (int)(fpitch);
          #endif
          //TODO //need to use the Imu head reference frame a and current head pitch reading still to remove head pitch movement from mouth pitch movement.
          //(int)(ImuServoCtrlUsing.ImuCtrlRefFrame.pitch)  ImuHeadVerticalServoControl.ImuCtrlRefFrame.pitch
          //  head cap showing starting level pointing straight forward as pitch of 179 slightly down and -179 slightly up.
          // mouth pitch diff shows -1 slightly down and + slightly up
          // Handle the case where heading start and end point cross over the 0/360 point by 
          // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
          // be because we have transitioned across the 0/360 boundary going form the start to end point
          if (zeroBasedImuAngle > 179)
          {
            zeroBasedImuAngle -= 360;
          }
          else if (zeroBasedImuAngle < -179)
          {
            zeroBasedImuAngle += 360;
          }
          
          // Scale mouth open angle
          zeroBasedImuAngle = scaleMouthAngle(zeroBasedImuAngle);
          
          servoAngle = zeroBasedImuAngle + pitchToMouthAngeOffsetDeg;
          // Limit Mouth Angle to between 110 and 80 degrees
          if (servoAngle > 110)
          {
            servoAngle = 110;
          }      
          else if (servoAngle < 80)
          {
            servoAngle = 80;
          }
          currentServoAngle = (int)(ImuServoCtrlUsing.servo->device_read());        
          degreeChange = servoAngle - currentServoAngle;
          ImuServoCtrlUsing.NumDegreeSettings = mouthServoSettingsForDegChng(currentServoAngle, degreeChange, AdafruitImuHeadMouthPeriodMs, BackBentOver, MaxServoDegreeSettings, ImuServoCtrlUsing.DegreeSettings);
          ImuServoCtrlUsing.DegreeSettingsIndex = 0;  // index for first entry settings array
          if (ImuServoCtrlUsing.NumDegreeSettings <= 0)
          {
            Serial.println("Error: Can't have <= 0 mouth settings ");
            ImuServoCtrlUsing.NumDegreeSettings = 0; // to allow things to continue on
          }
          else
          {
            // set servo to first angle in the degree settings array
            ImuServoCtrlUsing.servo->device_write(ImuServoCtrlUsing.DegreeSettings[ImuServoCtrlUsing.DegreeSettingsIndex]);
            // increment index, decrement num settings
            ImuServoCtrlUsing.DegreeSettingsIndex++;
            ImuServoCtrlUsing.NumDegreeSettings--;
          }
          /* 
          Serial.print(F("Orientation: "));
          Serial.print((float)event.orientation.x);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.y);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.z);
          Serial.println(F(""));
          
          uint8_t sys, gyro, accel, mag = 0;
          Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
          Serial.print(F("Calibration: "));
          Serial.print(sys, DEC);
          Serial.print(F(" "));
          Serial.print(gyro, DEC);
          Serial.print(F(" "));
          Serial.print(accel, DEC);
          Serial.print(F(" "));
          Serial.println(mag, DEC);
         */ 
        }
      }
      // Handle Head Horizontal control part ------------------------------------------------
      {
        ImuServoControlDef & ImuServoCtrlUsing = ImuHeadHorizontalServoControl;
        
        if (ImuServoCtrlUsing.NumDegreeSettings > 0)
        // still moving servo to final position using calculated array of positions (settings)
        {
            ImuServoCtrlUsing.servo->device_write(ImuServoCtrlUsing.DegreeSettings[ImuServoCtrlUsing.DegreeSettingsIndex]);
            // increment index, decrement num settings
            ImuServoCtrlUsing.DegreeSettingsIndex++;
            ImuServoCtrlUsing.NumDegreeSettings--;
        }
        else
        {
          int servoAngle;
          int degreeChange;
          int currentServoAngle;
          const int headingToHorizAngeOffsetDeg = 90; // position associated with zero based heading angle
          // Use heading for the head horizontal control
          int heading = (int)(head_event.orientation.x);
          currentServoAngle = (int)(ImuServoCtrlUsing.servo->device_read());
          int zeroBasedImuAngle = heading - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.heading);
          // Handle the case where heading start and end point cross over the 0/360 point by 
          // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
          // be because we have transitioned across the 0/360 boundary going form the start to end point
          if (zeroBasedImuAngle > 179)
          {
            zeroBasedImuAngle -= 360;
          }
          else if (zeroBasedImuAngle < -179)
          {
            zeroBasedImuAngle += 360;
          }
          servoAngle = zeroBasedImuAngle + headingToHorizAngeOffsetDeg;
          // Limit Horizontal Angle
          if (servoAngle > 120)
          {
            servoAngle = 120;
          }      
          else if (servoAngle < 60)
          {
            servoAngle = 60;
          }
         
          degreeChange = servoAngle - currentServoAngle;
          ImuServoCtrlUsing.NumDegreeSettings = HeadHoriServoSettingsForDegChng(currentServoAngle, degreeChange, AdafruitImuHeadMouthPeriodMs, BackBentOver, MaxServoDegreeSettings, ImuServoCtrlUsing.DegreeSettings);
          ImuServoCtrlUsing.DegreeSettingsIndex = 0;  // index for first entry settings array
          if (ImuServoCtrlUsing.NumDegreeSettings <= 0)
          {
            Serial.println("Error: Can't have <= 0 Head horizontal settings ");
            ImuServoCtrlUsing.NumDegreeSettings = 0; // to allow things to continue on
          }
          else
          {
            // set servo to first angle in the degree settings array
            ImuServoCtrlUsing.servo->device_write(ImuServoCtrlUsing.DegreeSettings[ImuServoCtrlUsing.DegreeSettingsIndex]);
            // increment index, decrement num settings
            ImuServoCtrlUsing.DegreeSettingsIndex++;
            ImuServoCtrlUsing.NumDegreeSettings--;
          }
          /* 
          Serial.print(F("Orientation: "));
          Serial.print((float)event.orientation.x);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.y);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.z);
          Serial.println(F(""));
          
          uint8_t sys, gyro, accel, mag = 0;
          Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
          Serial.print(F("Calibration: "));
          Serial.print(sys, DEC);
          Serial.print(F(" "));
          Serial.print(gyro, DEC);
          Serial.print(F(" "));
          Serial.print(accel, DEC);
          Serial.print(F(" "));
          Serial.println(mag, DEC);
         */ 
        }
      }
      // Handle Head Vertical control part ------------------------------------------------
      {
        ImuServoControlDef & ImuServoCtrlUsing = ImuHeadVerticalServoControl;
        if (ImuServoCtrlUsing.NumDegreeSettings > 0)
        // still moving servo to final position using calculated array of positions (settings)
        {
            ImuServoCtrlUsing.servo->device_write(ImuServoCtrlUsing.DegreeSettings[ImuServoCtrlUsing.DegreeSettingsIndex]);
            // increment index, decrement num settings
            ImuServoCtrlUsing.DegreeSettingsIndex++;
            ImuServoCtrlUsing.NumDegreeSettings--;
        }
        else
        {
          int servoAngle;
          int degreeChange;
          int currentServoAngle;
          const int pitchToVertAngeOffsetDeg = 80; // position associated with zero based pitch angle (this seems to keep head jitter down)
          // Use heading for the head horizontal control
          int pitch = (int)(head_event.orientation.z);
          currentServoAngle = (int)(ImuServoCtrlUsing.servo->device_read());
          int zeroBasedImuAngle = pitch - (int)(ImuServoCtrlUsing.ImuCtrlRefFrame.pitch);
          // Handle the case where heading start and end point cross over the 0/360 point by 
          // by assuming that the abs (end - start) < 180 degrees  ).  Thus if the raw zeroBasedPitch it > 180 it is assuemd to 
          // be because we have transitioned across the 0/360 boundary going form the start to end point
          if (zeroBasedImuAngle > 179)
          {
            zeroBasedImuAngle -= 360;
          }
          else if (zeroBasedImuAngle < -179)
          {
            zeroBasedImuAngle += 360;
          }
          // The servo is reverse where a lesser angle moves the head up and larger angle moves it down so
          // negate the zeroBasedImuAngle
          zeroBasedImuAngle = 0 - zeroBasedImuAngle;
          servoAngle = zeroBasedImuAngle + pitchToVertAngeOffsetDeg;
          // Limit Horizontal Angle
          if (servoAngle > 140)
          {
            servoAngle = 140;
          }      
          else if (servoAngle < 45)
          {
            servoAngle = 45;
          }
         
          degreeChange = servoAngle - currentServoAngle;
          ImuServoCtrlUsing.NumDegreeSettings = HeadVertServoSettingsForDegChng(currentServoAngle, degreeChange, AdafruitImuHeadMouthPeriodMs, BackBentOver, MaxServoDegreeSettings, ImuServoCtrlUsing.DegreeSettings);
          ImuServoCtrlUsing.DegreeSettingsIndex = 0;  // index for first entry settings array
          if (ImuServoCtrlUsing.NumDegreeSettings <= 0)
          {
            Serial.println("Error: Can't have <= 0 Head Vertical settings ");
            ImuServoCtrlUsing.NumDegreeSettings = 0; // to allow things to continue on
          }
          else
          {
            // set servo to first angle in the degree settings array
            ImuServoCtrlUsing.servo->device_write(ImuServoCtrlUsing.DegreeSettings[ImuServoCtrlUsing.DegreeSettingsIndex]);
            // increment index, decrement num settings
            ImuServoCtrlUsing.DegreeSettingsIndex++;
            ImuServoCtrlUsing.NumDegreeSettings--;
          }
          /* 
          Serial.print(F("Orientation: "));
          Serial.print((float)event.orientation.x);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.y);
          Serial.print(F(" "));
          Serial.print((float)event.orientation.z);
          Serial.println(F(""));
          
          uint8_t sys, gyro, accel, mag = 0;
          Adafruit_sensors[AdafruitSensorToVisualize].sensor->getCalibration(&sys, &gyro, &accel, &mag);
          Serial.print(F("Calibration: "));
          Serial.print(sys, DEC);
          Serial.print(F(" "));
          Serial.print(gyro, DEC);
          Serial.print(F(" "));
          Serial.print(accel, DEC);
          Serial.print(F(" "));
          Serial.println(mag, DEC);
         */ 
        }
      }
      // Print the current servo settings for each item (can thn be captured for replay)
      Serial.print("Servo Vert,Horz,Mouth: ");
      Serial.print((int)ImuHeadVerticalServoControl.servo->device_read());
      Serial.print(" ");
      Serial.print((int)ImuHeadHorizontalServoControl.servo->device_read());
      Serial.print(" ");
      Serial.print((int)ImuMouthServoControl.servo->device_read());
      if (markAudioFileStartPoint)
      {
        Serial.print(" Started Audio File: ");
        Serial.print(AdafruitImuHeadMouthAudioFile);
      }
      Serial.println("");

     
      if (AdafruitImuHeadMouthTimeout <= millis())
      {
        Serial.println("AdafruitImuHeadMouthTimeout to far behind. Resetting to current time");
        AdafruitImuHeadMouthTimeout = millis();
      }
    }
  }  
#endif
 
  // Madgwick Filter Test
#ifdef MadgwickFilterTestOps
  if (MadgwickFilterTestEnabled)
  {
    if (MadgwickFilterTestTimeout <= millis())
    {
      float ax, ay, az;
      float gx, gy, gz;
      float mx, my, mz;
      float roll, pitch, heading;

      MadgwickFilterTestTimeout += MadgwickFilterTestUpdatePeriod;
      if (MadgwickFilterTestTimeout <= millis())
      {
        // force to use current time
        MadgwickFilterTestTimeout = millis() + MadgwickFilterTestUpdatePeriod;
        Serial.println("Missed Madgwick Filter Test Timeout. Setting based on current time");
      }
      if ( SparkFun_imu.gyroAvailable() )
      {
        SparkFun_imu.readGyro();
      }
      if ( SparkFun_imu.accelAvailable() )
      {
        SparkFun_imu.readAccel();
      }
      if ( SparkFun_imu.magAvailable() )
      {
        SparkFun_imu.readMag();
      }
      gx = SparkFun_imu.calcGyro(SparkFun_imu.gx);
      gy = SparkFun_imu.calcGyro(SparkFun_imu.gy);
      gz = SparkFun_imu.calcGyro(SparkFun_imu.gz);
      ax = SparkFun_imu.calcAccel(SparkFun_imu.ax);
      ay = SparkFun_imu.calcAccel(SparkFun_imu.ay);
      az = SparkFun_imu.calcAccel(SparkFun_imu.az);
      mx = SparkFun_imu.calcMag(SparkFun_imu.mx);
      my = SparkFun_imu.calcMag(SparkFun_imu.my);
      mz = SparkFun_imu.calcMag(SparkFun_imu.mz);
      filter.update( gx,  gy,  gz-1.71F,  ax,  ay,  az, mx, my, mz); //try without magnetometer reading to see if works better ,  -my,  -mx,  mz);  // my and mx for LSM9DS1 are opposite to the accel so swap and take negative of them
      // print the heading, pitch and roll in the format needed by Visualize 101
      roll = filter.getRoll();
      pitch = filter.getPitch();
      heading = filter.getYaw();
      
      switch (MadgwickFilterAction) {
        case FilterActionVisualize101:
          Serial.print("Orientation: ");
          Serial.print(heading);
          Serial.print(" ");
          Serial.print(pitch);
          Serial.print(" ");
          Serial.println(roll);
          break;
        case FilterActionMouth:
          {
//            if (MouthFilterTimeout <= millis())
            {
              const int pitchToMouthAngeOffsetDeg = 90;
              const int MaxMouthChangePerPeriod = 40;  //degrees
              int mouthAngle;
              int currentMouthAngle = (int)(Head_Mouth_Rotation_servo.device_read());
              
              getAttitude(SparkFun_imu.ax, SparkFun_imu.ay, SparkFun_imu.az, -SparkFun_imu.my, -SparkFun_imu.mx, SparkFun_imu.mz, pitch, roll, heading);
              mouthAngle = (int)(pitch) + pitchToMouthAngeOffsetDeg;
              //int degreeArray[6];
              //int periods;
              //periods = mouthServoSettingsForDegChng(currentMouthAngle, currentMouthAngle - mouthAngle, 120, false, 6, degreeArray);
              
              MouthFilterTimeout = 120 + millis();  // limit updates to no faster than this.
              if (abs( mouthAngle - currentMouthAngle) >  MaxMouthChangePerPeriod)
              {
                // limit to this much changee each timeout period.
                if (mouthAngle > currentMouthAngle)
                {
                  mouthAngle = currentMouthAngle + MaxMouthChangePerPeriod;
                }
                else
                {
                  mouthAngle = currentMouthAngle - MaxMouthChangePerPeriod;
                }              
              }
              if ((mouthAngle <= 110) && (mouthAngle >= 80))  // limit mouth excursions to avoid damage
              {
                Head_Mouth_Rotation_servo.device_write(mouthAngle);
                Serial.print("Heading, pitch, roll ");
                Serial.print(heading, 2);
                Serial.print(", ");
                Serial.print(pitch, 2);
                Serial.print(", ");
                Serial.println(roll, 2);
              }
            }
          }
          break;
        case FilterActionImuRead:
          if (ImuReadOps & 0x01){
            printGyro(SparkFun_imu.gx, SparkFun_imu.gy, SparkFun_imu.gz, false);
          }
          if (ImuReadOps & 0x02){
            printGyro(SparkFun_imu.calcGyro(SparkFun_imu.gx), SparkFun_imu.calcGyro(SparkFun_imu.gy), SparkFun_imu.calcGyro(SparkFun_imu.gz), true);
          }
          if (ImuReadOps & 0x04){
            printAccel(SparkFun_imu.ax, SparkFun_imu.ay, SparkFun_imu.az, false);
          }
          if (ImuReadOps & 0x08){
            printAccel(SparkFun_imu.calcAccel(SparkFun_imu.ax), SparkFun_imu.calcAccel(SparkFun_imu.ay), SparkFun_imu.calcAccel(SparkFun_imu.az), true);
          }
          if (ImuReadOps & 0x10){
            printMag(SparkFun_imu.mx, SparkFun_imu.my, SparkFun_imu.mz, false);
          }
          if (ImuReadOps & 0x20){
            printMag(SparkFun_imu.calcMag(SparkFun_imu.mx), SparkFun_imu.calcMag(SparkFun_imu.my), SparkFun_imu.calcMag(SparkFun_imu.mz), true); 
          }            
          break;    
        case FilterActionImuReadAttitude:
          printAttitude(SparkFun_imu.ax, SparkFun_imu.ay, SparkFun_imu.az, 
                       -SparkFun_imu.my, -SparkFun_imu.mx, SparkFun_imu.mz);       
          break;    
      }
    }
  }
#endif
}

void printGyro(float gx, float gy, float gz, bool isCalculated)
{
    if (isCalculated)
    {
      Serial.print("GyroCalc: ");
    }
    else
    {
      Serial.print("GyroRaw: ");
    }
    Serial.print(gx, 2);
    Serial.print(", ");
    Serial.print(gy, 2);
    Serial.print(", ");
    Serial.print(gz, 2);
    if (isCalculated)
    {
      Serial.print(" deg/s");
    }
    Serial.println("");
}

void printAccel(float ax, float ay, float az, bool isCalculated)
{  
    if (isCalculated)
    {
      Serial.print("AccelCalc: ");
    }
    else
    {
      Serial.print("AccelRaw: ");
    }
    Serial.print(ax, 2);
    Serial.print(", ");
    Serial.print(ay, 2);
    Serial.print(", ");
    Serial.print(az, 2);
    if (isCalculated)
    {
      Serial.print(" Gs");
    }
    Serial.println("");
}

void printMag(float mx, float my, float mz, bool isCalculated)
{  
    if (isCalculated)
    {
      Serial.print("MagCalc: ");
    }
    else
    {
      Serial.print("MagRaw: ");
    }
    Serial.print(mx, 2);
    Serial.print(", ");
    Serial.print(my, 2);
    Serial.print(", ");
    Serial.print(mz, 2);
    if (isCalculated)
    {
      Serial.print(" Gauss");
    }
    Serial.println("");
}

// Calculate pitch, roll, and heading.
// Pitch/roll calculations take from this app note:
// http://cache.freescale.com/files/sensors/doc/app_note/AN3461.pdf?fpsp=1
// Heading calculations taken from this app note:
// http://www51.honeywell.com/aero/common/documents/myaerospacecatalog-documents/Defense_Brochures-documents/Magnetic__Literature_Application_notes-documents/AN203_Compass_Heading_Using_Magnetometers.pdf
void printAttitude(float ax, float ay, float az, float mx, float my, float mz)
{
  float roll = atan2(ay, az);
  float pitch = atan2(-ax, sqrt(ay * ay + az * az));
  
  float heading;
  if (my == 0)
    heading = (mx < 0) ? PI : 0;
  else
    heading = atan2(mx, my);
    
  heading -= DECLINATION * PI / 180;
  
  if (heading > PI) heading -= (2 * PI);
  else if (heading < -PI) heading += (2 * PI);
  
  // Convert everything from radians to degrees:
  heading *= 180.0 / PI;
  pitch *= 180.0 / PI;
  roll  *= 180.0 / PI;
  
  Serial.print("Pitch, Roll, Heading: ");
  Serial.print(pitch, 2);
  Serial.print(", ");
  Serial.print(roll, 2);
  Serial.print(", ");
  Serial.println(heading, 2);
}

void getAttitude(float ax, float ay, float az, float mx, float my, float mz, float &pitch, float &roll, float &heading)
{
  roll = atan2(ay, az);
  pitch = atan2(-ax, sqrt(ay * ay + az * az));
  if (my == 0)
    heading = (mx < 0) ? PI : 0;
  else
    heading = atan2(mx, my);
    
  heading -= DECLINATION * PI / 180;
  
  if (heading > PI) heading -= (2 * PI);
  else if (heading < -PI) heading += (2 * PI);
  
  // Convert everything from radians to degrees:
  heading *= 180.0 / PI;
  pitch *= 180.0 / PI;
  roll  *= 180.0 / PI;
  
}

int mouthServoSettingsForDegChng(int CurrentDegreeSetting, int degreeChange, int PeriodInMsec, bool BackBentOver, int maxEntries, int * DegreeSettingsToUse)
{
  // Determines (returns) the number of periods (each PeriodMillis long) for the servo to move the indicated number of degrees
  // as well as an arry of the degree settings to use for period 0,to num periods - 1 to set the servo to at the end of period point.
  // The array is needed as for example for a the Head vertical servo moving from the 45 degree to the 90 degree position when the back is bent over
  // requires a few 66 degree settings in between for some unknown reason. that is ......45,45,45, 45, 66,66,66,66, 90,90,90,90, ....
  // For the mouth servo, per its spec,  it can move, no load, 60 degrees in 120 milliseconds at 6volt supply voltage to the servo at no load
  float degreesPerMsec =  50.0/120.0; // Give mouth servo extra time.
  int periods = ceil(abs((((float)degreeChange) / degreesPerMsec)/(float)PeriodInMsec));
  if (periods > maxEntries)
  {
    periods =  maxEntries;
    Serial.println("mouthServoSettingsForDegChng: Exceeded max entries");
  }
  if (periods <= 0)
  {
    periods = 1;
  }
  // set all entries to the final end point (i.e. no intermediate settings and just allow the number of periods time to reach that point)
  for (int i = 0; i < periods; i++)
  {
    DegreeSettingsToUse[i] = CurrentDegreeSetting + degreeChange;
  }
  return periods;   
}

int HeadVertServoSettingsForDegChng(int CurrentDegreeSetting, int degreeChange, int PeriodInMsec, bool BackBentOver, int maxEntries, int * DegreeSettingsToUse)
{
  // Determines (returns) the number of periods (each PeriodMillis long) for the servo to move the indicated number of degrees
  // as well as an arry of the degree settings to use for period 0,to num periods - 1 to set the servo to at the end of period point.
  // The array is needed as for example for a the Head vertical servo moving from the 45 degree to the 90 degree position when the back is bent over
  // requires a few 66 degree settings in between for some unknown reason. that is ......45,45,45, 45, 66,66,66,66, 90,90,90,90, ....
  // For the head veritcal servo, per its spec,  it can move, no load, 0.15 sec/60° at 6volt supply voltage to the servo at no load
  float degreesPerMsec =  50.0/150.0; // Give head vertical servo extra time due to load. For now don't use BackBentOver or Current Position but TODO if see transitino time issues
  int periods = ceil(abs((((float)degreeChange) / degreesPerMsec)/(float)PeriodInMsec));
  if (periods > maxEntries)
  {
    periods =  maxEntries;
    Serial.println("HeadVertServoSettingsForDegChng: Exceeded max entries");
  }
  if (periods <= 0)
  {
    periods = 1;
  }
  // set all entries to the final end point (i.e. no intermediate settings and just allow the number of periods time to reach that point)
  for (int i = 0; i < periods; i++)
  {
    DegreeSettingsToUse[i] = CurrentDegreeSetting + degreeChange;
  }
  return periods;   
}

int HeadHoriServoSettingsForDegChng(int CurrentDegreeSetting, int degreeChange, int PeriodInMsec, bool BackBentOver, int maxEntries, int * DegreeSettingsToUse)
{
  // Determines (returns) the number of periods (each PeriodMillis long) for the servo to move the indicated number of degrees
  // as well as an arry of the degree settings to use for period 0,to num periods - 1 to set the servo to at the end of period point.
  // The array is needed as for example for a the Head horizontal servo moving from the 45 degree to the 90 degree position when the back is bent over
  // requires a few 66 degree settings in between for some unknown reason. that is ......45,45,45, 45, 66,66,66,66, 90,90,90,90, ....
  // For the head horizontal servo, per its spec,  it can move, no load, 0.15 sec/60° at 6volt supply voltage to the servo at no load
  float degreesPerMsec =  50.0/150.0; // Give head vertical servo extra time due to load. For now don't use BackBentOver or Current Position but TODO if see transitino time issues
  int periods = ceil(abs((((float)degreeChange) / degreesPerMsec)/(float)PeriodInMsec));
  if (periods > maxEntries)
  {
    periods =  maxEntries;
    Serial.println("HeadHoriServoSettingsForDegChng: Exceeded max entries");
  }
  if (periods <= 0)
  {
    periods = 1;
  }
  // set all entries to the final end point (i.e. no intermediate settings and just allow the number of periods time to reach that point)
  for (int i = 0; i < periods; i++)
  {
    DegreeSettingsToUse[i] = CurrentDegreeSetting + degreeChange;
  }
  return periods;   
}

int scaleMouthAngle(int angle)
// scales the mouth open angle for the servo
// Used to make the mouth open wider than the normal human mouth or increase the degree of openness.
{
  if (abs(angle) <= 5) {
    // leave as is
  }
  else{
    angle = (angle * 8)/4;
  }
  return angle;
}

float convertPitchForHeadOrientation( float pitch)
//  head cap showing starting level pointing straight forward as pitch of 179 slightly down for that point and -179 slightly up.
{
	if (pitch >= 0.0)
  {
  	pitch = pitch -180.0;
  }
  else
  {
  	pitch = pitch +180.0;
  }
  return pitch;
}
